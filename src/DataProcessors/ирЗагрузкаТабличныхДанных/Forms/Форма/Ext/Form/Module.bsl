Перем РежимРедактора Экспорт;
Перем ПараметрОтбор Экспорт;
Перем ПараметрТабличныйДокумент Экспорт;
Перем ЗапрешеноСохранениеПолнойНастройки;
Перем мСтарыйСнимокНастройкиКомпоновки;

// В этом инструменте настройка формы сохраняется в разрезе ПолноеИмяТаблицы
Функция СохраняемаяНастройкаФормы(выхНаименование, выхИменаСвойств) Экспорт 
	Если ЗапрешеноСохранениеПолнойНастройки = Истина Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ирОбщий.ТабличныйДокументВосстановитьОформлениеТекущихСтрокЛкс(ЭтаФорма, ЭлементыФормы.ТабличныйДокумент);
	СинхронизироватьРеквизитыОбъекта();
	Результат = мПолучитьНастройку();
	Возврат Результат;
КонецФункции

Процедура ЗагрузитьНастройкуВФорме(НастройкаФормы, ДопПараметры = Неопределено, ИзФайла = Ложь) Экспорт 
	
	ЗаменитьДанныеТДиТЗ = Ложь;
	ЗаменитьМетаданныеТДиТЗ = Ложь
		Или ДопПараметры = Неопределено 
		Или Не ДопПараметры.Свойство("РазрешитьЗаменуМетаданныхТДиТЗ")
		Или ДопПараметры.РазрешитьЗаменуМетаданныхТДиТЗ;
	ЗаменитьДанныеТДиТЗ = Ложь
		Или ДопПараметры = Неопределено 
		Или Не ДопПараметры.Свойство("РазрешитьЗаменуДанныхТДиТЗ")
		Или ДопПараметры.РазрешитьЗаменуДанныхТДиТЗ;
	Если ЗаменитьДанныеТДиТЗ Тогда
		СтруктураПозицийТД = СтруктураПозицийТД();
		Если Ложь
			Или ТаблицаЗначений.Колонки.Количество() > 1 
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиЗаголовков, 1).Текст) 
		Тогда
			Если Истина
				И ИзФайла 
				И Не ЗначениеЗаполнено(ПолноеИмяТаблицы) 
				И НастройкаФормы.Свойство("ПолноеИмяТаблицы")
				И Не ЗначениеЗаполнено(НастройкаФормы.ПолноеИмяТаблицы) 
			Тогда
				Ответ = КодВозвратаДиалога.Да;
			Иначе
				Ответ = Вопрос("Хотите заменить табличный документ и таблицу значений на сохраненные ранее для выбранной таблицы БД?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			КонецЕсли; 
			ЗаменитьДанныеТДиТЗ = Ответ = КодВозвратаДиалога.Да;
			ЗаменитьМетаданныеТДиТЗ = ЗаменитьДанныеТДиТЗ;
		КонецЕсли; 
	КонецЕсли; 
	мЗагрузитьНастройку(НастройкаФормы, ЗаменитьДанныеТДиТЗ, ЗаменитьМетаданныеТДиТЗ);
	СинхронизироватьРеквизитыОбъекта(Ложь);
	ОбновитьФлагиСохраненияТДиТЗ(ЗаменитьДанныеТДиТЗ, ИзФайла);
	
КонецПроцедуры

Процедура УстановитьИсточникВФорме(РазрешитьЗаменуДанныхТДиТЗ = Истина, РазрешитьЗаменуМетаданныхТДиТЗ = Истина)
	
	ОчиститьСопоставлениеКолонокБД();
	УстановитьИсточник();
	мТекущееПолноеИмяТаблицы = ПолноеИмяТаблицы;
	ОбновитьФлагиСохраненияТДиТЗ(Ложь);
	ПараметрыЗагрузкиНастройкиФормы = Новый Структура;
	ПараметрыЗагрузкиНастройкиФормы.Вставить("РазрешитьЗаменуДанныхТДиТЗ", РазрешитьЗаменуДанныхТДиТЗ);
	ПараметрыЗагрузкиНастройкиФормы.Вставить("РазрешитьЗаменуМетаданныхТДиТЗ", РазрешитьЗаменуМетаданныхТДиТЗ);
	//СоставНастройкиФормы = Новый СписокЗначений;
	//СоставНастройкиФормы.Добавить("ВсеТаблицы", "Настройки всех таблиц", Истина);
	//СоставНастройкиФормы.Добавить("ТекущаяТаблица", "Настройки текущей таблицы", Истина);
	//СоставНастройкиФормы.Добавить("Прочее", "Прочее", Истина);
	ЗапрешеноСохранениеПолнойНастройки = Истина;
	ирОбщий.СоздатьМенеджерСохраненияНастроекФормыЛкс(ЭтаФорма, ПолноеИмяТаблицы, Не РежимРедактора, ПараметрыЗагрузкиНастройкиФормы, "sxl");
	ЗапрешеноСохранениеПолнойНастройки = Ложь;
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	ВыявитьНеуникальныеКлючи();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	//ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ПолеПоиска.Видимость = мЭтоСсылочныйОбъект;
	//ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ПолеПоиска.ИзменятьВидимость = мЭтоСсылочныйОбъект;
	ирОбщий.Форма_ОбновлениеОтображенияЛкс(ЭтаФорма);
	ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭтаФорма.Заголовок,, ПолноеИмяТаблицы, ": ");
	ирОбщий.ТабличноеПолеСОтборомПросмотраОбновитьПредставлениеЛкс(ЭтаФорма, ЭлементыФормы.ТаблицаЗначений, Истина);
	Если мСтарыйСнимокНастройкиКомпоновки <> ирОбщий.ОбъектВСтрокуXMLЛкс(ТаблицаЗначенийКомпоновщик.Настройки) Тогда
		Если мСтарыйСнимокНастройкиКомпоновки <> Неопределено Тогда 
			ТаблицаЗначенийИспользоватьОтбор = Истина;
		КонецЕсли; 
		Если ТаблицаЗначенийИспользоватьОтбор И ОтбиратьСразу И ТаблицаЗначений.Количество() > 0 Тогда
			ирОбщий.КомпоновщикНастроекВосстановитьЛкс(ТаблицаЗначенийКомпоновщик);
			ТаблицаЗначенийОтобрать();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ПриОткрытии()
	
	ирОбщий.Форма_ПриОткрытииЛкс(ЭтаФорма);
	СинхронизироватьРеквизитыОбъекта();
	Если Ложь
		Или ПараметрТабличныйДокумент <> Неопределено 
		Или ТаблицаЗначений.Колонки.Количество() <= 1
	Тогда
		ЭлементыФормы.ТабличныйДокумент.Очистить();
	КонецЕсли; 
	ПолученТабличныйДокумент = Ложь;
	Если ПараметрТабличныйДокумент <> Неопределено Тогда
		ЭлементыФормы.ТабличныйДокумент.ВставитьОбласть(ПараметрТабличныйДокумент.Область(),,, Ложь);
		ПолученТабличныйДокумент = Истина;
	КонецЕсли;
	ПолученаТаблицаЗначений = ТаблицаЗначений.Колонки.Количество() > 1 Или ТаблицаЗначений.Количество() > 0;
	Если Истина
		И ТаблицаЗначений.Количество() > 0
		И ТабличныйДокумент.ВысотаТаблицы = 0
	Тогда
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаЗначений;
	КонецЕсли;
	РазрешитьЗаменуДанныхТДиТЗ = Не ПолученТабличныйДокумент И Не ПолученаТаблицаЗначений;
	УстановитьИсточникВФорме(РазрешитьЗаменуДанныхТДиТЗ, РазрешитьЗаменуДанныхТДиТЗ);
	Если ПолученаТаблицаЗначений Тогда
		ЭтотОбъект.АвтоДобавлениеКолонокТЗИзБД = Ложь;
	ИначеЕсли ПолученТабличныйДокумент И Не ПолученаТаблицаЗначений Тогда
		ЭтотОбъект.АвтоДобавлениеКолонокТЗИзБД = Истина;
	КонецЕсли; 
	Если ПараметрОтбор <> Неопределено Тогда
		#Если Сервер И Не Сервер Тогда
			ПараметрОтбор = Новый Структура;
		#КонецЕсли
		Для Каждого КлючИЗначение Из ПараметрОтбор Цикл
			СтрокаПоля = СопоставлениеКолонокБД.Найти(КлючИЗначение.Ключ, "ИмяКолонкиПриемника");
			СтрокаПоля.Значение = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	НастроитьЭлементыФормы();
	Если Не РежимРедактора Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Применить);
	КонецЕсли; 
	ирОбщий.УстановитьДоступностьВыполненияНаСервереЛкс(ЭтаФорма, ЭлементыФормы.ВыполнятьКонвертациюНаСервере.Имя);
	ирОбщий.УстановитьДоступностьВыполненияНаСервереЛкс(ЭтаФорма, ЭлементыФормы.ВыполнятьЗагрузкуНаСервере.Имя);
	ирОбщий.НастроитьПоляВводаПараметровПотоковЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ирОбщий.Форма_ПриЗакрытииЛкс(ЭтаФорма, Не РежимРедактора);
	Если мКонсольЗапросов <> Неопределено Тогда
		мКонсольЗапросов.УничтожитьКомпоненты();
		мКонсольЗапросов = Неопределено; // Надо делать после автосохранения настройки
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПолноеИмяТаблицыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ОткрытьОбъектМетаданныхЛкс(МетаданныеТаблицыБД());
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаКонтрольЗаполнения(Кнопка)
	
	//СформироватьСтруктуруКолонок();
	КонтрольЗаполнения();
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаОбновить(Кнопка)
	
	ОбновитьДанныеТабличногоДокумента();
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаПредыдущееПримечание(Кнопка)
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево - 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка > 0 Цикл
		
		Пока Не Нашли и Колонка > 0 Цикл
			
			Область = ТабличныйДокумент.Область(Строка, Колонка);
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка - 1;
		КонецЦикла;
		Строка = Строка - 1;
		Колонка = ТабличныйДокумент.ШиринаТаблицы;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнуто начало документа");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаСледующееПримечание(Кнопка)
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	Нашли = Ложь;
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево + 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	Пока Не Нашли и Строка <= ТабличныйДокумент.ВысотаТаблицы Цикл
		Пока Не Нашли и Колонка <=  ТабличныйДокумент.ШиринаТаблицы Цикл
			Область = ТабличныйДокумент.Область(Строка, Колонка);
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			Колонка = Колонка + 1;
		КонецЦикла;
		Строка = Строка + 1;
		Колонка = 1;
	КонецЦикла;
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнут конец документа");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаСохранить(Кнопка)
	
	ирОбщий.СохранитьТабличныйДокументИнтерактивноЛкс(ЭлементыФормы.ТабличныйДокумент);
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаОткрыть(Кнопка)
	
	Результат = ирОбщий.ЗагрузитьТабличныйДокументИнтерактивноЛкс(ЭлементыФормы.ТабличныйДокумент);
	Если Результат <> Неопределено Тогда
		ОбновитьФиксациюШапкиТабличногоДокумента();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельВыбратьЗначениеВыбратьЗначение(Кнопка)
	
	ВыбратьЗначениеВЯчейке();
	
КонецПроцедуры

Процедура ОбновитьФлагиСохраненияТДиТЗ(Знач ЗаменитьДанныеТДиТЗ, Знач ИзФайла = Ложь)
	
	ЭтотОбъект.СохранятьДанныеТД = Ложь;
	ЭтотОбъект.СохранятьДанныеТЗ = Ложь;
	Если Не ИзФайла И ЗаменитьДанныеТДиТЗ Тогда
		СтруктураПозицийТД = СтруктураПозицийТД();
		ЭтотОбъект.СохранятьДанныеТД = ТабличныйДокумент.ВысотаТаблицы >= СтруктураПозицийТД.НомерСтрокиДанных;
		ЭтотОбъект.СохранятьДанныеТЗ = ТаблицаЗначений.Количество() > 0;
	КонецЕсли; 

КонецПроцедуры

Процедура КоманднаяПанельФормыСохранитьЗначенияВФайл(Кнопка)
	
	СинхронизироватьРеквизитыОбъекта();
	Настройки = мПолучитьНастройку(Истина);
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирОбщий.СохранитьЗначениеВФайлИнтерактивноЛкс(Настройки, "sxl", "Настройка загрузки табличных данных", Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВосстановитьЗначенияИзФайла(Кнопка)
	
	Настройка = ирОбщий.ЗагрузитьЗначениеИзФайлаИнтерактивноЛкс("sxl", "Настройка загрузки табличных данных");
	Если Настройка <> Неопределено Тогда
		ЗагрузитьНастройкуВФорме(Настройка,, Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыКонвертировать(Кнопка = Неопределено)
	
	ПараметрыЗадания = Новый Структура;
	Если Не ВыполнятьКонвертациюНаСервере Тогда
		ПараметрыЗадания.Вставить("ЭтаФорма", ЭтаФорма);
	КонецЕсли; 
	Если Ложь
		Или Кнопка = Неопределено
		Или Кнопка.Картинка <> ирКэш.КартинкаПоИмениЛкс("ирОстановить") 
	Тогда
		Для Каждого СтрокаКолонки Из СопоставлениеКолонокТЗ Цикл
			Если СтрокаКолонки.РежимКонвертации = "Вычислять" Тогда
				Если Не ЗначениеЗаполнено(СтрокаКолонки.Алгоритм) Тогда
					ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока = СтрокаКолонки;
					ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяКолонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Алгоритм;
					ирОбщий.СообщитьЛкс("Необходимо задать алгоритм конвертации значения", СтатусСообщения.Внимание);
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		Если ТаблицаЗначений.Колонки.Количество() <= 1 Тогда
			КоманднаяПанельТаблицаЗначенийЗаполнитьИзТабличногоДокумента();
		КонецЕсли; 
		НачальноеКоличество = ТаблицаЗначений.Колонки.Количество(); 
		Для Счетчик = 1 По НачальноеКоличество Цикл
			КолонкаТЗ = ТаблицаЗначений.Колонки[НачальноеКоличество - Счетчик];
			Если ирОбщий.СтрКончаетсяНаЛкс(КолонкаТЗ.Имя, мСуффиксСырыхДанных) Тогда
				ТаблицаЗначений.Колонки.Удалить(КолонкаТЗ);
			КонецЕсли;
		КонецЦикла;
		Если СопоставлениеКолонокТЗ.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
			ирОбщий.СообщитьЛкс("Не отмечено колонок для конвертации!");
			Возврат;
		КонецЕсли;
		ОчиститьСообщения();
		СтруктураПозицийТД = СтруктураПозицийТД(, Истина);
		НачальнаяСтрока = СтруктураПозицийТД.НомерСтрокиДанных;
		КонечнаяСтрока = ТабличныйДокумент.ВысотаТаблицы;
		Если ТолькоВыделенныеСтрокиТД Тогда
			Если ТабличныйДокумент.ТекущаяОбласть.Верх <= КонечнаяСтрока Тогда
				НачальнаяСтрока = Макс(НачальнаяСтрока, ТабличныйДокумент.ТекущаяОбласть.Верх);
			КонецЕсли; 
			Если ТабличныйДокумент.ТекущаяОбласть.Низ >= НачальнаяСтрока Тогда
				КонечнаяСтрока = Мин(КонечнаяСтрока, ТабличныйДокумент.ТекущаяОбласть.Низ);
			КонецЕсли; 
		КонецЕсли; 
		ПараметрыЗадания.Вставить("СтруктураПозицийТД", СтруктураПозицийТД);
		ПараметрыЗадания.Вставить("НачальнаяСтрока", НачальнаяСтрока);
		ПараметрыЗадания.Вставить("КонечнаяСтрока", КонечнаяСтрока);
		ПараметрыЗадания.Вставить("ВыполнятьНаСервере", ВыполнятьКонвертациюНаСервере);
	КонецЕсли; 
	БлокируемыеЭлементыФормы = Новый Массив;
	БлокируемыеЭлементыФормы.Добавить(ЭлементыФормы.ПолноеИмяТаблицы);
	#Если Сервер И Не Сервер Тогда
		КонвертироватьДанные();
		КонвертироватьДанныеЗавершение();
	#КонецЕсли
	ирОбщий.ВыполнитьЗаданиеФормыЛкс("КонвертироватьДанные", ПараметрыЗадания, ЭтаФорма, "КонвертацияЗначений",,
		Кнопка, "КонвертироватьДанныеЗавершение",, БлокируемыеЭлементыФормы, Истина,, Истина);
	
КонецПроцедуры

Процедура КонвертироватьДанныеЗавершение(СостояниеЗадания = Неопределено, РезультатЗадания = Неопределено) Экспорт 
	
	Если Ложь
		Или СостояниеЗадания = Неопределено
		Или СостояниеЗадания = СостояниеФоновогоЗадания.Завершено 
	Тогда
		Если РезультатЗадания = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЭтотОбъект.ТаблицаЗначений = РезультатЗадания.ТаблицаЗначений;
		Если РезультатЗадания.Свойство("ТабличныйДокумент") Тогда
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(РезультатЗадания.ТабличныйДокумент);
		КонецЕсли; 
		СинхронизироватьРеквизитыОбъекта();
		Если Не РезультатЗадания.Успех Тогда 
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
			Возврат;
		КонецЕсли; 
		ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
		ВыполнитьЗапросДополнения();
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаЗначений;
	КонецЕсли; 

КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ТекущиеДанные.Значение = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Значение);
	РежимЗагрузкиИскать = ТекущиеДанные.РежимКонвертации = "Искать";
	
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекущиеДанные);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	СписокВыбора = СписокСвязейКолонкиПоВладельцу(ТекущиеДанные);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоВладельцу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоВладельцу) = Неопределено Тогда
		СписокВыбора.Вставить(0, ТекущиеДанные.СвязьПоВладельцу, ТекущиеДанные.СвязьПоВладельцу);
	КонецЕсли;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	СписокВыбора = СписокСвязейКолонкиПоТипу(ТекущиеДанные);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоТипу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоТипу) = Неопределено Тогда
		СписокВыбора.Вставить(0, ТекущиеДанные.СвязьПоТипу,ТекущиеДанные.СвязьПоТипу);
	КонецЕсли;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ЭлементСвязиПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Значение.ЭлементУправления.КнопкаВыбора = ТипЗнч(ТекущиеДанные.Значение) <> Тип("Строка");
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ЦветТекстаНеактивности = ирОбщий.ЦветТекстаНеактивностиЛкс();
	ЦветФонаАктивности = ирОбщий.ЦветФонаАкцентаЛкс();
	Если Не ДанныеСтроки.Пометка Тогда
		ОформлениеСтроки.ЦветТекста = ЦветТекстаНеактивности;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.КолонкаИсточника.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.КолонкаПриемника.Видимость = Ложь;
	ОтключитьЯчейки = Новый Структура;
	РежимЗагрузкиВычислять = ДанныеСтроки.РежимКонвертации = "Вычислять";
	Если РежимЗагрузкиВычислять Тогда
		Если ДанныеСтроки.Пометка Тогда
			ОформлениеСтроки.Ячейки.Алгоритм.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ДанныеСтроки.Алгоритм);
			ОформлениеСтроки.Ячейки.Алгоритм.ЦветФона = ЦветФонаАктивности;
		КонецЕсли;
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.Имя);
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.Имя);
	Иначе
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Алгоритм.Имя);
	КонецЕсли;
	Если ДанныеСтроки.РежимКонвертации <> "Искать" Тогда 
		ОформлениеСтроки.Ячейки.ИмяКолонкиИсточника.ЦветТекста = ЦветТекстаНеактивности;
		ОформлениеСтроки.Ячейки.СинонимКолонкиИсточника.ЦветТекста = ЦветТекстаНеактивности;
		ОформлениеСтроки.Ячейки.ПримерДанных.ЦветТекста = ЦветТекстаНеактивности;
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.Имя);
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ЭлементСвязиПоТипу.Имя);
	КонецЕсли;
	Если Не ДанныеСтроки.ОписаниеТипов.СодержитТип(Тип("Строка")) Тогда
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ОбрезатьКрайниеПробелы.Имя);
	КонецЕсли; 
	ТипыПриемника = ДанныеСтроки.ОписаниеТипов.Типы();
	Если Истина
		И ТипыПриемника.Количество() = 1 
		И Не ирОбщий.ЛиТипСсылкиБДЛкс(ТипыПриемника[0], Ложь) 
	Тогда
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.Имя);
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.Имя);
	КонецЕсли; 
	Если ДанныеСтроки.РежимКонвертации = "Искать" Тогда
		//ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Значение.Имя);
		//Если ДанныеСтроки.Пометка Тогда
		//	ОформлениеСтроки.Ячейки.ИмяКолонкиИсточника.ЦветФона = ЦветФонаАктивности;
		//	ОформлениеСтроки.Ячейки.СинонимКолонкиИсточника.ЦветФона = ЦветФонаАктивности;
		//КонецЕсли;
	КонецЕсли;
	Если ДанныеСтроки.РежимКонвертации = "Устанавливать" Тогда 
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИгнорироватьРасшифровку.Имя);
		Если ДанныеСтроки.Пометка Тогда
			ОформлениеСтроки.Ячейки.Значение.ЦветФона = ЦветФонаАктивности;
		КонецЕсли;
	КонецЕсли; 
	Если Ложь
		Или ДанныеСтроки.РежимКонвертации <> "Искать"
		Или Не ДанныеСтроки.ОписаниеТипов.СодержитТип(Тип("Дата"))
	Тогда 
		ОтключитьЯчейки.Вставить(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.АмериканскоеПоложениеМесяца.Имя);
	КонецЕсли; 
	Для Каждого КлючИЗначение Из ОтключитьЯчейки Цикл
		ОформлениеЯчейки = ОформлениеСтроки.Ячейки[КлючИЗначение.Ключ];
		//ОформлениеЯчейки.ТолькоПросмотр = Истина;
		ОформлениеЯчейки.ОтображатьКартинку = Ложь;
		ОформлениеЯчейки.ОтображатьФлажок = Ложь;
		ОформлениеЯчейки.ЦветТекста = ЦветТекстаНеактивности;
		//Если Ложь
		//	Или КлючИЗначение.Ключ = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Алгоритм.Имя
		//	Или (Истина
		//		И Не ОтключитьЯчейки.Свойство(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Алгоритм.Имя)
		//		И (Ложь
		//			Или КлючИЗначение.Ключ = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.Имя))
		//Тогда
		//	ОформлениеЯчейки.Видимость = Ложь;
		//КонецЕсли; 
	КонецЦикла;
	
 	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, , "Значение");
	ирОбщий.ОформитьЯчейкуАлгоритмаВТабличномПолеЛкс(ОформлениеСтроки,, Истина);
	ирОбщий.ОформитьЯчейкуСРасширеннымЗначениемЛкс(ОформлениеСтроки.Ячейки.ОписаниеТипов,,, Ложь);
	ирОбщий.ТабличноеПолеКолонокПриВыводеСтрокиЛкс(ОформлениеСтроки, ДанныеСтроки, "ОписаниеТипов");

КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ОписаниеТипов = ТекущиеДанные.ДоступноеОписаниеТипов;
	Если ОписаниеТипов.Типы().Количество() = 1 Тогда
		СтандартнаяОбработка = Ложь;
		РедактироватьТаблицуЗначений(ТекущиеДанные.ИмяКолонкиПриемника);
	Иначе
		МассивТипов = Новый Массив;
		Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
			МассивТипов.Добавить(Тип);
		КонецЦикла;
		Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов, ОписаниеТипов.КвалификаторыЧисла, ОписаниеТипов.КвалификаторыСтроки, ОписаниеТипов.КвалификаторыДаты);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ТекущиеДанные.ОписаниеТипов = ТекущиеДанные.ДоступноеОписаниеТипов;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ТекущиеДанные.Значение = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Значение);
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекущиеДанные);
	ТекущиеДанные.ИскатьПо = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	СписокВыбора = СписокСвязейКолонкиПоВладельцу(ТекущиеДанные);
	ТекущиеДанные.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	СписокВыбора = СписокСвязейКолонкиПоТипу(ТекущиеДанные);
	ТекущиеДанные.СвязьПоТипу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Значение.ЭлементУправления.КнопкаВыбора = Не ТипЗНЧ(ТекущиеДанные.Значение) = Тип("Строка");
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТабличноеПоле = ЭлементыФормы.СопоставлениеКолонокТЗ;
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	СвязьПоВладельцу = ТекущиеДанные.СвязьПоВладельцу;
	Если ТекущиеДанные.РежимКонвертации = "Искать" И ТипЗнч(СвязьПоВладельцу) = Тип("Строка") Тогда
		ЗначениеВладельца = Неопределено;
		Если ЗначениеЗаполнено(СвязьПоВладельцу) Тогда 
			СтрокаСвязиПоВладельцу = ТабличноеПоле.Значение.Найти(СвязьПоВладельцу, "ИмяКолонкиПриемника");
			Если СтрокаСвязиПоВладельцу <> Неопределено Тогда
				ЗначениеВладельца = СтрокаСвязиПоВладельцу.Значение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеВладельца = СвязьПоВладельцу;
	КонецЕсли;
	Попытка
		Элемент.ВыборПоВладельцу = ЗначениеВладельца;
	Исключение
	КонецПопытки; 
	ирОбщий.ПолеВвода_НачалоВыбораЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ТекущиеДанные.Значение = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкиТабличногоДокумента = ПолучитьКолонкиТабличногоДокумента();
	КолонкаИсточника = КолонкиТабличногоДокумента[Элемент.Значение];
	СопоставитьКолонкуТЗ(ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока, КолонкаИсточника);
	ОбновитьСопоставлениеКолонокТЗ();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкиТабличногоДокумента = ПолучитьКолонкиТабличногоДокумента();
	КолонкаИсточника = КолонкиТабличногоДокумента[Элемент.Значение];
	СопоставитьКолонкуТЗ(ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока, КолонкаИсточника);
	Если КолонкаИсточника <> Неопределено Тогда
		Элемент.Значение = КолонкаИсточника.Заголовок;
	КонецЕсли; 
	ОбновитьСопоставлениеКолонокТЗ();
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.РежимКонвертации) Тогда
		ТекущиеДанные.РежимКонвертации = "Устанавливать";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИмяКолонкиИсточника) И ТекущиеДанные.РежимКонвертации = "Искать" Тогда
		Предупреждение("Не выбрана колонка источника");
		ТекущиеДанные.РежимКонвертации = "Устанавливать";
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовИскатьПоПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) И Не Элемент.СписокВыбора.Количество() = 0 Тогда
		Элемент.Значение = Элемент.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовСвязьПоВладельцуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			ФормаВыбора = ирОбщий.ПолучитьФормуСпискаЛкс(Тип(ВыбранноеЗначение),, Истина, Элемент, Истина,, Элемент.Значение,, ЭтаФорма);
			НовоеЗначение = ФормаВыбора.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0, НовоеЗначение, НовоеЗначение);
				КонецЕсли;
				Элемент.Значение = НовоеЗначение;
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовСвязьПоТипуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			ФормаВыбора = ирОбщий.ПолучитьФормуСпискаЛкс(Тип(ВыбранноеЗначение),, Истина, Элемент, Истина,, Элемент.Значение,, ЭтаФорма);
			НовоеЗначение = ФормаВыбора.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0,НовоеЗначение,НовоеЗначение);
				КонецЕсли;
				Элемент.Значение = НовоеЗначение;
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыАлгоритма = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет("АлгоритмКонвертацииЗначения"),,,, Истина);
	ПараметрыАлгоритма.Колонки.Добавить("ТаблицаСтруктурТипов");
	#Если Сервер И Не Сервер Тогда
	    мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	Для Каждого СтрокаПараметра Из ПараметрыАлгоритма Цикл
		Если ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "ТекущиеДанные") Тогда
			ТекущиеДанные = Новый Структура;
			Для Каждого СтрокаСопоставления Из СопоставлениеКолонокТЗ Цикл
				ТекущиеДанные.Вставить(СтрокаСопоставления.ИмяКолонкиПриемника, СтрокаСопоставления.Значение);
			КонецЦикла;
			СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ТаблицаСтруктурТиповИзЗначения(ТекущиеДанные);
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.РедактироватьАлгоритмЧерезСтрокуXMLЛкс(Элемент.Значение, ПараметрыАлгоритма);

КонецПроцедуры

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	ирОбщий.Форма_ОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура ПолноеИмяТаблицыПриИзменении(Элемент)
	
	Если Не РежимРедактора Тогда
		ирОбщий.СохранитьНастройкуФормыЛкс(ЭтаФорма);
	КонецЕсли; 
	УстановитьИсточникВФорме();
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);

КонецПроцедуры

Функция ПараметрыВыбораОбъектаМетаданных()
	Возврат ирОбщий.ПараметрыВыбораОбъектаМетаданныхЛкс(Истина,, Истина,,, Истина,, Истина);
КонецФункции

Процедура ПолноеИмяТаблицыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ОбъектМетаданныхНачалоВыбораЛкс(Элемент, ПараметрыВыбораОбъектаМетаданных(), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолноеИмяТаблицыОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ОбъектМетаданныхОкончаниеВводаТекстаЛкс(Элемент, ПараметрыВыбораОбъектаМетаданных(), Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолноеИмяТаблицыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельЗагружаемыеРеквизитыВТаблицуЗначений(Кнопка)
	
	
КонецПроцедуры

Процедура ТаблицаЗначенийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.КоманднаяПанельТаблицаЗначений.Кнопки.Идентификаторы);
	Для Каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
		Если ирОбщий.СтрКончаетсяНаЛкс(Ячейка.Имя, мСуффиксСырыхДанных) Тогда
			Ячейка.ЦветТекста = ирОбщий.ЦветТекстаНеактивностиЛкс();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция РеквизитыДляСервера(Параметры = Неопределено) Экспорт 
	
	СинхронизироватьРеквизитыОбъекта();
	Результат = Новый Структура;
	Для Каждого МетаРеквизит Из Метаданные().Реквизиты Цикл
		Если Истина
			И Параметры <> Неопределено
			И Параметры.Свойство("Записывать")
			И (Ложь
				Или МетаРеквизит.Имя = "ТабличныйДокумент" 
				Или МетаРеквизит.Имя = "ТаблицаЗначений")
		Тогда
			Продолжить;
		КонецЕсли; 
		Если Ложь
			Или МетаРеквизит.Имя = "ТаблицаБД"
			Или МетаРеквизит.Имя = "ТаблицаЗначенийОтобранное"
			Или МетаРеквизит.Имя = "ТаблицаЗначенийКомпоновщик"
		Тогда
			Продолжить;
		КонецЕсли; 
		Результат.Вставить(МетаРеквизит.Имя, ЭтотОбъект[МетаРеквизит.Имя]);
	КонецЦикла;
	Результат.Вставить("СобытияОбработкиОбъектов", ирОбщий.КопияТаблицыСобытийДляСервераЛкс(СобытияОбработкиОбъектов));
	Если Результат.Свойство("ТабличныйДокумент") Тогда
		Результат.Вставить("ТабличныйДокумент", ТабличныйДокумент.ПолучитьОбласть());
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Процедура ОсновныеДействияФормыЗагрузить(Кнопка)
	
	ЗапуститьЗагрузкуВБД(Кнопка, Истина);
	
КонецПроцедуры

Процедура ЗапуститьЗагрузкуВБД(Знач Кнопка, Знач Записывать)
	
	ПараметрыЗадания = Новый Структура;
	Если ТолькоВыделенныеСтрокиТЗ Тогда
		ПараметрыЗадания.Вставить("ТаблицаЗначенийОтобранное", ТаблицаЗначенийОтобранное.Скопировать(ирОбщий.ВыделенныеСтрокиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений)));
	Иначе
		ПараметрыЗадания.Вставить("ТаблицаЗначенийОтобранное", ТаблицаЗначенийОтобранное);
	КонецЕсли; 
	Если Записывать И Кнопка.Картинка <> ирКэш.КартинкаПоИмениЛкс("ирОстановить") Тогда
		РеквизитыОбработки = РеквизитыДляСервера();
		КоличествоСтрокДляОбработки = ПараметрыЗадания.ТаблицаЗначенийОтобранное.Количество();
		Если Записывать И КоличествоСтрокДляОбработки > 0 Тогда 
			ТекстВопросаИсточника = " строк в таблице БД " + ПолноеИмяТаблицы;
			Если Вопрос("Загрузить " + КоличествоСтрокДляОбработки + ТекстВопросаИсточника, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	ПараметрыЗадания.Вставить("Записывать", Записывать);
	ПараметрыЗадания.Вставить("ВыполнятьНаСервере", ВыполнятьЗагрузкуНаСервере);
	БлокируемыеЭлементыФормы = Новый Массив;
	БлокируемыеЭлементыФормы.Добавить(ЭлементыФормы.ПолноеИмяТаблицы);
	#Если Сервер И Не Сервер Тогда
		ЗагрузитьВБДИзТаблицыЗначений();
		ЗагрузитьВБДЗавершение();
	#КонецЕсли
	ирОбщий.ВыполнитьЗаданиеФормыЛкс("ЗагрузитьВБДИзТаблицыЗначений", ПараметрыЗадания, ЭтаФорма, "ЗагрузкаВБД", "Загрузка в БД",
		Кнопка, "ЗагрузитьВБДЗавершение",, БлокируемыеЭлементыФормы, Истина,, Истина);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДЗагрузитьБезЗаписи(Кнопка)
	
	ЗапуститьЗагрузкуВБД(Кнопка, Ложь);
	
КонецПроцедуры

// Предопределеный метод
Процедура ПроверкаЗавершенияФоновыхЗаданий() Экспорт 
	
	ирОбщий.ПроверитьЗавершениеФоновыхЗаданийФормыЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ЗагрузитьВБДЗавершение(СостояниеЗадания = Неопределено, РезультатЗадания = Неопределено) Экспорт 
	
	Если Ложь
		Или СостояниеЗадания = Неопределено
		Или СостояниеЗадания = СостояниеФоновогоЗадания.Завершено 
	Тогда
		Если РезультатЗадания = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатЗадания); 
		СинхронизироватьРеквизитыОбъекта();
		ЭлементыФормы.ТаблицаБД.СоздатьКолонки();
		ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаБД,, ирОбщий.ПоляТаблицыМДЛкс(ПолноеИмяТаблицы),, Истина);
		НастроитьСлужебныеКолонкиТабличногоПоляБД();
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаБД;
		ирОбщий.ОповеститьФормыПодсистемыЛкс("ЗаписанОбъект", , ЭтаФорма);
	КонецЕсли; 

КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.СопоставлениеКолонокТЗ Тогда
		ОбновитьСопоставлениеКолонокТЗВФорме();
	ИначеЕсли Ложь
		Или ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.СопоставлениеКолонокБД 
		Или ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаБД
	Тогда
		ОбновитьСопоставлениеКолонокБД();
	//ИначеЕсли ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаБД Тогда
	//	ОбновитьКолонкиТаблицыБД();
	КонецЕсли; 
	СинхронизироватьРеквизитыОбъекта();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

Процедура ОбновитьСопоставлениеКолонокТЗВФорме()
	
	ТабличноеПоле = ЭлементыФормы.СопоставлениеКолонокТЗ;
	СостояниеСтрок = ирОбщий.ТабличноеПолеСостояниеСтрокЛкс(ТабличноеПоле, "ИмяКолонкиПриемника");
	ОбновитьСопоставлениеКолонокТЗ(,, ТолькоВыделенныеСтрокиТД);
	ирОбщий.ТабличноеПолеВосстановитьСостояниеСтрокЛкс(ТабличноеПоле, СостояниеСтрок, Истина);

КонецПроцедуры

Процедура НастроитьЭлементыФормы()
	
	ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ДопРеквизит.Видимость = Истина
		И ирКэш.ЛиДоступныДопРеквизитыБСПЛкс()
		И ирОбщий.ЛиМетаданныеСсылочногоОбъектаЛкс(МетаданныеТаблицыБД());
	ЭлементыФормы.ПанельОсновная.Страницы.СопоставлениеКолонокБД.Доступность = ЗначениеЗаполнено(ПолноеИмяТаблицы);
	ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаБД.Доступность = ЗначениеЗаполнено(ПолноеИмяТаблицы);
	ЭлементыФормы.СопоставлениеКолонокБД.Колонки.Принадлежность.Видимость = Истина
		И СопоставлениеКолонокБД.Количество() > 0
		И ЗначениеЗаполнено(СопоставлениеКолонокБД[0].Принадлежность);
	ЭлементыФормы.НадписьНеуникальные.Гиперссылка = КоличествоНеуникально > 0;
	ЭлементыФормы.ДополнениеЗапросом.Доступность = ДополнятьЗапросом;
	ДоступностьМногопоточности = ВыполнятьЗагрузкуНаСервере И ЭлементыФормы.ВыполнятьЗагрузкуНаСервере.Доступность И Не ирКэш.ЛиФайловаяБазаЛкс();
	ЭлементыФормы.КоличествоПотоков.Доступность = ДоступностьМногопоточности;
	ЭлементыФормы.КоличествоОбъектовВПорции.Доступность = КоличествоПотоков > 1 И ДоступностьМногопоточности;

КонецПроцедуры

Функция ОписаниеТиповКлючейРезультатов()

	МассивТипов = Новый Массив();
	ТипКлюча = ирОбщий.ТипКлючаЗаписиТаблицыЛкс(ПолноеИмяТаблицы);
	МассивТипов.Добавить(ТипКлюча);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Возврат ОписаниеТипов;

КонецФункции

Процедура КоманднаяПанельТаблицаБДВСписок(Кнопка)
	
	Если Не ирОбщий.ЛиКорневойТипСсылочногоОбъектаБДЛкс(ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	Список = Новый СписокЗначений;
	Список.ТипЗначения = ОписаниеТиповКлючейРезультатов();
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ТаблицаБД.ВыделенныеСтроки Цикл
		Список.Добавить(ВыделеннаяСтрока.Ссылка);
	КонецЦикла;
	ирОбщий.ОткрытьЗначениеЛкс(Список,,,, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийОткрытьТаблицу(Кнопка)
	
	РедактироватьТаблицуЗначений();
	
КонецПроцедуры

Процедура РедактироватьТаблицуЗначений(ИмяКолонки = "", Заголовок = "")
	
	Если ЗначениеЗаполнено(ИмяКолонки) Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗначений.Колонки[ИмяКолонки];
	КонецЕсли; 
	Если ирОбщий.ОткрытьЗначениеЛкс(ТаблицаЗначений, Истина,, Заголовок,,, ЭлементыФормы.ТаблицаЗначений) Тогда 
		СинхронизироватьРеквизитыОбъекта(); 
		Если АвтоДобавлениеКолонокТЗИзБД И ЗначениеЗаполнено(ПолноеИмяТаблицы) Тогда
			ОбновитьКолонкиТаблицыЗначений(Ложь, Истина);
		КонецЕсли; 
		ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьКолонкиТабличногоПоляТаблицыЗначений(ОчиститьОграниченияТипов = Ложь) Экспорт 
	
	Если ОчиститьОграниченияТипов Тогда
		СопоставлениеКолонокТЗ.ЗаполнитьЗначения(Неопределено, "ОписаниеТипов");
	КонецЕсли; 
	ПроверитьДобавитьКолонкуИдентификатораСтроки(ТаблицаЗначений);
	ОбновитьСопоставлениеКолонокТЗВФорме();
	ОбновитьСопоставлениеКолонокБД();
	ТаблицаЗначенийОтобрать();
	ЭлементыФормы.ТаблицаЗначений.СоздатьКолонки();
	Если ЗначениеЗаполнено(ПолноеИмяТаблицы) Тогда
		ПоляТаблицыБД = ирОбщий.ПоляТаблицыМДЛкс(ПолноеИмяТаблицы);
	КонецЕсли; 
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений,, ПоляТаблицыБД);
	Если ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = Неопределено И ТаблицаЗначений.Количество() > 0 Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = ТаблицаЗначений[0];
	КонецЕсли; 
	КолонкиТабличногоПоля = ЭлементыФормы.ТаблицаЗначений.Колонки;
	КолонкиТабличногоПоля[мИмяКолонкиНомерСтроки].ТолькоПросмотр = Истина;
	Для Каждого КолонкаТЗ Из ТаблицаЗначений.Колонки Цикл
		Если ирОбщий.СтрКончаетсяНаЛкс(КолонкаТЗ.Имя, мСуффиксСырыхДанных) Тогда
			ИмяГотовойКолонки = ирОбщий.СтрокаБезКонцаЛкс(КолонкаТЗ.Имя, СтрДлина(мСуффиксСырыхДанных));
			ГотоваяКолонкаТП = КолонкиТабличногоПоля.Найти(ИмяГотовойКолонки);
			Если ГотоваяКолонкаТП = Неопределено Тогда
				// Готовую колонку переименовали. Связь с сырой колонкой потеряна
				КолонкиТабличногоПоля.Удалить(КолонкиТабличногоПоля[КолонкаТЗ.Имя]);
				Продолжить;
			КонецЕсли; 
			КолонкиТабличногоПоля.Сдвинуть(КолонкиТабличногоПоля[КолонкаТЗ.Имя], 
				КолонкиТабличногоПоля.Индекс(ГотоваяКолонкаТП) - КолонкиТабличногоПоля.Индекс(КолонкиТабличногоПоля[КолонкаТЗ.Имя]) + 1);
			КолонкиТабличногоПоля[КолонкаТЗ.Имя].Положение = ПоложениеКолонки.ВТойЖеКолонке;
			КолонкиТабличногоПоля[КолонкаТЗ.Имя].ТекстШапки = "<Сырое>";
			КолонкиТабличногоПоля[КолонкаТЗ.Имя].ТолькоПросмотр = Истина;
		КонецЕсли; 
	КонецЦикла;
	ТаблицаЗначенийПослеДобавленияКолонок();

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийРедакторОбъектаБДСтроки(Кнопка)
	
	Если ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьТекущуюСтрокуТабличногоПоляТаблицыБДВРедактореОбъектаБДЛкс(ЭлементыФормы.ТаблицаБД, ПолноеИмяТаблицы,,,,, Ложь);
	
КонецПроцедуры

Процедура УстановитьПервуюСтрокуДанныхНажатие(Элемент)
	
	ЭтаФорма.ПерваяСтрокаДанныхТД = ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	ПерваяСтрокаДанныхТДПриИзменении();
	ОбновитьФиксациюШапкиТабличногоДокумента();
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура ОбновитьФиксациюШапкиТабличногоДокумента()
	
	СтруктураПозицийТД = СтруктураПозицийТД();
	ЭлементыФормы.ТабличныйДокумент.ФиксацияСверху = СтруктураПозицийТД.НомерСтрокиДанных - 1;

КонецПроцедуры

Процедура УстановитьСтрокуЗаголовковНажатие(Элемент)
	
	ЭтаФорма.СтрокаЗаголовковТД = ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	СтрокаЗаголовковТДПриИзменении();
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	Ответ = Вопрос("Хотите сразу перезаполнить структуру таблицы значений?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаЗначений.Колонки.Очистить();
		КоманднаяПанельТаблицаЗначенийЗаполнитьИзТабличногоДокумента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерваяСтрокаДанныхТДОткрытие(Элемент, СтандартнаяОбработка)
	
	СтруктураПозицийТД = СтруктураПозицийТД();
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиДанных, 1,
		СтруктураПозицийТД.НомерСтрокиДанных, ЭлементыФормы.ТабличныйДокумент.ШиринаТаблицы);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СтрокаЗаголовковТДОткрытие(Элемент, СтандартнаяОбработка)
	
	СтруктураПозицийТД = СтруктураПозицийТД();
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиЗаголовков, 1,
		СтруктураПозицийТД.НомерСтрокиЗаголовков, ЭлементыФормы.ТабличныйДокумент.ШиринаТаблицы);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПерваяСтрокаДанныхТДПриИзменении(Элемент = Неопределено)
	
	Если ПерваяСтрокаДанныхТД > 0 И СтрокаЗаголовковТД >= ПерваяСтрокаДанныхТД Тогда
		СтрокаЗаголовковТД = ПерваяСтрокаДанныхТД - 1;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СтрокаЗаголовковТДПриИзменении(Элемент = Неопределено)
	
	Если СтрокаЗаголовковТД > 0 И СтрокаЗаголовковТД >= ПерваяСтрокаДанныхТД Тогда
		ПерваяСтрокаДанныхТД = СтрокаЗаголовковТД + 1;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДЗаполнитьПоИменам(Кнопка)
	
	СопоставлениеКолонокБДЗаполнитьПоИменамСинонимам();
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДОчистить(Кнопка)
	
	ОчиститьСопоставлениеКолонокБД();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДИмяКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкаИсточника = ТаблицаЗначений.Колонки.Найти(Элемент.Значение);
	СопоставитьКолонкуБД(ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока, КолонкаИсточника);
	ОбновитьСопоставлениеКолонокБД();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДСинонимКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкаИсточника = ТаблицаЗначений.Колонки.Найти(Элемент.Значение);
	СопоставитьКолонкуБД(ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока, КолонкаИсточника);
	Если КолонкаИсточника <> Неопределено Тогда
		Элемент.Значение = КолонкаИсточника.Заголовок;
		ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока.Пометка = Истина;
	КонецЕсли; 
	ОбновитьСопоставлениеКолонокБД();

КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДИмяКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ИмяКолонкиИсточника.ЭлементУправления.СписокВыбора;
	ЗаполнитьСписокВыбораКолонкиИсточникаДляБД(СписокВыбора, "ИмяКолонки");
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДСинонимКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.СинонимКолонкиИсточника.ЭлементУправления.СписокВыбора;
	ЗаполнитьСписокВыбораКолонкиИсточникаДляБД(СписокВыбора, "СинонимКолонки");

КонецПроцедуры

Процедура ЗаполнитьСписокВыбораКолонкиИсточникаДляБД(Знач СписокВыбора, ИмяПредставления)
	
	#Если Сервер И Не Сервер Тогда
		СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	Для Каждого СтрокаНесопоставленнойКолонки Из КолонкиТЗ Цикл
		Если Не ирОбщий.ЛиОписаниеТипов1ВходитВОписаниеТипов2Лкс(СтрокаНесопоставленнойКолонки.ОписаниеТипов, ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока.ОписаниеТиповПриемника) Тогда
			Продолжить;
		КонецЕсли;
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки[ИмяПредставления]);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();

КонецПроцедуры

Процедура СопоставлениеКолонокБДПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ТабличноеПолеПриИзмененииФлажкаЛкс(ЭтаФорма, Элемент, Колонка);

КонецПроцедуры

Процедура СопоставлениеКолонокБДПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Не ДанныеСтроки.ПолеПоиска И Не ДанныеСтроки.Ключевое И ДанныеСтроки.ДоступноИзменение;
	ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Не ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок;
	ОформлениеСтроки.Ячейки.КолонкаИсточника.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.КолонкаПриемника.Видимость = Ложь;
	ОписаниеТиповПриемника = ДанныеСтроки.ОписаниеТиповПриемника;
	#Если Сервер И Не Сервер Тогда
		ОписаниеТиповПриемника = Новый ОписаниеТипов;
	#КонецЕсли
	ОформлениеСтроки.Ячейки.ПолеПоиска.ОтображатьФлажок = Истина
		//И Не ДанныеСтроки.Ключевое // так по ссылке в ссылочной таблице нельзя было включить поиск
		И Не ОписаниеТиповПриемника.СодержитТип(Тип("ХранилищеЗначения"))
		//И Не (Истина
		//	И ОписаниеТиповПриемника.СодержитТип(Тип("Строка"))
		//	И ОписаниеТиповПриемника.КвалификаторыСтроки.Длина = 0)
		;
	ОформлениеСтроки.Ячейки.ПолеПоиска.ТолькоПросмотр = Не ОформлениеСтроки.Ячейки.ПолеПоиска.ОтображатьФлажок;
	Если ЗначениеЗаполнено(ДанныеСтроки.ДопРеквизит) Тогда
		ирОбщий.ОформитьСтрокуДопРеквизитаБСПЛкс(ОформлениеСтроки);
	КонецЕсли;
	ЦветТекстаНеактивности = ирОбщий.ЦветТекстаНеактивностиЛкс();
	ЦветФонаОшибки = ирОбщий.ЦветФонаОшибкиЛкс();
	ЦветФонаАктивности = ирОбщий.ЦветФонаАкцентаЛкс();
	Если ДанныеСтроки.Пометка Или ДанныеСтроки.ПолеПоиска Тогда
		Если ДанныеСтроки.ИзИсточника Тогда
			ОформлениеСтроки.Ячейки.Значение.ЦветТекста = ЦветТекстаНеактивности;
			//ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
			ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Ложь;
			//ОформлениеСтроки.Ячейки.ИмяКолонкиИсточника.ЦветФона = ЦветФонаАктивности;
			//ОформлениеСтроки.Ячейки.СинонимКолонкиИсточника.ЦветФона = ЦветФонаАктивности;
		Иначе
			ОформлениеСтроки.Ячейки.ИмяКолонкиИсточника.ЦветТекста = ЦветТекстаНеактивности;
			ОформлениеСтроки.Ячейки.СинонимКолонкиИсточника.ЦветТекста = ЦветТекстаНеактивности;
			ОформлениеСтроки.Ячейки.ОписаниеТиповИсточника.ЦветТекста = ЦветТекстаНеактивности;
			ОформлениеСтроки.Ячейки.Значение.ЦветФона = ЦветФонаАктивности;
		КонецЕсли;
	Иначе
		ОформлениеСтроки.ЦветТекста = ирОбщий.ЦветТекстаНеактивностиЛкс();
		ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Ложь;
	КонецЕсли;
	ирОбщий.ТабличноеПолеКолонокПриВыводеСтрокиЛкс(ОформлениеСтроки, ДанныеСтроки, "ОписаниеТиповИсточника");
	ирОбщий.ТабличноеПолеКолонокПриВыводеСтрокиЛкс(ОформлениеСтроки, ДанныеСтроки, "ОписаниеТиповПриемника");
	Если Истина
		И ЗначениеЗаполнено(ДанныеСтроки.ИмяКолонкиИсточника) 
		И Не ирОбщий.ЛиОписаниеТипов1ВходитВОписаниеТипов2Лкс(ДанныеСтроки.ОписаниеТиповИсточника, ДанныеСтроки.ОписаниеТиповПриемника) 
	Тогда
		ОформлениеСтроки.Ячейки.ОписаниеТиповИсточника.ЦветФона = ЦветФонаОшибки;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ИмяКолонкиИсточника) Тогда 
		ОформлениеСтроки.Ячейки.ИзИсточника.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.ИзИсточника.ОтображатьФлажок = Ложь;
		//Если ДанныеСтроки.ИзИсточника Тогда 
		//	ОформлениеСтроки.Ячейки.ИмяКолонкиИсточника.ЦветФона = ЦветФонаОшибки;
		//	ОформлениеСтроки.Ячейки.СинонимКолонкиИсточника.ЦветФона = ЦветФонаОшибки;
		//КонецЕсли; 
	КонецЕсли; 
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, , "Значение");

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийЗаполнитьИзТаблицыБД(Кнопка)
	
	Если Не ЗначениеЗаполнено(ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	Если ТаблицаЗначений.Колонки.Количество() > 1 Тогда
		Ответ = Вопрос("Очистить существующие колонки и строки?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			ОчиститьСуществующие = Ответ = КодВозвратаДиалога.Да;
		КонецЕсли;
	Иначе
		ОчиститьСуществующие = Истина;
	КонецЕсли; 
	ОбновитьКолонкиТаблицыЗначений(ОчиститьСуществующие, Истина);
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений(ОчиститьСуществующие);
	Если ОчиститьСуществующие Тогда
		СопоставлениеКолонокБДЗаполнитьПоИменамСинонимам();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийЗаполнитьИзТабличногоДокумента(Кнопка = Неопределено)
	
	Если ТаблицаЗначений.Колонки.Количество() > 2 Тогда
		Ответ = Вопрос("Очистить существующие колонки и строки таблицы значений?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			ОчиститьСуществующие = Ответ = КодВозвратаДиалога.Да;
		КонецЕсли;
	Иначе
		ОчиститьСуществующие = Истина;
	КонецЕсли; 
	ОбновитьКолонкиТаблицыЗначений(ОчиститьСуществующие, Ложь);
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений(ОчиститьСуществующие);
	Если ОчиститьСуществующие Тогда
		СопоставлениеКолонокТЗЗаполнить();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗОчистить(Кнопка)
	
	ОчиститьСопоставлениеКолонокТЗ();

КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораКолонкиТД(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СинонимКолонкиИсточника.ЭлементУправления.СписокВыбора, "Заголовок");
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораКолонкиТД(ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИмяКолонкиИсточника.ЭлементУправления.СписокВыбора, "Имя");
		
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораКолонкиТД(Знач СписокВыбора, Знач ИмяКолонкиПредставления)
	
	#Если Сервер И Не Сервер Тогда
		СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	Для Каждого СтрокаКолонки Из ПолучитьКолонкиТабличногоДокумента() Цикл
		СтрокаКолонки = СтрокаКолонки.Значение;
		Если НесопоставленныеКолонкиТД.Найти(СтрокаКолонки.Имя, "ИмяКолонки") <> Неопределено Тогда 
			Префикс = "- ";
		Иначе
			Префикс = "+ ";
		КонецЕсли; 
		СписокВыбора.Добавить(СтрокаКолонки.Имя, Префикс + СтрокаКолонки[ИмяКолонкиПредставления]);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();

КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗЗаполнитьПоСинонимам(Кнопка)
	
	Ответ = Вопрос("Хотите пересоздать колонки таблицы-приемника по колонкам источника?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаЗначений.Колонки.Очистить();
		КоманднаяПанельТаблицаЗначенийЗаполнитьИзТабличногоДокумента();
	Иначе
		СопоставлениеКолонокТЗЗаполнить();
	КонецЕсли;
	
КонецПроцедуры

// Такой странный прием позволил обойти проблему не создания колонок в таблицах значений реквизитов этой обработки при системной инициализации формы (она сломана)
Процедура СинхронизироватьРеквизитыОбъекта(ИзФормыВОбъект = Истина) Экспорт 
	
	Если ИзФормыВОбъект Тогда
		ЭтотОбъект.СопоставлениеКолонокБД = ЭтаФорма.СопоставлениеКолонокБД;
		ЭтотОбъект.СопоставлениеКолонокТЗ = ЭтаФорма.СопоставлениеКолонокТЗ;
		ЭтотОбъект.КолонкиТЗ = ЭтаФорма.КолонкиТЗ;
		ЭтотОбъект.НесопоставленныеКолонкиТД = ЭтаФорма.НесопоставленныеКолонкиТД;
		//ЭтотОбъект.ТаблицаЗначенийОтобранное = ЭтаФорма.ТаблицаЗначенийОтобранное;
		ЭтотОбъект.СобытияОбработкиОбъектов = ЭтаФорма.СобытияОбработкиОбъектов;
		ЭтотОбъект.ТаблицаБД = ЭтаФорма.ТаблицаБД;
		ЭтотОбъект.ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	Иначе
		ЭтаФорма.СопоставлениеКолонокБД = ЭтотОбъект.СопоставлениеКолонокБД;
		ЭтаФорма.СопоставлениеКолонокТЗ = ЭтотОбъект.СопоставлениеКолонокТЗ;
		ЭтаФорма.КолонкиТЗ = ЭтотОбъект.КолонкиТЗ;
		ЭтаФорма.НесопоставленныеКолонкиТД = ЭтотОбъект.НесопоставленныеКолонкиТД;
		//ЭтаФорма.ТаблицаЗначенийОтобранное = ЭтотОбъект.ТаблицаЗначенийОтобранное;
		ЭтаФорма.СобытияОбработкиОбъектов = ЭтотОбъект.СобытияОбработкиОбъектов;
		ЭтаФорма.ТаблицаБД = ЭтотОбъект.ТаблицаБД;
		ЭлементыФормы.ТабличныйДокумент.ВставитьОбласть(ЭтотОбъект.ТабличныйДокумент.Область(),,, Ложь);
	КонецЕсли; 

КонецПроцедуры

Процедура КолонкиТЗВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ЭлементыФормы.ТаблицаЗначений.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗначений.Колонки[ВыбраннаяСтрока.ИмяКолонки];
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьКолонкуТабличногоДокументаИзСтрокиКонвертации();
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьКолонкуТабличногоДокументаИзСтрокиКонвертации();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОткрытьКолонкуТабличногоДокументаИзСтрокиКонвертации()
	
	ИмяКолонкиИсточника = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные.ИмяКолонкиИсточника;
	Попытка
		НомерКолонки = Число(ИмяКолонкиИсточника);
	Исключение
		Возврат;
	КонецПопытки; 
	СтруктураПозицийТД = СтруктураПозицийТД();
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиДанных, НомерКолонки, СтруктураПозицийТД.НомерСтрокиДанных, НомерКолонки);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;

КонецПроцедуры

Процедура НесопоставленныеКолонкиТДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	НомерКолонки = Число(ЭлементыФормы.НесопоставленныеКолонкиТД.ТекущиеДанные.ИмяКолонки);
	СтруктураПозицийТД = СтруктураПозицийТД();
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиДанных, НомерКолонки, СтруктураПозицийТД.НомерСтрокиДанных, НомерКолонки);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТабличныйДокумент; // Антибаг платформы 8.3.13

КонецПроцедуры

Процедура СопоставлениеКолонокТЗВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Ложь
		Или Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИмяКолонкиПриемника
		Или Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СинонимКолонкиПриемника
	Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗначений.Колонки[ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные.ИмяКолонкиПриемника];
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	ИначеЕсли Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ПримерДанных Тогда
		ОткрытьКолонкуТабличногоДокументаИзСтрокиКонвертации();
	ИначеЕсли Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ОписаниеТипов Тогда
		Если ВыбраннаяСтрока.ДоступноеОписаниеТипов.Типы().Количество() = 1 Тогда
			СтандартнаяОбработка = Ложь;
			РедактироватьТаблицуЗначений(ВыбраннаяСтрока.ИмяКолонкиПриемника, "Приемник");
		КонецЕсли; 
	Иначе
		//ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСозданныеОбъектыКонсольОбработки(Кнопка)
	
	ирОбщий.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.ТаблицаБД,, ЭтаФорма, ПолноеИмяТаблицы);

КонецПроцедуры

Процедура ТаблицаЗначенийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	//Если Колонка = ЭлементыФормы.ТаблицаЗначений.Колонки[мИмяКолонкиНомерСтроки] Тогда
	//	ПерейтиКСтрокеТабличногоДокументаИзСтрокиТаблицыЗначений();
	//КонецЕсли; 
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийПерейтиКБД(Кнопка)
	
	Если ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Ложь
		Или ТаблицаЗначений.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено 
		Или ТаблицаБД.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено
	Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыБД = ТаблицаБД.Найти(ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока[мИмяКолонкиНомерСтроки], мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыБД <> Неопределено Тогда
		ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = СтрокаТаблицыБД;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаБД;
		// Антибаг платформы 8.3.12-8.3.14 https://partners.v8.1c.ru/forum/message/1767153
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаБД;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийПерейтиКТД(Кнопка)
	
	Если ТаблицаЗначений.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ВыбраннаяСтрока = ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерКолонкиТД = 1;
	ТекущаяКолонка = ЭлементыФормы.ТаблицаЗначений.ТекущаяКолонка;
	Если ТекущаяКолонка <> Неопределено Тогда
		ИмяКолонки = ТекущаяКолонка.Данные;
		Если ирОбщий.СтрКончаетсяНаЛкс(ИмяКолонки, мСуффиксСырыхДанных) Тогда
			ИмяКолонки = ирОбщий.СтрокаБезКонцаЛкс(ИмяКолонки, СтрДлина(мСуффиксСырыхДанных));
		КонецЕсли;
		СтрокаКолонки = СопоставлениеКолонокТЗ.Найти(ИмяКолонки, "ИмяКолонкиПриемника");
		Если СтрокаКолонки <> Неопределено Тогда
			ИмяКолонкиИсточника = СтрокаКолонки.ИмяКолонкиИсточника;
			Если ЗначениеЗаполнено(ИмяКолонкиИсточника) Тогда
				НомерКолонкиТД = Число(ИмяКолонкиИсточника);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(ВыбраннаяСтрока[мИмяКолонкиНомерСтроки], НомерКолонкиТД, ВыбраннаяСтрока[мИмяКолонкиНомерСтроки], НомерКолонкиТД);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	// Антибаг платформы 8.3.12-8.3.14 https://partners.v8.1c.ru/forum/message/1767153
	ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаПерейтиКТЗ(Кнопка)
	
	Если ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыЗначений = ТаблицаЗначенийОтобранное.Найти(ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх, мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыЗначений <> Неопределено Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = СтрокаТаблицыЗначений;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
		// Антибаг платформы 8.3.12-8.3.14 https://partners.v8.1c.ru/forum/message/1767153
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаЗначений;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаБДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ТаблицаБД.Колонки[мИмяКолонкиНомерСтроки] Тогда
		ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД();
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
	//ОткрытьЗначение(ирОбщий.КлючСтрокиТаблицыБДИзСтрокиТаблицыЗначенийЛкс(ПолноеИмяТаблицы, ВыбраннаяСтрока));
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДПерейти(Кнопка)
	
	ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД();
	
КонецПроцедуры

Процедура ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД()
	
	Если ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Ложь
		Или ТаблицаЗначенийОтобранное.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено 
		Или ТаблицаБД.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено
	Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыЗначений = ТаблицаЗначенийОтобранное.Найти(ЭлементыФормы.ТаблицаБД.ТекущаяСтрока[мИмяКолонкиНомерСтроки], мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыЗначений <> Неопределено Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = СтрокаТаблицыЗначений;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
		// Антибаг платформы 8.3.12-8.3.14 https://partners.v8.1c.ru/forum/message/1767153
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаЗначений;
	КонецЕсли;

КонецПроцедуры

Процедура СопоставлениеКолонокБДЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаКолонкиЗначенияРеквизита_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.СопоставлениеКолонокБД, ПолноеИмяТаблицы, "ИмяКолонкиПриемника",, СвязиИПараметрыВыбора, СтандартнаяОбработка);

КонецПроцедуры

Процедура СопоставлениеКолонокБДЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если СвязиИПараметрыВыбора Тогда
		ОтборВыбора = ирОбщий.ПолеВводаКолонкиЗначенияРеквизита_ОтборВыбораЛкс(ЭлементыФормы.СопоставлениеКолонокБД, ПолноеИмяТаблицы, "ИмяКолонкиПриемника");
	КонецЕсли; 
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, КлючИсторииВыбораЗначенияРеквизита(),, ОтборВыбора);
	
КонецПроцедуры

Функция КлючИсторииВыбораЗначенияРеквизита()
	
	Результат = ирОбщий.КлючИсторииВыбораЗначенияОтбораЛкс(ПолноеИмяТаблицы, ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока.ИмяКолонкиПриемника);
	Возврат Результат;

КонецФункции

Процедура СопоставлениеКолонокБДЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокБД.ТекущиеДанные;
	ТекущиеДанные.Значение = ТекущиеДанные.ОписаниеТиповПриемника.ПривестиЗначение(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СопоставлениеКолонокБДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Ложь
		Или Колонка = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.Пометка
		Или Колонка = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ПолеПоиска
	Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура СобытияОбработкиОбъектовАлгоритмНачалоВыбора(Элемент = Неопределено, СтандартнаяОбработка = Истина)
	
	#Если Сервер И Не Сервер Тогда
	    мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ТекущаяСтрока = ЭлементыФормы.СобытияОбработкиОбъектов.ТекущаяСтрока;
	мОписаниеТиповСтрокиОбъектаБД = ирОбщий.ОписаниеТиповОбъектаИлиСтрокиБДПоИменамТаблицЛкс(ПолноеИмяТаблицы, Ложь);
	мОписаниеТиповОбъектаБД = ирОбщий.ОписаниеТиповОбъектаИлиСтрокиБДПоИменамТаблицЛкс(ПолноеИмяТаблицы, Истина);
	Для Каждого СтрокаПараметра Из ТекущаяСтрока.Параметры Цикл
		Если ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "ОбъектБД") Или ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "ОбъектБДМетоды") Тогда
			СтрокаПараметра.ТипЗначения = мОписаниеТиповОбъектаБД;
			СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ТаблицаСтруктурТиповИзОписанияТипов(мОписаниеТиповОбъектаБД);
		ИначеЕсли ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "СтрокаОбъектаБД") Тогда
			СтрокаПараметра.ТипЗначения = мОписаниеТиповСтрокиОбъектаБД;
			СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ТаблицаСтруктурТиповИзОписанияТипов(мОписаниеТиповСтрокиОбъектаБД);
		ИначеЕсли ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "СтрокаТаблицыЗначений") Тогда
			КопияТЗ = ТаблицаЗначений.СкопироватьКолонки();
			СтрокаТЗ = КопияТЗ.Добавить();
			СтрокаПараметра.ТипЗначения = ирОбщий.ОписаниеТиповИзТипаЛкс(ТипЗнч(СтрокаТЗ));
			СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ТаблицаСтруктурТиповИзЗначения(СтрокаТЗ);
		//ИначеЕсли ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "СтрокаНайдена") Тогда
		//	СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ТаблицаСтруктурТиповИзОписанияТипов(СтрокаПараметра.ТипЗначения);
		//	//СтрокаПараметра.ТипЗначения = "" + СтрокаПараметра.ТипЗначения;
		//ИначеЕсли ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "Отказ") Тогда
		//	СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ТаблицаСтруктурТиповИзОписанияТипов(СтрокаПараметра.ТипЗначения);
		//	//СтрокаПараметра.ТипЗначения = "" + СтрокаПараметра.ТипЗначения;
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.СтрокаСобытияАлгоритмНачалоВыбораЛкс(ТекущаяСтрока, ВыполнятьЗагрузкуНаСервере);
	
КонецПроцедуры

Процедура СобытияОбработкиОбъектовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирОбщий.ОформитьЯчейкуАлгоритмаВТабличномПолеЛкс(ОформлениеСтроки);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПрименить(Кнопка)
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		ОсновныеДействияФормыКонвертировать();
	КонецЕсли; 
	Закрыть(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаОткрытьВОтдельномОкне(Кнопка)
	
	ирОбщий.ТабличныйДокументВосстановитьОформлениеТекущихСтрокЛкс(ЭтаФорма, ЭлементыФормы.ТабличныйДокумент);
	ирОбщий.ОткрытьРедакторИзПоляТабличногоДокументаЛкс(ТабличныйДокумент);
	
КонецПроцедуры

Процедура ТаблицаБДПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.КоманднаяПанельТаблицаБД.Кнопки.Идентификаторы);

КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаАвтоширина(Кнопка)
	
	ирОбщий.УстановитьАвтоширинуКолонокТабличногоДокументаЛкс(ЭлементыФормы.ТабличныйДокумент);
	
КонецПроцедуры

Процедура НадписьНеуникальныеНажатие(Элемент)
	
	СтрокаКлючаИсточника = "";
	КлючиНеуникальные = ВыявитьНеуникальныеКлючи(СтрокаКлючаИсточника);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	ирОбщий.ОткрытьГруппировкуТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений,, СтрокаКлючаИсточника);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДУдалитьУспешныеИзИсточника(Кнопка)
	
	Если ТаблицаБД.Колонки.Найти(мИмяКолонкиРезультатЗаписи) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	УспешныеСтрокиБД = ТаблицаБД.НайтиСтроки(Новый Структура(мИмяКолонкиРезультатЗаписи, "Успех"));
	ирОбщий.ДобавитьИндексВТаблицуЛкс(ТаблицаЗначений, мИмяКолонкиНомерСтроки);
	Для Каждого СтрокаТаблицыБД Из УспешныеСтрокиБД Цикл
		СтрокаТаблицы = ТаблицаЗначений.Найти(СтрокаТаблицыБД[мИмяКолонкиНомерСтроки], мИмяКолонкиНомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			ТаблицаЗначений.Удалить(СтрокаТаблицы);
		КонецЕсли;
		ТаблицаБД.Удалить(СтрокаТаблицыБД);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ОткрытьЗначениеЛкс(Расшифровка, , СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаРедактирование(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.ТабличныйДокумент.ТолькоПросмотр = Не Кнопка.Пометка;
		
КонецПроцедуры

Процедура НадписьОбщиеПараметрыЗаписиНажатие(Элемент)
	
	ирОбщий.ОткрытьОбщиеПараметрыЗаписиЛкс();
	
КонецПроцедуры

Процедура ОбработчикОжиданияСПараметрамиЛкс() Экспорт 
	
	ирОбщий.ОбработчикОжиданияСПараметрамиЛкс();

КонецПроцедуры

Процедура СопоставлениеКолонокТЗПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ТабличноеПолеПриИзмененииФлажкаЛкс(ЭтаФорма, Элемент, Колонка);
	
КонецПроцедуры

Процедура ТаблицаЗначенийПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ТабличноеПолеПриИзмененииФлажкаЛкс(ЭтаФорма, Элемент, Колонка);

КонецПроцедуры

Процедура СопоставлениеКолонокБДПолеПоискаПриИзменении(Элемент)
	
	ВыявитьНеуникальныеКлючи();
	НастроитьЭлементыФормы();

КонецПроцедуры

Процедура СопоставлениеКолонокТЗПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура НесопоставленныеКолонкиТДПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура НесопоставленныеКолонкиТДПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ТаблицаЗначенийПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура СопоставлениеКолонокБДПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КолонкиТЗПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КолонкиТЗПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	ирОбщий.ТабличноеПолеКолонокПриВыводеСтрокиЛкс(ОформлениеСтроки, ДанныеСтроки, "ОписаниеТипов");

КонецПроцедуры

Процедура ТаблицаБДПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийСортироватьПоВозрастанию(Кнопка)
	
	ирОбщий.ТабличноеПолеСортироватьЛкс(ЭтаФорма, ЭлементыФормы.ТаблицаЗначений, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийСортироватьПоУбыванию(Кнопка)
	
	ирОбщий.ТабличноеПолеСортироватьЛкс(ЭтаФорма, ЭлементыФормы.ТаблицаЗначений, Ложь);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийДополнениеЗапросом(Кнопка)
	
	ВыполнитьЗапросДополнения(Истина);

КонецПроцедуры

Процедура ВыполнитьЗапросДополнения(Знач Интерактивно = Ложь)
	
	Если Не ДополнятьЗапросом Тогда
		Возврат;
	КонецЕсли; 
	Если мКонсольЗапросов = Неопределено Тогда
		мКонсольЗапросов = ирОбщий.СоздатьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКонсольЗапросов").ПолучитьФорму();
		#Если Сервер И Не Сервер Тогда
			мКонсольЗапросов = Обработки.ирКонсольЗапросов.Создать();
		#КонецЕсли
	КонецЕсли;
	мКонсольЗапросов.мФормаБудетОткрыватьсяПовторно = Истина;
	ИменаСконвертированныхКолонок = ирОбщий.СтрСоединитьЛкс(СопоставлениеКолонокТЗ.Скопировать(Новый Структура("Пометка", Истина)).ВыгрузитьКолонку("ИмяКолонкиПриемника"));
	мКонсольЗапросов.мКоллекцияДляЗаполнения = ТаблицаЗначений.Скопировать(, ИменаСконвертированныхКолонок);
	мКонсольЗапросов.мКоллекцияДляЗаполнения.Добавить(); // Чтобы консоль поняла, что это дополнение, а не заполнение
	Если мДополнениеЗапросом <> Неопределено Тогда
		мКонсольЗапросов.ЗагрузитьЗапросыИзОбъекта(мДополнениеЗапросом,, Истина);
		мДополнениеЗапросом = Неопределено;
	КонецЕсли; 
	Если Интерактивно Тогда
		мКонсольЗапросов.ОткрытьМодально();
	КонецЕсли; 
	СтрокаПараметраТЗ = мКонсольЗапросов.Параметры.Найти("ТЗ", "ИмяПараметра");
	Если СтрокаПараметраТЗ = Неопределено Тогда
		ирОбщий.СообщитьЛкс("Ошибка дополнения запросом: Не найден параметр запроса с именем ""ТЗ""", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	СтрокаПараметраТЗ.Значение = мКонсольЗапросов.мКоллекцияДляЗаполнения;
	Попытка
		УспехЗапроса = мКонсольЗапросов.ВыполнитьЗапрос();
	Исключение
		УспехЗапроса = Ложь;
		ирОбщий.СообщитьЛкс(ОписаниеОшибки());
	КонецПопытки;
	Если Не УспехЗапроса Тогда
		ирОбщий.СообщитьЛкс("Ошибка дополнения запросом", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	КоллекцияИсточник = мКонсольЗапросов.ЭлементыФормы.РезультатКоллекция.Значение;
	#Если Сервер И Не Сервер Тогда
	    КоллекцияИсточник = Новый ТаблицаЗначений;
	#КонецЕсли
	Для Каждого Колонка Из КоллекцияИсточник.Колонки Цикл
		Если ТаблицаЗначений.Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		КолонкаТП = ЭлементыФормы.ТаблицаЗначений.Колонки.Добавить(Колонка.Имя);
		КолонкаТП.Данные = Колонка.Имя;
	КонецЦикла;
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений);
	ОбновитьСопоставлениеКолонокТЗ(, Ложь);
	ТаблицаЗначенийПослеДобавленияКолонок();
	Если КоллекцияИсточник.Количество() > 0 Тогда
		ТабличноеПоле = ЭлементыФормы.ТаблицаЗначений;
		СтарыйИндекс = ирОбщий.ТабличноеПолеПозицияТекущейСтрокиЛкс(ТабличноеПоле);
		ТаблицаЗначений.Очистить();
		ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(КоллекцияИсточник, ТаблицаЗначений);
		ирОбщий.ТабличноеПолеВосстановитьТекущуюСтрокуЛкс(ТабличноеПоле, СтарыйИндекс);
		ТаблицаЗначенийОтобрать();
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаЗначенийОтобрать(РежимОтладки = Ложь) 

	Попытка
		ирОбщий.ТабличноеПолеСОтборомПросмотраОтобратьЛкс(ЭтаФорма, ЭлементыФормы.ТаблицаЗначений,, РежимОтладки);
	Исключение
		ирОбщий.СообщитьЛкс(ОписаниеОшибки());
		ЭтотОбъект.ТаблицаЗначенийИспользоватьОтбор = Ложь;
		ирОбщий.ТабличноеПолеСОтборомПросмотраОтобратьЛкс(ЭтаФорма, ЭлементыФормы.ТаблицаЗначений,, РежимОтладки);
	КонецПопытки;

КонецПроцедуры

Процедура ТаблицаЗначенийПослеОтбора() Экспорт 
	
	Если ТаблицаЗначенийИспользоватьОтбор Тогда
		мСтарыйСнимокНастройкиКомпоновки = ирОбщий.ОбъектВСтрокуXMLЛкс(ТаблицаЗначенийКомпоновщик.Настройки);
	Иначе
		мСтарыйСнимокНастройкиКомпоновки = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаЗначенийПослеДобавленияКолонок()
	
	ирОбщий.ТабличноеПолеСОтборомПросмотраОбновитьКомпоновщикЛкс(ЭтаФорма, ЭлементыФормы.ТаблицаЗначений, Ложь);
	ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(ТаблицаЗначенийКомпоновщик.Настройки.Порядок, мИмяКолонкиНомерСтроки);
	ирОбщий.КомпоновщикНастроекВосстановитьЛкс(ТаблицаЗначенийКомпоновщик);
	
КонецПроцедуры

Процедура ДополнятьЗапросомПриИзменении(Элемент)
	
	ВыполнитьЗапросДополнения(Истина);
	НастроитьЭлементыФормы();
	
КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка) Экспорт 
	
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	ирОбщий.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт 
	
	ирОбщий.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

Процедура ИспользоватьОтборПриИзменении(Элемент)
	
	ТаблицаЗначенийОтобрать();
	
КонецПроцедуры

Процедура ОтбиратьСразуПриИзменении(Элемент)
	
	Если ОтбиратьСразу Тогда
		ЭтаФорма.ТаблицаЗначенийИспользоватьОтбор = Истина;
		ТаблицаЗначенийОтобрать();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриПолученииДанныхДоступныхПолей(Элемент, ОформленияСтрок)

	ирОбщий.ПриПолученииДанныхДоступныхПолейКомпоновкиЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

Процедура ОтборКомпоновкиЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.Отбор, СтандартнаяОбработка,, Истина,, "ПравоеЗначение");
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийОтборПоЗначению(Кнопка)
	
	ирОбщий.ТабличноеПолеОтборДляЗначенияВТекущейКолонкеЛкс(ЭлементыФормы.ТаблицаЗначений, Истина,,, ЭлементыФормы.Отбор, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийОтборБезЗначенияВТекущейКолонке(Кнопка)
	
	ирОбщий.ТабличноеПолеОтборДляЗначенияВТекущейКолонкеЛкс(ЭлементыФормы.ТаблицаЗначений, Ложь,,, ЭлементыФормы.Отбор, ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийИсполняемаяКомпоновка(Кнопка)
	
	ТаблицаЗначенийОтобрать(Истина);
	
КонецПроцедуры

Процедура НастроитьСлужебныеКолонкиТабличногоПоляБД()
	
	Если ЭлементыФормы.ТаблицаБД.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	КолонкаТП = ЭлементыФормы.ТаблицаБД.Колонки[мИмяКолонкиРезультатПоиска];
	КолонкаТП.ЦветТекстаПоля = WebЦвета.ТемноСиний;
	КолонкаТП.ИзменятьВидимость = Ложь;
	КолонкаТП.Видимость = Истина;
	ТаблицаБД.Колонки[КолонкаТП.Данные].Заголовок = КолонкаТП.ТекстШапки;
	
	КолонкаТП = ЭлементыФормы.ТаблицаБД.Колонки.Найти(мИмяКолонкиРезультатЗаписи);
	Если КолонкаТП <> Неопределено Тогда
		КолонкаТП.ЦветТекстаПоля = WebЦвета.ТемноСиний;
		КолонкаТП.ИзменятьВидимость = Ложь;
		КолонкаТП.Видимость = Истина;
		ТаблицаБД.Колонки[КолонкаТП.Данные].Заголовок = КолонкаТП.ТекстШапки;
	КонецЕсли; 
	
	КолонкаТП = ЭлементыФормы.ТаблицаБД.Колонки.Найти(мИмяКолонкиСообщенияОбработки);
	Если КолонкаТП <> Неопределено Тогда
		КолонкаТП.ЦветТекстаПоля = WebЦвета.ТемноСиний;
		КолонкаТП.ИзменятьВидимость = Ложь;
		КолонкаТП.Видимость = Истина;
		ТаблицаБД.Колонки[КолонкаТП.Данные].Заголовок = КолонкаТП.ТекстШапки;
	КонецЕсли; 

КонецПроцедуры

Процедура ПорядокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирОбщий.ТабличноеПолеПорядкаКомпоновкиВыборЛкс(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КоличествоПотоковОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = 1;
	
КонецПроцедуры

Процедура КоличествоОбъектовНаПотокОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = 1;
	
КонецПроцедуры

Процедура КоличествоПотоковПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

Процедура ВыполнятьКонвертациюНаСервереПриИзменении(Элемент)
	НастроитьЭлементыФормы();
КонецПроцедуры

Процедура ВыполнятьЗагрузкуНаСервереПриИзменении(Элемент)
	НастроитьЭлементыФормы();
КонецПроцедуры

Процедура СопоставлениеКолонокБДЗначениеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока.ИзИсточника = Ложь;
		ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока.Пометка = Истина;
		ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, КлючИсторииВыбораЗначенияРеквизита());
	КонецЕсли; 
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И Строка <> Неопределено
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания.Владелец().Колонки.Найти("ИмяКолонки") <> Неопределено
	Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И Строка <> Неопределено
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания.Владелец().Колонки.Найти("ИмяКолонки") <> Неопределено
	Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.ТекущаяСтрока = Строка;
		ирОбщий.ИнтерактивноЗаписатьВКолонкуТабличногоПоляЛкс(Элемент, Элемент.Колонки.ИмяКолонкиИсточника, ЗначениеПеретаскивания.ИмяКолонки,,,,, Истина);
	КонецЕсли; 

КонецПроцедуры

Процедура ТолькоВыделенныеСтрокиТДПриИзменении(Элемент)
	
	ОбновитьСопоставлениеКолонокТЗВФорме();
	
КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗОткрытьТаблицуБД(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ТипПриемника = ТекущаяСтрока.ОписаниеТипов.Типы()[0];
	Если Не ирОбщий.ЛиТипСсылкиБДЛкс(ТипПриемника) Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьФормуСпискаЛкс(ТипПриемника);
	
КонецПроцедуры

Процедура СопоставлениеКолонокБДИзИсточникаПриИзменении(Элемент)
	
	ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока.Пометка = Истина;
	
КонецПроцедуры

Процедура СобытияОбработкиОбъектовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СобытияОбработкиОбъектовАлгоритмНачалоВыбора();
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДПоказатьСтруктуруХранения(Кнопка)
	
	Форма = ирОбщий.ФормаСтруктурыХраненияТаблицыБДЛкс();
	Форма.ПараметрИмяТаблицы = ПолноеИмяТаблицы;
	Форма.Открыть();
	
КонецПроцедуры

Процедура АвтоСтруктураТЗПриИзменении(Элемент)
	
	Если Не АвтоДобавлениеКолонокТЗИзБД Или Не ЗначениеЗаполнено(ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	ОбновитьКолонкиТаблицыЗначений(Ложь, Истина);
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	СопоставлениеКолонокТЗЗаполнить(Ложь);
	СопоставлениеКолонокБДЗаполнитьПоИменамСинонимам(Ложь);
	
КонецПроцедуры

Процедура ОформитьТекущиеСтроки()
	ирОбщий.ТабличныйДокументОформитьТекущиеСтрокиЛкс(ЭтаФорма, ЭлементыФормы.ТабличныйДокумент);
КонецПроцедуры

Процедура ТабличныйДокументПриАктивизацииОбласти(Элемент)
	ПодключитьОбработчикОжидания("ОформитьТекущиеСтроки", 0.1, Истина);
КонецПроцедуры

Процедура ТаблицаЗначенийПриАктивизацииКолонки(Элемент)
	ирОбщий.ТабличноеПолеПриАктивацииКолонкиЛкс(ЭтаФорма, Элемент);
КонецПроцедуры

Процедура ТаблицаБДПриАктивизацииКолонки(Элемент)
	ирОбщий.ТабличноеПолеПриАктивацииКолонкиЛкс(ЭтаФорма, Элемент);
КонецПроцедуры

ирОбщий.ИнициироватьФормуЛкс(ЭтаФорма, "Обработка.ирЗагрузкаТабличныхДанных.Форма.Форма");
ирОбщий.ПодключитьОбработчикиСобытийДоступныхПолейКомпоновкиЛкс(ЭлементыФормы.ДоступныеПоля);
ЭлементыФормы.Отбор.Колонки.ПравоеЗначениеДляКраткогоОтображенияЭлемента.ЭлементУправления.УстановитьДействие("НачалоВыбора", Новый Действие("ОтборКомпоновкиЗначениеНачалоВыбора"));
СинхронизироватьРеквизитыОбъекта();
СобытияОбработкиОбъектов.Колонки.Добавить("Параметры");
СобытияОбработкиОбъектов.Колонки.Добавить("АлгоритмОбъект");
МассивИменСобытий = Новый Массив;
МассивИменСобытий.Добавить("АлгоритмПередОбработкойОбъекта");
МассивИменСобытий.Добавить("АлгоритмПередЗагрузкойСтроки");
МассивИменСобытий.Добавить("АлгоритмПослеЗагрузкиСтроки");
МассивИменСобытий.Добавить("АлгоритмПередЗаписьюОбъекта");
МассивИменСобытий.Добавить("АлгоритмПриЗаписиОбъекта");
Для Каждого ИмяСобытия Из МассивИменСобытий Цикл
	СтрокаСобытия = СобытияОбработкиОбъектов.Добавить();
	СтрокаСобытия.ИмяСобытия = ИмяСобытия;
	СтрокаСобытия.СинонимСобытия = Метаданные().Макеты[ИмяСобытия].Представление();
	СтрокаСобытия.Параметры = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет(ИмяСобытия),,,, Истина);
	СтрокаСобытия.Параметры.Колонки.Добавить("ТаблицаСтруктурТипов");
КонецЦикла;
мАлгоритмКонвертацииЗначенияПараметры = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет("АлгоритмКонвертацииЗначения"),,,, Истина);
мАлгоритмКонвертацииЗначенияПараметры.Колонки.Добавить("ТаблицаСтруктурТипов");
РежимРедактора = Ложь;
//
