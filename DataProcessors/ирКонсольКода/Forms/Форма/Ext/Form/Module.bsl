Перем мСписокВнешнихПараметров Экспорт;
Перем мМетоды Экспорт;
Перем КоличествоВнешнихПараметров;
Перем ТекстМодуляТекущейВнешнейОбработки;
Перем ИмяФайлаВнешнейОбработки;
Перем ВнешняяОбработка;
Перем СтартоваяСтрока;
Перем ДатаИзмененияВнешнейОбработки;
Перем РежимВнешнейОбработки Экспорт;
Перем АвтоПараметрыВыхода Экспорт;
Перем мСтруктураВосстановления;
Перем мИсторияФайлов;
Перем мАнализТехножурнала;
Перем ПолеВстроенногоЯзыка Экспорт;
Перем мРежимРедактора Экспорт;
Перем мИмяАлгоритмаДляРедактора Экспорт ;
Перем мТекущаяСтрокаДереваАлгоритмов;
Перем мАлгоритмЗагруженВКонсоль;
Перем мИмяОткрытогоФайла;
Перем мПлатформа;
Перем мСтруктураПоискаВДереве;
Перем мМаркерНачалаАлгоритма;
Перем мМаркерКонцаАлгоритма;
Перем НомерВставкиЗамера;

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
// Является обязательным.
//
// Параметры:
//  Кнопка       – КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	ирОбщий.ИнициализироватьГлобальныйКонтекстПодсказкиЛкс(ПолеВстроенногоЯзыка);
	Попытка
		Выполнить("Ядро2iS.ДобавитьГлобальныйКонтекстВКонтекстнуюПодсказку2iS(ПолеВстроенногоЯзыка)");
	Исключение
	КонецПопытки;
	Если мМетоды <> Неопределено Тогда
		Для Каждого СтрокаМетода Из мМетоды Цикл
			ПолеВстроенногоЯзыка.ДобавитьСловоЛокальногоКонтекста(СтрокаМетода.Имя, "Метод", СтрокаМетода.ТипЗначения);
		КонецЦикла;
	КонецЕсли; 
	Если ирКэш.ЛиПортативныйРежимЛкс() Тогда
		ОбщиеМодули = ирОбщий.ПолучитьСтруктуруОсновныхОбщихМодулейЛкс();
		Для Каждого КлючИЗначение Из ОбщиеМодули Цикл
			ПолеВстроенногоЯзыка.ДобавитьСловоЛокальногоКонтекста(
				КлючИЗначение.Ключ, , , КлючИЗначение.Значение, , КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	ЭтоВыполнениеКода = (Кнопка = ирОбщий.КнопкаКоманднойПанелиЭкземпляраКомпонентыЛкс(ПолеВстроенногоЯзыка, "Выполнить"));
	Для Каждого СтрокаПараметра Из Параметры Цикл
		Если Истина
			//И СтрокаПараметра.Значение <> Неопределено 
			//И СтрокаПараметра.Вход
		Тогда
			ЗначениеПараметра = СтрокаПараметра.Значение;
			Если Истина
				И Не СтрокаПараметра.Вход 
				И ЭтоВыполнениеКода
			Тогда
				ЗначениеПараметра = Неопределено; // Это нужно для избежания залипания блокирующих объектов типа ЗаписьСообщения
			КонецЕсли; 
			ТаблицаСтруктурТипов = Неопределено;
			Если ТипЗнч(мСписокВнешнихПараметров) = Тип("ТаблицаЗначений") Тогда
				СтрокаВнешнегоПараметра = мСписокВнешнихПараметров.Найти(СтрокаПараметра.Имя, "Имя");
				Если СтрокаВнешнегоПараметра <> Неопределено Тогда
					ТаблицаСтруктурТипов = СтрокаВнешнегоПараметра.ТаблицаСтруктурТипов;
				КонецЕсли; 
			КонецЕсли; 
			ПолеВстроенногоЯзыка.ДобавитьСловоЛокальногоКонтекста(
				СтрокаПараметра.Имя, , , ЗначениеПараметра, , ЗначениеПараметра, ТаблицаСтруктурТипов);
		КонецЕсли;
	КонецЦикла;
	Если Ложь
		Или Кнопка = ирОбщий.КнопкаКоманднойПанелиЭкземпляраКомпонентыЛкс(ПолеВстроенногоЯзыка, "Проверить") 
		Или ЭтоВыполнениеКода
	Тогда
		Если Не ирОбщий.ПроверитьТаблицуПараметровЛкс(Параметры) Тогда 
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	Если ЭтоВыполнениеКода Тогда
		Если Не ПолеВстроенногоЯзыка.ПроверитьПрограммныйКод() Тогда
			Возврат;
		КонецЕсли;
		Если АвтосохранениеФайлаВосстановления Тогда
			СохранитьВФайл(,, мСтруктураВосстановления.ФайлВосстановления.ПолноеИмя, Ложь);
		КонецЕсли; 
	КонецЕсли;
	РезультатНажатия = ПолеВстроенногоЯзыка.Нажатие(Кнопка);
	ЭтоПереходКОпределению = (Кнопка = ирОбщий.КнопкаКоманднойПанелиЭкземпляраКомпонентыЛкс(ПолеВстроенногоЯзыка, "ПерейтиКОпределению"));
	Если ЭтоПереходКОпределению Тогда
		СтрокаПараметра = Параметры.Найти(НРег(РезультатНажатия), "НИмя");
		Если СтрокаПараметра <> Неопределено Тогда
			ЭлементыФормы.Параметры.ТекущаяСтрока = СтрокаПараметра;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойАвтоОбновитьСправку()
	
	ПолеВстроенногоЯзыка.АвтоОбновитьСправку();
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	Если ПолеВстроенногоЯзыка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	ПолеВстроенногоЯзыка.ВнешнееСобытиеОбъекта(Источник, Событие, Данные);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ирОбщий.Форма_ПриОткрытииЛкс(ЭтаФорма);
	
	ПолеВстроенногоЯзыка = ирОбщий.СоздатьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой");
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ПолеВстроенногоЯзыка.Инициализировать(, ЭтаФорма, ЭлементыФормы.ВстроенныйЯзык, ЭлементыФормы.КоманднаяПанельВстроенныйЯзык,, "ВыполнитьЛокально", ЭтаФорма);
	
	ОбновитьДоступностьКнопкиВыполнятьНаСервере();
	ЭтаФорма.Модифицированность = Ложь;
	Если Ложь
		Или мРежимРедактора 
		Или мСписокВнешнихПараметров.Количество() > 0 
		Или ЗначениеЗаполнено(ПараметрТекст) 
	Тогда
		ДеревоАлгоритмов.Строки.Добавить();
		ДеревоАлгоритмов.Строки[0].Наименование = "Алгоритм";
		ДеревоАлгоритмов.Строки[0].ТекстАлгоритма = ПараметрТекст;
		Если ПараметрНаСервере Тогда
			ДеревоАлгоритмов.Строки[0].КонтекстВыполнения = "Сервер";
		Иначе
			ДеревоАлгоритмов.Строки[0].КонтекстВыполнения = "Клиент";
		КонецЕсли; 
		ДеревоАлгоритмов.Строки[0].Параметры = Параметры.СкопироватьКолонки();
		Если мСписокВнешнихПараметров <> Неопределено Тогда
			Если ТипЗнч(мСписокВнешнихПараметров) = Тип("СписокЗначений") Тогда
				Для Каждого ВнешнийПараметр Из мСписокВнешнихПараметров Цикл
					СтрокаПараметра = ДеревоАлгоритмов.Строки[0].Параметры.Добавить();
					СтрокаПараметра.Имя = ВнешнийПараметр.Представление;
					СтрокаПараметра.НИмя = НРег(СтрокаПараметра.Имя);
					СтрокаПараметра.Вход = Истина;
					СтрокаПараметра.Выход = Истина;
					СтрокаПараметра.Значение = ВнешнийПараметр.Значение;
					ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаПараметра);
					СтрокаПараметра.Позиция = Параметры.Количество();
				КонецЦикла;
			Иначе
				Для Каждого СтрокаВнешнегоПараметра Из мСписокВнешнихПараметров Цикл
					СтрокаПараметра = ДеревоАлгоритмов.Строки[0].Параметры.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПараметра, СтрокаВнешнегоПараметра); 
					СтрокаПараметра.НИмя = НРег(СтрокаПараметра.Имя);
					Если Не СтрокаПараметра.Фиксированный Тогда
						ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаПараметра);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли; 
		ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока = ДеревоАлгоритмов.Строки[0];
		//КонецЕсли; 
	ИначеЕсли Не МодальныйРежим Тогда
		ИмяФайлаВосстановления = ирОбщий.ПроверитьВыбратьФайлВосстановленияКонсолиЛкс(мСтруктураВосстановления);
		Если ИмяФайлаВосстановления <> "" Тогда
			мИмяОткрытогоФайла = ИмяФайлаВосстановления;
		Иначе
			// Попытаемся загрузить последний открывавшийся файл
			мИмяОткрытогоФайла = ирОбщий.ВосстановитьЗначениеЛкс("ирКонсольКода_ИмяФайла");
			Если мИмяОткрытогоФайла = НеОпределено Тогда
				мИмяОткрытогоФайла = "";
			КонецЕсли;
		КонецЕсли;
		Если ПустаяСтрока(мИмяОткрытогоФайла) Тогда
			СоздатьФайл();
		Иначе
			ЗагрузитьИзФайла();
		КонецЕсли;
		Если ИмяФайлаВосстановления <> "" Тогда
			Модифицированность = Истина;
			УдалитьФайлы(ИмяФайлаВосстановления);
		КонецЕсли; 
		//Если ИмяФайлаВосстановления <> "" Тогда
		//	ЗагрузитьИзФайла(ИмяФайлаВосстановления);
		//	Модифицированность = Истина;
		//	УдалитьФайлы(ИмяФайлаВосстановления);
		//КонецЕсли; 
	КонецЕсли; 
	Если Ложь
		// Или Параметры.Количество() = 0
		Или мСписокВнешнихПараметров = Неопределено
		Или Не МодальныйРежим
	Тогда
		Кнопки = ЭлементыФормы.ДействияФормы.Кнопки;
		Кнопки.Удалить(Кнопки.Применить);
	Иначе
		ирОбщий.УстановитьДоступностьПодменюЛкс(ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.КонтекстВыполнения, Ложь);
	КонецЕсли; 
	мИсторияФайлов = ирОбщий.ВосстановитьЗначениеЛкс("ирКонсольКода_мИсторияФайлов");
	Если мИсторияФайлов = Неопределено Тогда
		мИсторияФайлов = Новый СписокЗначений;
	КонецЕсли;
	ОбновитьПодменюИсторииФайлов();
	ИмяФайлаВнешнейОбработки = ирОбщий.ФайлВнешнейОбработкиДляОтладкиЛкс(БазовоеИмяВнешнейОбработки());
	ПроверитьВнешнююОбработку();

КонецПроцедуры

Процедура ПроверитьВнешнююОбработку()
	
	ВнешняяОбработкаОтредактирована = ЛиВнешняяОбработкаОтредактирована();
	ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.ЗагрузитьИзмененияИзВнешнейОбработки.Доступность = ВнешняяОбработкаОтредактирована;
	ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.СравнитьЗагрузитьИзмененияИзВнешнейОбработки.Доступность = ВнешняяОбработкаОтредактирована;
	Если РежимВнешнейОбработки Тогда
		ПодключитьОбработчикОжидания("ПроверитьВнешнююОбработку", 2, Истина);
	КонецЕсли; 
	
КонецПроцедуры

Функция ЛиВнешняяОбработкаОтредактирована()
	
	ВнешняяОбработкаОтредактирована = Ложь;
	Файл = Новый Файл(ИмяФайлаВнешнейОбработки);
	Если Файл.Существует() Тогда
		СлужебныйФайл = Новый Файл(ИмяСлужебногоФайла());
		Если СлужебныйФайл.Существует() Тогда
			ИнфоФайла = ирОбщий.ЗагрузитьЗначениеИзФайлаЛкс(СлужебныйФайл.ПолноеИмя);
			Если Файл.ПолучитьВремяИзменения() > ИнфоФайла.ВерсияАлгоритма Тогда
				ВнешняяОбработкаОтредактирована = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	Возврат ВнешняяОбработкаОтредактирована;

КонецФункции

Функция ИмяСлужебногоФайла()
	
	Файл1 = Новый Файл(ИмяФайлаВнешнейОбработки);
	Результат = Файл1.Путь + Файл1.ИмяБезРасширения + ".tim";
	Возврат Результат;

КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
Процедура ОбновитьЗначенияПараметровВыхода(СтруктураПараметров, РазрешитьДесериализацию = Истина)

	Для Каждого СтрокаПараметра Из Параметры Цикл
		Если СтрокаПараметра.Выход Тогда
			СтрокаПараметра.Значение = СтруктураПараметров[СтрокаПараметра.Имя];
			Если РазрешитьДесериализацию И КонтекстВыполнения <> "Клиент" И СтрокаПараметра.Значение <> Неопределено Тогда
				СтрокаПараметра.Значение = ЗначениеИзСтрокиВнутр(СтрокаПараметра.Значение);
			КонецЕсли; 
			ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаПараметра);
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТелоМетода(ТекстДляВыполнения = Неопределено, СтруктураПараметров =  Неопределено, ЛиСинтаксическийКонтроль = Ложь, РежимВнешнейОбработки = Ложь)
	
	Если ТекстДляВыполнения = Неопределено Тогда
		ТекстДляВыполнения = ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента.ПолучитьТекст();
	КонецЕсли;
	ТекстВхода = "";
	ТекстВыхода = "";
	СтартоваяСтрока = 0;
	
	// Строка инициализации параметров
	Для Каждого СтрокаПараметра Из Параметры Цикл
		Если СтруктураПараметров <> Неопределено Тогда
			СтруктураПараметров.Вставить(СтрокаПараметра.Имя);
		КонецЕсли; 
		Если Не СтрокаПараметра.Вход Тогда
			Попытка
				ирОбщий.ВычислитьВыражение(СтрокаПараметра.Имя);
				Продолжить; // Это системное слово
			Исключение
			КонецПопытки; 
		КонецЕсли; 
		// Это условие отрезается параметры выхода полученные из определения типа в комментариях, но без этого условия признак Вход при заполнении параметров не будет устанавливаться у существующих параметров
		Если СтрокаПараметра.Вход Тогда 
			ВыражениеЧтенияЗначения = "_АлгоритмОбъект." + СтрокаПараметра.Имя;
			Если КонтекстВыполнения <> "Клиент" Тогда
				ВыражениеЧтенияЗначения = "ЗначениеИзСтрокиВнутр(" + ВыражениеЧтенияЗначения + ")";
			КонецЕсли; 
			ТекстВхода = ТекстВхода + СтрокаПараметра.Имя + " = " + ВыражениеЧтенияЗначения + ";";
			//Если РежимВнешнейОбработки Тогда
			//	ТекстВхода = ТекстВхода + Символы.ПС;
			//	СтартоваяСтрока = СтартоваяСтрока + 1;
			//КонецЕсли;
		КонецЕсли; 
		Если СтрокаПараметра.Вход Тогда
			Если СтруктураПараметров <> Неопределено Тогда
				ПередаваемоеЗначение = СтрокаПараметра.Значение;
				Если КонтекстВыполнения <> "Клиент" Тогда
					ПередаваемоеЗначение = ЗначениеВСтрокуВнутр(ПередаваемоеЗначение);
				КонецЕсли; 
				СтруктураПараметров[СтрокаПараметра.Имя] = ПередаваемоеЗначение;
			КонецЕсли; 
		КонецЕсли; 
		Если Не ЛиСинтаксическийКонтроль Тогда
			Если СтрокаПараметра.Выход Тогда
				Если РежимВнешнейОбработки Тогда
					ТекстВыхода = ТекстВыхода + Символы.ПС;
				КонецЕсли; 
				ТекстВыхода = ТекстВыхода + "_АлгоритмОбъект." + СтрокаПараметра.Имя + " = " + СтрокаПараметра.Имя + ";" ;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Если КонтекстВыполнения <> "Клиент" Тогда
		// Антибаг 8.3.13 Мутабельные значения в структуре во временном хранилище превращаются в копии других значений https://partners.v8.1c.ru/forum/t/1768348/m/1768348
		Для Каждого СтрокаПараметра Из Параметры Цикл
			Если СтрокаПараметра.Выход Тогда
				// Здесь нельзя в динамический код вставлять обращения к общим модулям ИР, т.к. выполняться в портативном варианте это будет на сервере
				Если Не ирКэш.ЛиПортативныйРежимЛкс() Тогда
					ТекстВыхода = ТекстВыхода + "
						|	_ЦиклическиеСсылки = ирОбщий.ПроверитьЦиклическиеСсылкиВстроенногоЯзыкаЛкс(_АлгоритмОбъект." + СтрокаПараметра.Имя + ");
						|	Если _ЦиклическиеСсылки.Количество() > 0 Тогда
						|		_АлгоритмОбъект." + СтрокаПараметра.Имя + " = Неопределено;
						|		ирОбщий.СообщитьЛкс(""Параметр " + СтрокаПараметра.Имя + " на выходе содержал циклические ссылки (""  + _ЦиклическиеСсылки[0].ЭлементыЦиклическихСсылок[0] + "") и был очищен"");
						|	Иначе";
				КонецЕсли; 
				ТекстВыхода = ТекстВыхода + "
				|		Если _АлгоритмОбъект." + СтрокаПараметра.Имя + " <> Неопределено И ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(_АлгоритмОбъект." + СтрокаПараметра.Имя + ")) = Неопределено Тогда
				|			_АлгоритмОбъект." + СтрокаПараметра.Имя + " = Неопределено;
				|			ирОбщий.СообщитьЛкс(""Параметр " + СтрокаПараметра.Имя + " на выходе имел мутабельное значение ("" + ТипЗнч(" + СтрокаПараметра.Имя + ") + "") и был очищен"");
				|		Иначе
				|			_АлгоритмОбъект." + СтрокаПараметра.Имя + " = ЗначениеВСтрокуВнутр(_АлгоритмОбъект." + СтрокаПараметра.Имя + ");
				|		КонецЕсли;";
				Если Не ирКэш.ЛиПортативныйРежимЛкс() Тогда
					ТекстВыхода = ТекстВыхода + "
						|	КонецЕсли;";
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	Если РежимВнешнейОбработки Тогда
		ТекстВхода = ТекстВхода + Символы.ПС;
		СтартоваяСтрока = СтартоваяСтрока + 1;
	КонецЕсли; 
	
	// Для обновления значений выходных параметров в случае ошибки выполнения добавляем попытку
	ТелоМетода = "";
	ТелоМетода = ТелоМетода + ТекстВхода;
	ТелоМетода = ТелоМетода + "Попытка ";
	Если РежимВнешнейОбработки Тогда
		ТелоМетода = ТелоМетода + Символы.ПС;
		СтартоваяСтрока = СтартоваяСтрока + 1;
		ТелоМетода = ТелоМетода + мМаркерНачалаАлгоритма + Символы.ПС;
		СтартоваяСтрока = СтартоваяСтрока + 1;
	ИначеЕсли Не ЛиСинтаксическийКонтроль Тогда
		// Перевод строки нужен на случай наличия в первой строке инструкции препроцессора
		ТелоМетода = ТелоМетода + Символы.ПС;
		СтартоваяСтрока = СтартоваяСтрока + 1;
	КонецЕсли; 
	ТелоМетода = ТелоМетода + ТекстДляВыполнения;
	Если РежимВнешнейОбработки Тогда
		ТелоМетода = ТелоМетода + Символы.ПС + мМаркерКонцаАлгоритма;
	КонецЕсли;
	ТелоМетода = ТелоМетода + "
	|Исключение " + ТекстВыхода + "
	|	ХранилищеОбщихНастроек.Сохранить(""" + ирКэш.ИмяПродукта() + """, ""КонсольКода_ЗначенияПараметровИсключения"", ЗначениеВСтрокуВнутр(_АлгоритмОбъект));
	|	ВызватьИсключение;
	|КонецПопытки; 
	|~Конец:" + ТекстВыхода;
	Возврат ТелоМетода;
	
КонецФункции

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
// Не является обязательной.
//
// Параметры:
//  ТекстДляВыполнения – Строка;
//  *ЛиСинтаксическийКонтроль - Булево, *Ложь - признак вызова только для синтаксического контроля.
//
Функция ВыполнитьЛокально(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт
	
	Если Истина
		И Не ЛиСинтаксическийКонтроль
		И АвтоПараметрыВыхода 
	Тогда
		ЗаполнитьПараметры(Ложь, Истина);
	КонецЕсли; 
	СтруктураПараметров = Новый Структура;
	ВерсияАлгоритма = Неопределено;
	Если Истина
		И Не ЛиСинтаксическийКонтроль
		И РежимВнешнейОбработки 
	Тогда
		Если Не ОбновитьФайлВнешнейОбработкиИнтерактивно(СтруктураПараметров, ВерсияАлгоритма) Тогда 
			Возврат Неопределено;
		КонецЕсли; 
	Иначе
		ТекстДляВыполнения = ПолучитьТелоМетода(ТекстДляВыполнения, СтруктураПараметров, ЛиСинтаксическийКонтроль);
	КонецЕсли;
	Если Не ЛиСинтаксическийКонтроль Тогда
		ОбновитьЗначенияПараметровВыхода(СтруктураПараметров, Ложь);
	КонецЕсли; 
	// Перенес в раздел инициализации модуля. Антибаг платформы 8.3.5
	//мАнализТехножурнала = ирОбщий.СоздатьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирАнализТехножурнала");
	#Если Сервер И Не Сервер Тогда
		мАнализТехножурнала = Обработки.ирАнализТехножурнала.Создать();
	#КонецЕсли
	Если Не ЛиСинтаксическийКонтроль Тогда
		мАнализТехножурнала.НачатьТрассу("КонсольКода");
	КонецЕсли;
	ВремяНачала = Неопределено;
	ЧерезФоновоеЗадание = КонтекстВыполнения = "Фоновый";
	Если Не ЛиСинтаксическийКонтроль И ЧерезФоновоеЗадание Тогда
		ФормаРезультата = ирОбщий.НоваяФормаРезультатаФоновогоЗаданияЛкс();
		АдресПараметровВыхода = ПоместитьВоВременноеХранилище(Null, ФормаРезультата.УникальныйИдентификатор);
		ПараметрыЗапуска = Новый Массив;
		ПараметрыЗапуска.Добавить(ТекстДляВыполнения);
		ПараметрыЗапуска.Добавить(СтруктураПараметров);
		ПараметрыЗапуска.Добавить(Ложь);
		ПараметрыЗапуска.Добавить(РежимВнешнейОбработки);
		ПараметрыЗапуска.Добавить(ИмяФайлаВнешнейОбработки);
		ПараметрыЗапуска.Добавить(Ложь);
		ПараметрыЗапуска.Добавить();
		ПараметрыЗапуска.Добавить(АдресПараметровВыхода);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ирОбщий.ВыполнитьАлгоритмВКонтекстеЛкс", ПараметрыЗапуска, Новый УникальныйИдентификатор, "Алгоритм консоли кода (ИР)");
		ирОбщий.ОжидатьЗавершенияФоновойОперацииЛкс(ФоновоеЗадание, ЭтаФорма);
		Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ИнформацияОбОшибке = ФоновоеЗадание.ИнформацияОбОшибке;
			ОбработатьИсключениеАлгоритма(ВремяНачала, ИнформацияОбОшибке, ЛиСинтаксическийКонтроль, СтруктураПараметров);
			Возврат Неопределено;
		КонецЕсли; 
		СтруктураПараметров = ирОбщий.ПрочитатьРезультатФоновогоЗаданияЛкс(АдресПараметровВыхода, ФормаРезультата);
		Если СтруктураПараметров <> Неопределено Тогда
			ВремяНачала = СтруктураПараметров.Служебный_ВремяНачала;
		КонецЕсли; 
	Иначе
		Попытка
			ирОбщий.ВыполнитьАлгоритмВКонтекстеЛкс(ТекстДляВыполнения, СтруктураПараметров, КонтекстВыполнения = "Сервер" Или КонтекстВыполнения = "Фоновый", РежимВнешнейОбработки,
				ИмяФайлаВнешнейОбработки, ЛиСинтаксическийКонтроль, ВремяНачала,, ВерсияАлгоритма);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОбработатьИсключениеАлгоритма(ВремяНачала, ИнформацияОбОшибке, ЛиСинтаксическийКонтроль, СтруктураПараметров);
			Если Истина
				И Не ЛиСинтаксическийКонтроль
				И РежимВнешнейОбработки 
			Тогда
			Иначе
				Если ЛиСинтаксическийКонтроль Тогда
					ВызватьИсключение;
				КонецЕсли;
			КонецЕсли;
			Возврат Неопределено;
		КонецПопытки; 
	КонецЕсли; 
	Если Не ЛиСинтаксическийКонтроль Тогда
		//Если ЛиЗамерВремени Тогда
		Если ВремяНачала <> Неопределено Тогда
			ВремяКонца = ирОбщий.ТекущееВремяВМиллисекундахЛкс();
			ДлительностьВыполнения = ВремяКонца - ВремяНачала;
		КонецЕсли; 
		мТекущаяСтрокаДереваАлгоритмов.Длительность = ДлительностьВыполнения;
		мТекущаяСтрокаДереваАлгоритмов.ДатаВыполнения = ТекущаяДата();
		//ирОбщий.СообщитьЛкс("Длительность выполнения - " + Строка(ДлительностьВыполнения) + " мс");
		//КонецЕсли;
		мАнализТехножурнала.КончитьТрассу();
		ОбновитьЗначенияПараметровВыхода(СтруктураПараметров, Истина);
	КонецЕсли;
	
КонецФункции

Процедура ОбработатьИсключениеАлгоритма(Знач ВремяНачала, ИнформацияОбОшибке, Знач ЛиСинтаксическийКонтроль, Знач СтруктураПараметров)
	
	Если Не ЛиСинтаксическийКонтроль Тогда
		Если КонтекстВыполнения <> "Клиент" Тогда
			СтруктураПараметров = ХранилищеОбщихНастроек.Загрузить(ирКэш.ИмяПродукта(), "КонсольКода_ЗначенияПараметровИсключения");
			Если СтруктураПараметров <> Неопределено Тогда
				СтруктураПараметров = ЗначениеИзСтрокиВнутр(СтруктураПараметров);
			КонецЕсли; 
		КонецЕсли; 
		ХранилищеОбщихНастроек.Удалить(ирКэш.ИмяПродукта(), "КонсольКода_ЗначенияПараметровИсключения", ИмяПользователя());
		//Если ЛиЗамерВремени Тогда
		ВремяКонца = ирОбщий.ТекущееВремяВМиллисекундахЛкс();
		Если ВремяНачала <> Неопределено Тогда
			ирОбщий.СообщитьЛкс("Длительность выполнения - " + Строка(ВремяКонца - ВремяНачала) + " мс");
		КонецЕсли; 
		//КонецЕсли;
		мАнализТехножурнала.КончитьТрассу();
		Если СтруктураПараметров <> Неопределено Тогда
			ОбновитьЗначенияПараметровВыхода(СтруктураПараметров);
		КонецЕсли; 
	КонецЕсли;
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		НрегОписание = НРег(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке.Причина));
		Маркер = "мутабельного значения";
		ПозицияМаркера = Найти(НрегОписание, НРег(Маркер));
		Если Истина
			И ПозицияМаркера > 0
			И Найти(НрегОписание, НРег("параметра метода ВыполнитьАлгоритм")) > 0
		Тогда
			Ошибка = Лев(ИнформацияОбОшибке.Причина.Описание, ПозицияМаркера - 1) + Маркер;
			ВызватьИсключение Ошибка;
		КонецЕсли;
	КонецЕсли; 
	Если Не ЛиСинтаксическийКонтроль Тогда 
		Если РежимВнешнейОбработки Тогда 
			ИмяМодуля = ПолучитьИмяМодуляВнешнейОбработки();
		Иначе
			ИмяМодуля = Неопределено;
		КонецЕсли;
		ирОбщий.ПоказатьОшибкуВЗапросеИлиПрограммномКодеЛкс(ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента, -СтартоваяСтрока,,, МодальныйРежим,
			ИнформацияОбОшибке, ИмяМодуля); 
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьИмяМодуляВнешнейОбработки()

	ИмяМодуля = "ВнешняяОбработка." + ИмяВнешнейОбработки() + ".МодульОбъекта";
	Возврат ИмяМодуля;

КонецФункции

Функция ИмяВнешнейОбработки()
	
	ИмяОбработки = БазовоеИмяВнешнейОбработки();
	Возврат ИмяОбработки;

КонецФункции

Функция БазовоеИмяВнешнейОбработки()
	
	Возврат "DynamicExternalProcessorOfCodeConsole";

КонецФункции

Процедура ПриЗакрытии()
	
	ирОбщий.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	ирОбщий.УдалитьФайлВосстановленияКонсолиСБлокировкойЛкс(мСтруктураВосстановления);
	
	// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	// Уничтожение всех экземпляров компоненты. Обязательный блок.
	#Если Сервер И Не Сервер Тогда
		ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	ПолеВстроенногоЯзыка.Уничтожить();
	// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	
КонецПроцедуры

Процедура ПараметрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, , "ПредставлениеЗначения", Новый Структура("ПредставлениеЗначения", "Значение"));
	Ячейки = ОформлениеСтроки.Ячейки;
	Если ДанныеСтроки.Фиксированный Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет(245, 250, 250);
		Для Каждого Ячейка Из Ячейки Цикл
			Ячейка.ТолькоПросмотр = Истина;
		КонецЦикла;
	Иначе
		Ячейки.Вход.ТолькоПросмотр = ДанныеСтроки.Позиция > 0;
		Ячейки.ПредставлениеЗначения.ТолькоПросмотр = Не ДанныеСтроки.Вход;
	КонецЕсли; 
	//ирОбщий.ОформитьЯчейкуСРасширеннымЗначениемЛкс(ОформлениеСтроки.Ячейки.ПредставлениеЗначения, ДанныеСтроки.Значение, Элемент.Колонки.ПредставлениеЗначения);
	//ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Фактический обработчик ПриИзменени
Процедура ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаТаблицы = Неопределено)
	
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ЭлементыФормы.Параметры.ТекущиеДанные;
	КонецЕсли; 
	СтрокаТаблицы.ПредставлениеЗначения = СтрокаТаблицы.Значение;
	ирОбщий.ОбновитьТипЗначенияВСтрокеТаблицыЛкс(СтрокаТаблицы);
	
КонецПроцедуры

Процедура ПараметрыПредставлениеЗначениеПриИзменении(Элемент)
	
	ТабличноеПоле = ЭтаФорма.ЭлементыФормы.Параметры;
	ТабличноеПоле.ТекущиеДанные.Значение = Элемент.Значение;
	ОбновитьПредставлениеИТипЗначенияВСтроке();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПрименить(Кнопка)
	
	Если Не ПолеВстроенногоЯзыка.ПроверитьПрограммныйКод() Тогда
		Ответ = Вопрос("При проверке кода обнаружены ошибки. Все равно применить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Ложь;
	Если ТипЗнч(мСписокВнешнихПараметров) = Тип("ТаблицаЗначений") Тогда
		РезультатФормы = Новый Структура();
		РезультатФормы.Вставить("Текст", ЭлементыФормы.ВстроенныйЯзык.ПолучитьТекст());
		РезультатФормы.Вставить("Параметры", Параметры.Скопировать(, "Имя, Значение, Вход, Выход, Фиксированный"));
	Иначе
		ВозвращаемыеПараметры = Новый Структура;
		Для Счетчик = 1 По мСписокВнешнихПараметров.Количество() Цикл
			ВнешнийПараметр = мСписокВнешнихПараметров[Счетчик - 1];
			ИмяПараметра = ВнешнийПараметр.Представление;
			СтрокаПараметра = Параметры.Найти(Счетчик, "Позиция");
			Если СтрокаПараметра <> Неопределено Тогда
				ВнешнийПараметр.Значение = СтрокаПараметра.Значение;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
		 
	Закрыть(мСписокВнешнихПараметров);
	
КонецПроцедуры

Процедура ПараметрыПередУдалением(Элемент, Отказ)
	
	Отказ = (Элемент.ТекущиеДанные.Позиция > 0 Или Элемент.ТекущиеДанные.Фиксированный);
	
КонецПроцедуры

Процедура ПараметрыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Истина
		И Колонка.Имя = "ПредставлениеЗначения" 
		//И Не ВыбраннаяСтрока.Вход
	Тогда
		Если ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка, ВыбраннаяСтрока.Значение) Тогда 
			ОбновитьПредставлениеИТипЗначенияВСтроке();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Имя) Тогда
		Элемент.ТекущиеДанные.Имя = "в" + (Элемент.Значение.Индекс(Элемент.ТекущиеДанные) + 1);
		Элемент.ТекущиеДанные.НИмя = НРег(Элемент.ТекущиеДанные.Имя);
	КонецЕсли;
	Если НоваяСтрока Тогда
		Если Копирование Тогда
			Элемент.ТекущиеДанные.Имя = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(Элемент.ТекущиеДанные.Владелец(), Элемент.ТекущиеДанные);
		Иначе
			Элемент.ТекущиеДанные.Вход = Истина;
			Элемент.ТекущиеДанные.Значение = "";
			ОбновитьПредставлениеИТипЗначенияВСтроке();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	// Пришлось пожертвовать этой возможностью ради перетаскивания параметров между алгоритмами
	//ПараметрыПеретаскивания.Значение = Элемент.ТекущаяСтрока.Имя;
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкСсылкаНаОбъектБД(Кнопка)

	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	СтрокаПараметра = ПолеВстроенногоЯзыка.ВставитьСсылкуНаОбъектБД(ЭлементыФормы.Параметры,,,, Истина,,, ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ВстроенныйЯзык);
	Если СтрокаПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//СтрокаПараметра.НИмя = НРег(СтрокаПараметра.Имя);
	СтрокаПараметра.Вход = Истина;
	СтрокаПараметра.Выход = Ложь;
	ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаПараметра);

КонецПроцедуры

Процедура КоманднаяПанельПараметрыИсследоватьТаблицуПараметров(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.Параметры.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ирОбщий.ИсследоватьЛкс(ТекущаяСтрока.Значение,,,, ТекущаяСтрока.Имя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ТабличноеПолеПриИзмененииФлажкаЛкс(Элемент, Колонка);
	
КонецПроцедуры

Процедура ОбработатьИзменениеПометокПараметров()
	
	Если Истина
		И ЭлементыФормы.Параметры.ТекущиеДанные.Вход = Ложь
		И ЭлементыФормы.Параметры.ТекущиеДанные.Выход = Ложь 
	Тогда
		Если ЭлементыФормы.Параметры.ТекущаяКолонка.Имя = "Вход" Тогда
			ирОбщий.ИнтерактивноЗаписатьВКолонкуФлажкаЛкс(ЭлементыФормы.Параметры, ЭлементыФормы.Параметры.Колонки.Выход, Истина);
		ИначеЕсли ЭлементыФормы.Параметры.ТекущаяКолонка.Имя = "Выход" Тогда
			ирОбщий.ИнтерактивноЗаписатьВКолонкуФлажкаЛкс(ЭлементыФормы.Параметры, ЭлементыФормы.Параметры.Колонки.Вход, Истина);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура ПараметрыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("СтрокаТаблицыЗначений") Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		СтандартнаяОбработка = Ложь
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Строка") Тогда
		ЭлементыФормы.Параметры.ДобавитьСтроку();
		СтрокаПараметра = ЭлементыФормы.Параметры.ТекущиеДанные;
		СтрокаПараметра.Имя = ПараметрыПеретаскивания.Значение;
		СтрокаПараметра.НИмя = НРег(СтрокаПараметра.Имя);
		СтрокаПараметра.Значение = "";
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметры(ПараметрыВхода = Истина, ПараметрыВыхода = Истина)

	#Если Сервер И Не Сервер Тогда
		ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	МетаОбщиеМодули = Метаданные.ОбщиеМодули;
	ПолеВстроенногоЯзыка.ОчиститьТаблицуСловЛокальногоКонтекста();
	Если ПараметрыВхода Тогда
		Пока Истина Цикл
			ИнформацияОбОшибке = ПолеВстроенногоЯзыка.ПолучитьИнформациюОбОшибке();
			НеопределеннаяПеременная = мПлатформа.ИмяНеопределеннойПеременнойИзИнформацииОбОшибке(ИнформацияОбОшибке);
			Если Не ЗначениеЗаполнено(НеопределеннаяПеременная) Тогда
				ПолеВстроенногоЯзыка.ПроверитьПрограммныйКод(Ложь);
				Прервать;
			КонецЕсли;
			Если КонтекстВыполнения <> "Клиент" И МетаОбщиеМодули.Найти(НеопределеннаяПеременная) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаПараметра = Параметры.Найти(НРег(НеопределеннаяПеременная), "НИмя");
			Если СтрокаПараметра = Неопределено Тогда
				СтрокаПараметра = Параметры.Добавить();
				СтрокаПараметра.Имя = НеопределеннаяПеременная;
				СтрокаПараметра.НИмя = НРег(СтрокаПараметра.Имя);
				//СтрокаПараметра.Значение = ""; // Вредно, т.к. значения по умолчанию часто нужны именно Неопределено
				ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаПараметра);
				ЭтаФорма.Модифицированность = Истина;
			КонецЕсли; 
			ирОбщий.ПрисвоитьЕслиНеРавноЛкс(СтрокаПараметра.Вход, Истина, ЭтаФорма.Модифицированность);
		КонецЦикла;
	КонецЕсли;
	Если ПараметрыВыхода Тогда
		РекомендуемыеПараметрыВыхода = Новый Массив;
		ПолеВстроенногоЯзыка.ЗаполнитьЛокальныеСвойстваИМетодыПоТексту(,,,, Истина);
		СтрокиЛокальныхПеременных = ПолеВстроенногоЯзыка.ТаблицаСлов.НайтиСтроки(Новый Структура("ТипСлова, Определение", "Свойство", "Статистический"));
		Для Каждого СтрокаПеременной Из СтрокиЛокальныхПеременных Цикл
			Если КонтекстВыполнения <> "Клиент" И МетаОбщиеМодули.Найти(СтрокаПеременной.НСлово) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаПараметра = Параметры.Найти(СтрокаПеременной.НСлово, "НИмя");
			Если СтрокаПараметра = Неопределено Тогда
				СтрокаПараметра = Параметры.Добавить();
				СтрокаПараметра.Имя = СтрокаПеременной.Слово;
				СтрокаПараметра.НИмя = НРег(СтрокаПараметра.Имя);
				ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаПараметра);
			КонецЕсли; 
			СтрокаПараметра.Выход = Истина;
			//ЭтаФорма.Модифицированность = Истина;
			РекомендуемыеПараметрыВыхода.Добавить(СтрокаПараметра.Имя);
		КонецЦикла;
		СтрокиПараметровТолькоВыхода = Параметры.НайтиСтроки(Новый Структура("Вход, Выход, Фиксированный", Ложь, Истина, Ложь));
		Для Каждого СтрокаПараметра Из СтрокиПараметровТолькоВыхода Цикл
			Если РекомендуемыеПараметрыВыхода.Найти(СтрокаПараметра.Имя) = Неопределено Тогда
				Параметры.Удалить(СтрокаПараметра);
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	Параметры.Сортировать("Фиксированный Убыв, Позиция, Вход Убыв, НИмя");

КонецПроцедуры // ЗаполнитьПараметры()

Процедура КоманднаяПанельПараметрыЗаполнить(Кнопка)
	
	ЗаполнитьПараметры();
			
КонецПроцедуры

Процедура ПараметрыИмяПриИзменении(Элемент)
	
	Если Не ирОбщий.ЛиИмяПеременнойЛкс(Элемент.Значение) Тогда
		Элемент.Значение = мПлатформа.ИдентификаторИзПредставленияЛкс(Элемент.Значение);
	КонецЕсли; 
	ЭлементыФормы.Параметры.ТекущиеДанные.НИмя = Нрег(Элемент.Значение);
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыАвтоПараметрыВыхода(Кнопка)
	
	АвтоПараметрыВыхода = Не Кнопка.Пометка;
	Кнопка.Пометка = АвтоПараметрыВыхода;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыОчистить(Кнопка)
	
	ТолькоВыход = Ложь;
	Если Параметры.Найти(Истина, "Вход") <> Неопределено Тогда
		Ответ = Вопрос("Хотите удалить только параметры только выхода? Иначе будут удалены все.", РежимДиалогаВопрос.ДаНет);
		ТолькоВыход = Ответ = КодВозвратаДиалога.Да;
	КонецЕсли; 
	НачальноеКоличество = Параметры.Количество(); 
	Для СчетчикПараметры = 1 По НачальноеКоличество Цикл
		СтрокаПараметра = Параметры[НачальноеКоличество - СчетчикПараметры];
		Если Истина
			И СтрокаПараметра.Позиция = 0 
			И Не СтрокаПараметра.Фиксированный 
			И (Ложь
				Или Не ТолькоВыход
				Или СтрокаПараметра.Выход И Не СтрокаПараметра.Вход)
		Тогда
			Параметры.Удалить(СтрокаПараметра);
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПараметрыПредставлениеЗначенияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.Параметры.ТекущаяСтрока.Значение);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСохранить(Кнопка)
	
	РезультатВыбора = ирОбщий.ВыбратьСсылкуЛкс(Метаданные.Справочники.ирАлгоритмы, ТекущийАлгоритм, Ложь);
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		//Если Не ЗначениеЗаполнено(ТекущийАлгоритм) Тогда
			ТекущийАлгоритм = РезультатВыбора;
		//КонецЕсли; 
		//АлгоритмОбъект = РезультатВыбора.ПолучитьОбъект();
		АлгоритмОбъект = РезультатВыбора;
	Иначе
		АлгоритмОбъект = Справочники.ирАлгоритмы.СоздатьЭлемент();
		ТекущийАлгоритм = ирОбщий.ПолучитьТочнуюСсылкуОбъектаЛкс(АлгоритмОбъект);
	КонецЕсли; 
	ФормаАлгоритма = АлгоритмОбъект.ПолучитьФорму(, ЭтаФорма);
	АлгоритмОбъект = ФормаАлгоритма.ЭтотОбъект;
	#Если Сервер И Не Сервер Тогда
	    АлгоритмОбъект = Справочники.ирАлгоритмы.СоздатьЭлемент();
	#КонецЕсли
	ФормаАлгоритма.ТекстАлгоритма = ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента.ПолучитьТекст();
	//СтрокиПараметровКонсоли = Параметры.НайтиСтроки(Новый Структура("Вход", Истина));
	СтрокиПараметровКонсоли = Параметры;
	Для Каждого СтрокаПараметраКонсоли Из СтрокиПараметровКонсоли Цикл
		СтрокаПараметраАлгоритма = АлгоритмОбъект.Параметры.Найти(СтрокаПараметраКонсоли.Имя, "Имя");
		Если СтрокаПараметраАлгоритма = Неопределено Тогда
			СтрокаПараметраАлгоритма = АлгоритмОбъект.Параметры.Добавить();
			СтрокаПараметраАлгоритма.Имя = СтрокаПараметраКонсоли.Имя;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(СтрокаПараметраАлгоритма, СтрокаПараметраКонсоли);
		Попытка
			СтрокаПараметраАлгоритма.ЗначениеХранилище = Новый ХранилищеЗначения(СтрокаПараметраКонсоли.Значение);
		Исключение
			ирОбщий.СообщитьЛкс("Значение параметра """ + СтрокаПараметраКонсоли.Имя + """ типа """ + ТипЗнч(СтрокаПараметраКонсоли.Значение) 
				+ """ не сохранено, т.к. имеет несериализуемый тип", СтатусСообщения.Внимание);
		КонецПопытки; 
	КонецЦикла;
	ФормаАлгоритма.СправочникОбъект = ФормаАлгоритма.СправочникОбъект;
	ФормаАлгоритма.Открыть();
	ФормаАлгоритма.Модифицированность = Истина;
	ФормаАлгоритма.Записать();
	//ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

Функция ОбновитьФайлВнешнейОбработкиИнтерактивно(СтруктураПараметров = Неопределено, выхВерсияАлгоритма = Неопределено) Экспорт

	Если ЛиВнешняяОбработкаОтредактирована() Тогда
		//ирОбщий.СообщитьЛкс("Отладочная внешняя обработка содержит незавершенные изменения");
		СтараяСтрокаАлгоритма = мТекущаяСтрокаДереваАлгоритмов;
		Если Не СравнитьЗагрузитьИзмененияИзВнешнейОбработки(Истина) Тогда 
			Возврат Ложь;
		КонецЕсли; 
		Если СтараяСтрокаАлгоритма <> мТекущаяСтрокаДереваАлгоритмов Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	ОбновитьФайлВнешнейОбработки(СтруктураПараметров);
	выхВерсияАлгоритма = ДатаИзмененияВнешнейОбработки;
	Возврат Истина;

КонецФункции

Процедура ОбновитьФайлВнешнейОбработки(Знач СтруктураПараметров = Неопределено)
	
	ОбщиеМодули = ирОбщий.ПолучитьСтруктуруОсновныхОбщихМодулейЛкс();
	ТекстМодуля = "Процедура мМетод(_АлгоритмОбъект, _ОбщиеМодули) Экспорт
	|Перем ЭтотОбъект; ";
	Если ирКэш.ЛиПортативныйРежимЛкс() Тогда
		Для Каждого КлючИЗначение Из ОбщиеМодули Цикл
			ТекстМодуля = ТекстМодуля + КлючИЗначение.Ключ + " = _ОбщиеМодули." + КлючИЗначение.Ключ + "; "
		КонецЦикла;
	КонецЕсли; 
	ТекстМодуля = ТекстМодуля + "
	|" + ПолучитьТелоМетода(, СтруктураПараметров,, Истина) + "
	|КонецПроцедуры
	|";
	ТекстМодуляВКонсолиНеМенялся = ТекстМодуляТекущейВнешнейОбработки = ТекстМодуля; 
	ТекстМодуляТекущейВнешнейОбработки = ТекстМодуля;
	НоваяДатаИзмененияВнешнейОбработки = ТекущаяДата();
	ТекстМодуля = ТекстМодуля + "
	|Функция ВерсияАлгоритма() Экспорт
	|	Возврат Дата(""" + НоваяДатаИзмененияВнешнейОбработки + """);
	|КонецФункции
	|";
	СтартоваяСтрока = СтартоваяСтрока + 2;
	Если Не ирОбщий.ОбновитьМодульВнешнейОбработкиДляОтладкиЛкс(БазовоеИмяВнешнейОбработки(), ИмяВнешнейОбработки(), ТекстМодуля, ТекстМодуляВКонсолиНеМенялся, ДатаИзмененияВнешнейОбработки) Тогда 
		Возврат;
	КонецЕсли; 
	ДатаИзмененияВнешнейОбработки = НоваяДатаИзмененияВнешнейОбработки;
	ФайлВнешнейОбработки = Новый Файл(ИмяФайлаВнешнейОбработки);
	ФайлВнешнейОбработки.УстановитьВремяИзменения(ДатаИзмененияВнешнейОбработки);
	ОбновитьИнфоФайлаВнешнейОбработки();

КонецПроцедуры

Функция ОбновитьИнфоФайлаВнешнейОбработки(ФайлИмеетПриоритет = Ложь)
	
	Если ФайлИмеетПриоритет Тогда
		Файл = Новый Файл(ИмяФайлаВнешнейОбработки);
		Если Файл.Существует() Тогда
			ДатаИзмененияВнешнейОбработки = Файл.ПолучитьВремяИзменения();
		КонецЕсли; 
	КонецЕсли; 
	ИнфоФайла = Новый Структура;
	ИнфоФайла.Вставить("ФайлКонсоли", мИмяОткрытогоФайла);
	ИнфоФайла.Вставить("ИдентификаторАлгоритма", мТекущаяСтрокаДереваАлгоритмов.Наименование);
	ИнфоФайла.Вставить("ВерсияАлгоритма", ДатаИзмененияВнешнейОбработки);
	ирОбщий.СохранитьЗначениеВФайлЛкс(ИнфоФайла, ИмяСлужебногоФайла());
	ПроверитьВнешнююОбработку();
	Возврат ИнфоФайла;

КонецФункции

Процедура КоманднаяПанельВстроенныйЯзыкОткрытьВОтладчике(Кнопка)
	
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	Если Не РежимВнешнейОбработки Тогда
		КоманднаяПанельВстроенныйЯзыкРежимВнешнейОбработки();
	КонецЕсли; 
	Если Не ПолеВстроенногоЯзыка.ПроверитьПрограммныйКод() Тогда 
		Возврат;
	КонецЕсли;
	Попытка
		мПлатформа.АктивизироватьОкноПроцесса1С8(мПлатформа.ПолучитьИдентификаторПроцессаОС()); // Делаем заранее, чтобы антивирус успел проверить исполняемый файл и потом не делал задержку при рабочем вызове
	Исключение
		// Антивирус заблокировал исполнение файла
	КонецПопытки;
	Если Не ОбновитьФайлВнешнейОбработкиИнтерактивно() Тогда 
		//Возврат;
	КонецЕсли; 
	НомерСтрокиВАлгоритме = ПолеВстроенногоЯзыка.ПолучитьНомерТекущейСтроки();
	НомерСтрокиВМодуле = НомерСтрокиВАлгоритме + СтартоваяСтрока;
	Если ИмяФайлаВнешнейОбработки <> Неопределено Тогда
		ИдентификаторПроцессаОтладчика = ирОбщий.ПроверитьЗапуститьОтладчик();
		Если ИдентификаторПроцессаОтладчика = Неопределено Тогда
			ИдентификаторПроцессаОтладчика = 0;
		КонецЕсли; 
		мПлатформа.ОткрытьМодульВнешнейОбработкиВОтладчике(ИмяФайлаВнешнейОбработки, НомерСтрокиВМодуле, ИдентификаторПроцессаОтладчика);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкРежимВнешнейОбработки(Кнопка = Неопределено)
	
	Кнопка = ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.РежимВнешнейОбработки;
	ЭтаФорма.РежимВнешнейОбработки = Не Кнопка.Пометка;
	Кнопка.Пометка = РежимВнешнейОбработки;
	ОбновитьДоступностьКнопкиВыполнятьНаСервере();
	//ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.ОткрытьВОтладчике.Доступность = РежимВнешнейОбработки;

КонецПроцедуры

Процедура ОбновитьДоступностьКнопкиВыполнятьНаСервере()
	
	ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.КонтекстВыполнения.Кнопки.Сервер.Доступность = Истина
		//И Не ирКэш.ЭтоФайловаяБазаЛкс()
		//И Не РежимВнешнейОбработки
		И (Ложь
			Или Не ирКэш.ЛиПортативныйРежимЛкс()
			Или ирПортативный.ЛиСерверныйМодульДоступенЛкс()
			);
	ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.КонтекстВыполнения.Кнопки.Фоновый.Доступность = Истина
		И Не ирКэш.ЛиПортативныйРежимЛкс();
			
КонецПроцедуры

Процедура ДействияФормыНовоеОкно(Кнопка)
	
	Если ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока <> Неопределено Тогда
		СохранитьДанныеТекущейСтроки();
		Ответ = Вопрос("Создать в новом окне новый файл и скопировать туда текущий алгоритм?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли; 
	НоваяФорма = ирОбщий.ОткрытьНовоеОкноФормыЛкс(ЭтотОбъект);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НоваяФорма.СоздатьФайл();
		ПутьВДереве = ирОбщий.Дерево_ПутьСтрокойЛкс(ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока, "");
		КопияДерева = ДеревоАлгоритмов.Скопировать();
		КопияСтроки = ирОбщий.Дерево_НайтиПоПутиСтрокойЛкс(КопияДерева, "", ПутьВДереве);
		НоваяСтрока = НоваяФорма.ДеревоАлгоритмов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КопияСтроки); 
		НоваяФорма.ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока = НоваяСтрока;
		НоваяФорма.ДеревоАлгоритмов.Строки.Удалить(0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыПредставлениеЗначенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.Параметры, СтандартнаяОбработка, ЭлементыФормы.Параметры.ТекущаяСтрока.Значение) Тогда 
		ОбновитьПредставлениеИТипЗначенияВСтроке();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗагрузить(Кнопка)
	
	РезультатВыбора = ирОбщий.ВыбратьСсылкуЛкс(Метаданные.Справочники.ирАлгоритмы, ТекущийАлгоритм, Ложь);
	Если Не ЗначениеЗаполнено(РезультатВыбора) Тогда
		Возврат;
	КонецЕсли; 
	ТекущийАлгоритм = РезультатВыбора;
	#Если Сервер И Не Сервер Тогда
	    ТекущийАлгоритм = Справочники.ирАлгоритмы.ПустаяСсылка();
	#КонецЕсли
	ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента.УстановитьТекст(ТекущийАлгоритм.ТекстАлгоритма);
	Если Параметры.Количество() > 0 Тогда
		Ответ = Вопрос("Очистить параметры перед загрузкой?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Параметры.Очистить();
		КонецЕсли;
	КонецЕсли; 
	Для Каждого СтрокаПараметраАлгоритма Из ТекущийАлгоритм.Параметры Цикл
		СтрокаПараметраКонсоли = Параметры.Найти(СтрокаПараметраАлгоритма.Имя, "Имя");
		Если СтрокаПараметраКонсоли = Неопределено Тогда
			СтрокаПараметраКонсоли = Параметры.Добавить();
			СтрокаПараметраКонсоли.Имя = СтрокаПараметраАлгоритма.Имя;
			ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаПараметраКонсоли);
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(СтрокаПараметраКонсоли, СтрокаПараметраАлгоритма);
		ЗначениеИзХранилища = СтрокаПараметраАлгоритма.ЗначениеХранилище.Получить();
		Если ЗначениеИзХранилища <> Неопределено Тогда
			СтрокаПараметраКонсоли.Значение = ЗначениеИзХранилища;
		КонецЕсли; 
		ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаПараметраКонсоли);
	КонецЦикла;
	
КонецПроцедуры


Процедура КоманднаяПанельВстроенныйЯзыкЗамерВремени(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЛиЗамерВремени = Кнопка.Пометка;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Ответ = ирОбщий.ЗапроситьСохранениеДанныхФормыЛкс(ЭтаФорма);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Не СохранитьВФайл() Тогда 
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	Отказ = Ответ = КодВозвратаДиалога.Отмена;
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкВозврат(Кнопка)
	
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык, "Перейти ~Конец;");
	
КонецПроцедуры

Процедура ДействияФормыОткрытьФайл(Кнопка)
	
	ОткрытьФайл();

КонецПроцедуры

Процедура ОткрытьФайл(РежимОбъединения = Ложь)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки";
	УстановитьФильтрВыбораФайла(ДиалогВыбораФайла);
	Файл = Новый Файл(мИмяОткрытогоФайла);
	ДиалогВыбораФайла.Каталог = Файл.Путь;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ОткрытьФайлПоПолномуИмени(ДиалогВыбораФайла.ПолноеИмяФайла, РежимОбъединения);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьФильтрВыбораФайла(Знач ДиалогВыбораФайла)
	
	#Если Сервер И Не Сервер Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла;
	#КонецЕсли
	ДиалогВыбораФайла.Фильтр = ирОбщий.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("t1c, f1c", "Файлы консоли кода");
	ДиалогВыбораФайла.Расширение = "t1c";
	ДиалогВыбораФайла.ИндексФильтра = 0;

КонецПроцедуры

Процедура ОткрытьФайлПоПолномуИмени(ПолноеИмяФайла, РежимОбъединения = Ложь)
	
	Если РежимОбъединения Тогда
		ЗагрузитьИзФайла(ПолноеИмяФайла);
	Иначе
		мИмяОткрытогоФайла = ПолноеИмяФайла;
		Файл = Новый Файл(мИмяОткрытогоФайла);
		ЗагрузитьИзФайла(, ирОбщий.СтрокиРавныЛкс(Файл.Расширение, ".t1c"));
	КонецЕсли; 
	СохранитьИмяФайла();
	
КонецПроцедуры

Процедура ЗагрузитьИзФайла(ИмяФайла = "", НовыйФормат = Истина)
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = мИмяОткрытогоФайла;
		РежимОбъединения = Ложь;
	Иначе
		РежимОбъединения = Истина;
	КонецЕсли; 
	//Проверим существование файла.
	ПолученноеЗначение = ирОбщий.ПрочитатьЗначениеИзФайлаСКонтролемПотерьЛкс(ИмяФайла);
	ДанныеЗагружены = Ложь;
	ЭтаФорма.Модифицированность = РежимОбъединения;
	Если Не РежимОбъединения Тогда
		ОчиститьДанные();
		//УстановитьЗаголовокФормы();
	КонецЕсли;
	Если НовыйФормат Тогда
		Если ТипЗнч(ПолученноеЗначение) = Тип("Структура") Тогда
			ЭтаФорма.НеCохранятьПараметрыВыхода = ПолученноеЗначение.НеCохранятьПараметрыВыхода;
			ДеревоАлгоритмовДляЗагрузки = ПолученноеЗначение.ДеревоАлгоритмов;
		ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
			ДеревоАлгоритмовДляЗагрузки = ПолученноеЗначение;
		Иначе
			ДеревоАлгоритмовДляЗагрузки = Неопределено;
		КонецЕсли; 
		Если ДеревоАлгоритмовДляЗагрузки <> Неопределено Тогда
			ирОбщий.СкопироватьДеревоЛкс(ДеревоАлгоритмовДляЗагрузки, ДеревоАлгоритмов, Не РежимОбъединения);
			Если ДеревоАлгоритмовДляЗагрузки.Строки.Количество() > 0 Тогда
				КоординатыТекущейСтроки = ДеревоАлгоритмовДляЗагрузки.Строки[0].КоординатыТекущейСтроки;
				Попытка
					НоваяТекущаяСтрока = ирОбщий.Дерево_НайтиПоПутиМассивомЛкс(ДеревоАлгоритмов, КоординатыТекущейСтроки);
				Исключение
					ОписаниеОшибки = ОписаниеОшибки();
					ирОбщий.СообщитьСУчетомМодальностиЛкс(ОписаниеОшибки, МодальныйРежим);
					НоваяТекущаяСтрока = Неопределено;
				КонецПопытки; 
				Если НоваяТекущаяСтрока <> Неопределено Тогда
					ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока = НоваяТекущаяСтрока;
				КонецЕсли; 
			КонецЕсли; 
			ДанныеЗагружены = Истина;
		КонецЕсли; 
	Иначе
		Если ТипЗнч(ПолученноеЗначение) = Тип("Структура") Тогда
			НоваяСтрока = ДеревоАлгоритмов.Строки.Добавить();
			НоваяСтрока.Наименование = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(ДеревоАлгоритмов.Строки, НоваяСтрока, "Наименование", Ложь, "Алгоритм");
			НоваяСтрока.ТекстАлгоритма = ПолученноеЗначение.Текст;
			НоваяСтрока.Параметры = ПолученноеЗначение.Параметры;
			ДанныеЗагружены = Истина;
		КонецЕсли; 
	КонецЕсли; 
	ирОбщий.УстановитьАвтоматическоеРаскрытиеУзловДереваЛкс(ЭлементыФормы.ДеревоАлгоритмов);
	Если Не ДанныеЗагружены Тогда 
		СоздатьФайл();
		Предупреждение("Невозможно загрузить список алгоритмов из указанного файла!
		|Создан новый файл", 10);
	КонецЕсли;
	ЭтаФорма.СтрокаПоискаВДереве = "";
	
КонецПроцедуры

Процедура ДействияФормыСохранитьФайл(Кнопка)
	
	СохранитьВФайл();
	
КонецПроцедуры

Функция СохранитьВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь, ИмяФайла = Неопределено, СброситьМодифицированность = Неопределено)
	
	Если СброситьМодифицированность = Неопределено Тогда
		//СброситьМодифицированность = Не мРежимРедактора;
		СброситьМодифицированность = Истина;
	КонецЕсли; 
	Если ИмяФайла = Неопределено Тогда
		Если ЗначениеЗаполнено(мИмяОткрытогоФайла) Тогда
			Файл = Новый Файл(мИмяОткрытогоФайла);
			ИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + ".t1c";
		КонецЕсли; 
	КонецЕсли; 
	СохранитьДанныеТекущейСтроки();
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущий файл?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для сохранения";
	УстановитьФильтрВыбораФайла(ДиалогВыбораФайла);
	Файл = Новый Файл(мИмяОткрытогоФайла);
	ДиалогВыбораФайла.Каталог = Файл.Путь;
	КопияДерева = ДеревоАлгоритмов.Скопировать();
	ВсеСтрокиКопииДерева = ирОбщий.ВсеСтрокиДереваЗначенийЛкс(КопияДерева);
	КопияДерева.Колонки.Добавить("КоординатыТекущейСтроки"); // Такой несистемный прием нужен для совместимости по формату со старыми консолями
	Если КопияДерева.Строки.Количество() > 0 Тогда
		КопияДерева.Строки[0].КоординатыТекущейСтроки = ирОбщий.Дерево_ПутьМассивомЛкс(мТекущаяСтрокаДереваАлгоритмов);
	КонецЕсли; 
	Если НеCохранятьПараметрыВыхода Тогда
		Для Каждого СтрокаКопииДерева Из ВсеСтрокиКопииДерева Цикл
			ОчиститьПараметрыВыхода(СтрокаКопииДерева.Параметры);
		КонецЦикла;
	КонецЕсли; 
	Для Каждого СтрокаДерева Из ВсеСтрокиКопииДерева Цикл
		Для Каждого СтрокаПараметра Из СтрокаДерева.Параметры Цикл
			ЦиклическиеСсылки = ирОбщий.ПроверитьЦиклическиеСсылкиВстроенногоЯзыкаЛкс(СтрокаПараметра.Значение);
			Если ЦиклическиеСсылки.Количество() > 0 Тогда
				ирОбщий.СообщитьЛкс("Сохранение файла не выполнено из-за наличия циклической ссылки в алгоритме """ + СтрокаДерева.Наименование + """ параметре """ + СтрокаПараметра.Имя + """ - "
					+ ЦиклическиеСсылки[0].ЭлементыЦиклическихСсылок[0], СтатусСообщения.Внимание);
				Возврат Ложь;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	ДанныеДляФайла = Новый Структура();
	ДанныеДляФайла.Вставить("ДеревоАлгоритмов", КопияДерева);
	ДанныеДляФайла.Вставить("НеCохранятьПараметрыВыхода", НеCохранятьПараметрыВыхода);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Если Не ЗначениеВФайл(ИмяВременногоФайла, ДанныеДляФайла) Тогда 
		ирОбщий.СообщитьЛкс("Ошибка записи файла """ + ИмяВременногоФайла + """", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли; 
	Попытка
		ЗначениеИзФайла(ИмяВременногоФайла);
		//ВызватьИсключение 1; // Для отладки
	Исключение
		УдалитьФайлы(ИмяВременногоФайла);
		Если ЗапрашиватьСохранение Или ЗапрашиватьИмяФайла Или мИмяОткрытогоФайла = ИмяФайла Тогда
			Если Не НеCохранятьПараметрыВыхода Тогда
				Ответ = Вопрос("При сохранении в файл попадут недесериализуемые параметры. Хотите отключить сохранение параметров выхода (ОК) или вручную найти и удалить такие параметры (Отмена)?",
					РежимДиалогаВопрос.ОКОтмена);
			Иначе
				Ответ = КодВозвратаДиалога.Отмена;
				ирОбщий.СообщитьЛкс("Сохранение файла не выполнено, т.к. его нельзя было бы прочитать из-за недесериализуемых параметров. Найдите и удалите такие параметры и повторите попытку.");
			КонецЕсли; 
		Иначе
			Ответ = КодВозвратаДиалога.Отмена;
			ирОбщий.СообщитьЛкс("Сохранение файла восстановления не выполнено, т.к. его нельзя было бы прочитать из-за недесериализуемых параметров.");
		КонецЕсли; 
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ЭтаФорма.НеCохранятьПараметрыВыхода = Истина;
			Возврат СохранитьВФайл(ЗапрашиватьСохранение, ЗапрашиватьИмяФайла, ИмяФайла, СброситьМодифицированность);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецПопытки; 
	УдалитьФайлы(ИмяВременногоФайла);
	ФайлВыбран = ирОбщий.СохранитьФайлВКонсолиСВосстановлениемЛкс(ДиалогВыбораФайла, ИмяФайла, мИмяОткрытогоФайла, ДанныеДляФайла, мСтруктураВосстановления, 
		ЗапрашиватьИмяФайла);
	Если ФайлВыбран Тогда
		мИмяОткрытогоФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
		СохранитьИмяФайла();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Если СброситьМодифицированность Тогда
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
	//УстановитьЗаголовокФормы();
	Обновить();
	Возврат Истина;

КонецФункции

Процедура ОчиститьПараметрыВыхода(Знач ПараметрыСтроки = Неопределено)
	
	Если ПараметрыСтроки = Неопределено Тогда
		ПараметрыСтроки = Параметры;
	КонецЕсли; 
	НачальноеКоличество = ПараметрыСтроки.Количество(); 
	Для СчетчикПараметры = 1 По НачальноеКоличество Цикл
		СтрокаПараметра = ПараметрыСтроки[НачальноеКоличество - СчетчикПараметры];
		Если СтрокаПараметра.Выход И Не СтрокаПараметра.Вход Тогда
			ПараметрыСтроки.Удалить(СтрокаПараметра);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкВыполнитьАнализТрассы(Кнопка)
	
	Если мАнализТехножурнала <> Неопределено Тогда
		#Если Сервер И Не Сервер Тогда
		    мАнализТехножурнала = Обработки.ирАнализТехножурнала.Создать();
		#КонецЕсли
		мАнализТехножурнала.ПоказатьТрассу(,,, 0);
	КонецЕсли; 
	
КонецПроцедуры

Функция НовыйКлючЗамераДляВставкиВАлгоритм()
	
	НомерВставкиЗамера = НомерВставкиЗамера + 1;
	Возврат "Замер" + XMLСтрока(НомерВставкиЗамера);

КонецФункции

Процедура КоманднаяПанельВстроенныйЯзыкЗамераЦикла(Кнопка)
	#Если Сервер И Не Сервер Тогда
		ирОбщий.НачатьЗамерЛкс();
	#КонецЕсли
		ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык,
	"КоличествоПроходов = 10;
	|ирОбщий.НачатьЗамерЛкс(КоличествоПроходов, """ + НовыйКлючЗамераДляВставкиВАлгоритм() + """);
	|Для Счетчик = 1 По КоличествоПроходов Цикл" + ирОбщий.ДобавитьМногострочнуюСтрокуВТекстЛкс("", Символы.ПС + ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст, Символы.Таб) + "
	|КонецЦикла;
	|ирОбщий.КончитьЗамерЛкс();");
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкНачалоЗамера(Кнопка)
	
	#Если Сервер И Не Сервер Тогда
		ирОбщий.НачатьЗамерЛкс();
	#КонецЕсли
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык, "ирОбщий.НачатьЗамерЛкс(, """ + НовыйКлючЗамераДляВставкиВАлгоритм() + """);");
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкКонецЗамера(Кнопка)
	
	#Если Сервер И Не Сервер Тогда
		ирОбщий.КончитьЗамерЛкс();
	#КонецЕсли
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык, "ирОбщий.КончитьЗамерЛкс();");

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкАдаптироватьТекстИзМетода(Кнопка)
	
	ТекстАлгоритма = ЭлементыФормы.ВстроенныйЯзык.ПолучитьТекст();
	ТекстАлгоритма = ЗаменитьВозвратыНаПерейтиВТекстеМетода1С(ТекстАлгоритма);
	УстановитьТекстАлгоритмаСВозможностьюОтмены(ТекстАлгоритма);
	
КонецПроцедуры

Процедура УстановитьТекстАлгоритмаСВозможностьюОтмены(Знач ТекстАлгоритма)
	
	ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(1, СтрДлина(ЭлементыФормы.ВстроенныйЯзык.ПолучитьТекст()));
	ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст = ТекстАлгоритма;
	ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(1, 1);
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

Функция ЗаменитьВозвратыНаПерейтиВТекстеМетода1С(Знач Текст) Экспорт
	
	ОбработкаРегулярныхВыражений = мПлатформа.RegExp;
	ОбработкаРегулярныхВыражений.Global = Истина;
	ОбработкаРегулярныхВыражений.MultiLine = Истина;
	
	// Шаблон тут можно улучшить конечно
	ОбработкаРегулярныхВыражений.Pattern = "((?:^|\n|\r)(?:\t| )*)Возврат(?:\t| )+(\s*[^\r;]+)(\r|;)";
	Текст = ОбработкаРегулярныхВыражений.Replace(Текст, "$1Результат = $2;" + Символы.ПС + "$1Перейти ~Конец$3");
	ОбработкаРегулярныхВыражений.Pattern = "((?:^|\n|\r)(?:\t| )*)Возврат(?:\t| )*(\n|\r|;)";
	Текст = ОбработкаРегулярныхВыражений.Replace(Текст, "$1Перейти ~Конец$2");
	//Вхождения = ОбработкаРегулярныхВыражений.Execute(Текст);
	//Для Каждого Вхождение Из Вхождения Цикл
	//	СтрокаЗамены = "";
	//	Если Вхождение.SubMatches(1) <> Неопределено Тогда
	//		СтрокаЗамены = СтрокаЗамены + Вхождение.SubMatches(0) + "Результат = " + Вхождение.SubMatches(1) + ";";
	//	КонецЕсли;
	//	//СтрокаЗамены = СтрокаЗамены + Вхождение.SubMatches(0) + "Перейти ~Конец";
	//	СтрокаЗамены = СтрокаЗамены + " Перейти ~Конец";
	//	Текст = СтрЗаменить(Текст, Вхождение.Value, СтрокаЗамены);
	//КонецЦикла;
	Результат = Текст;
	Возврат Результат;
	
КонецФункции

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОПодсистеме(Кнопка)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	ирОбщий.ФормаОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 
	Если ИмяСобытия = "ИзмененОбъект" Тогда
		ЭлементыФормы.Параметры.ОбновитьСтроки();
	КонецЕсли; 

КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка) Экспорт 
	
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработчикОжиданияСПараметрамиЛкс() Экспорт 
	
	ирОбщий.ОбработчикОжиданияСПараметрамиЛкс();

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкЗаписьНаСервере(Кнопка)
	
	#Если Сервер И Не Сервер Тогда
		ирОбщий.ЗаписатьОбъектЛкс();
	#КонецЕсли
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык, "ирОбщий.ЗаписатьОбъектЛкс(Объект, Истина);");

КонецПроцедуры

Процедура НайтиПараметрВТексте(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.Параметры.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	ПолеВстроенногоЯзыка.НайтиПоказатьСловоВТексте(ТекущаяСтрока.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыРедакторОбъектаБД(Кнопка)
	
	Если ЭлементыФормы.Параметры.ТекущаяСтрока <> Неопределено Тогда
		ЗначениеПараметра = ЭлементыФормы.Параметры.ТекущаяСтрока.Значение;
		Если ирОбщий.ЛиТипСсылкиБДЛкс(ТипЗнч(ЗначениеПараметра), Ложь) Тогда
			ирОбщий.ОткрытьСсылкуВРедактореОбъектаБДЛкс(ЗначениеПараметра);
		ИначеЕсли ирОбщий.ЛиТипОбъектаБДЛкс(ТипЗнч(ЗначениеПараметра)) Тогда
			ирОбщий.ОткрытьОбъектВРедактореОбъектаБДЛкс(ЗначениеПараметра);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСтруктураФормы(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруФормыЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ПараметрыПредставлениеЗначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭтоНеудобнаяСсылка = ирОбщий.ЭтоНеудобнаяСсылкаДляОбработкиВыбораЛкс(ВыбранноеЗначение);
	Если ЭтоНеудобнаяСсылка Тогда
		ЭлементыФормы.Параметры.ТекущиеДанные.Значение = ВыбранноеЗначение;
		ОбновитьПредставлениеИТипЗначенияВСтроке();
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоАлгоритмовПриАктивизацииСтроки(Элемент)
	
	Если ПолеВстроенногоЯзыка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СохранитьДанныеТекущейСтроки();
	ЗагрузитьДанныеТекущейСтроки();
	
КонецПроцедуры

Процедура СохранитьДанныеТекущейСтроки()
	
	Если Истина
		И мАлгоритмЗагруженВКонсоль
		И ДеревоАлгоритмов.Строки.Количество() <> 0 
		И мТекущаяСтрокаДереваАлгоритмов <> НеОпределено 
	Тогда
		ТекстАлгоритма = ЭлементыФормы.ВстроенныйЯзык.ПолучитьТекст();
		Если мТекущаяСтрокаДереваАлгоритмов.ТекстАлгоритма <> ТекстАлгоритма Тогда
			Модифицированность = Истина;
		КонецЕсли;
		мТекущаяСтрокаДереваАлгоритмов.ТекстАлгоритма = ТекстАлгоритма;
		мТекущаяСтрокаДереваАлгоритмов.Параметры = Параметры.Скопировать();
		ЭлементыФормы.ВстроенныйЯзык.ПолучитьГраницыВыделения(мТекущаяСтрокаДереваАлгоритмов.НачальнаяСтрока, мТекущаяСтрокаДереваАлгоритмов.НачальнаяКолонка,
			мТекущаяСтрокаДереваАлгоритмов.КонечнаяСтрока, мТекущаяСтрокаДереваАлгоритмов.КонечнаяКолонка);
		Если ЗначениеЗаполнено(СтрокаПоискаВДереве) Тогда
			СтрокаПоискаПриИзменении(, Ложь);
		КонецЕсли; 
		Если НеCохранятьПараметрыВыхода Тогда
			ОчиститьПараметрыВыхода();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеТекущейСтроки()

	мТекущаяСтрокаДереваАлгоритмов = ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока;
	мАлгоритмЗагруженВКонсоль = Истина
		И ДеревоАлгоритмов.Строки.Количество() <> 0 
		И мТекущаяСтрокаДереваАлгоритмов <> НеОпределено 
		И Не мТекущаяСтрокаДереваАлгоритмов.ЭтоГруппа;
	ЭлементыФормы.ВстроенныйЯзык.УстановитьТекст("");
	Параметры.Очистить();
	Если мАлгоритмЗагруженВКонсоль Тогда
		ЭлементыФормы.ВстроенныйЯзык.УстановитьТекст(мТекущаяСтрокаДереваАлгоритмов.ТекстАлгоритма);
		ВосстановитьТекущуюСтрокуВТекстеЗапроса = Истина;
		Если ЗначениеЗаполнено(СтрокаПоискаВДереве) Тогда
			ВосстановитьТекущуюСтрокуВТекстеЗапроса = Не ирОбщий.НайтиПоказатьСтрокуВПолеТекстовогоДокументаЛкс(ЭтаФорма, ЭлементыФормы.ВстроенныйЯзык, СтрокаПоискаВДереве, Ложь);
		КонецЕсли; 
		Если ВосстановитьТекущуюСтрокуВТекстеЗапроса И мТекущаяСтрокаДереваАлгоритмов.НачальнаяСтрока > 0 Тогда
			ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(мТекущаяСтрокаДереваАлгоритмов.НачальнаяСтрока, мТекущаяСтрокаДереваАлгоритмов.НачальнаяКолонка,
				мТекущаяСтрокаДереваАлгоритмов.КонечнаяСтрока, мТекущаяСтрокаДереваАлгоритмов.КонечнаяКолонка);
		КонецЕсли; 
		ИсходнаяТаблицаПараметров = мТекущаяСтрокаДереваАлгоритмов.Параметры;
		Если ИсходнаяТаблицаПараметров <> Неопределено Тогда
			ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(ИсходнаяТаблицаПараметров, Параметры);
			Для Каждого СтрокаТаблицы Из Параметры Цикл
				Если Не СтрокаТаблицы.Фиксированный Тогда
					ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаТаблицы);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		ВыбраннаяКнопка = ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.КонтекстВыполнения.Кнопки.Найти(мТекущаяСтрокаДереваАлгоритмов.КонтекстВыполнения);
		ВыбранСпособВыполнения(ВыбраннаяКнопка);
	КонецЕсли;
	ОбновитьДоступностьПанелиАлгоритма();

КонецПроцедуры

Процедура КП_ДеревоДобавитьГруппу(Кнопка)
	
	ЭлементыФормы.ДеревоАлгоритмов.ДобавитьСтроку();
	ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока.ЭтоГруппа = Истина;
	
КонецПроцедуры

Процедура ДействияФормыНовыйФайл(Кнопка = Неопределено) 
	
	Если СохранитьВФайл(Истина) Тогда
		СоздатьФайл();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьФайл(Отладка = Ложь) Экспорт 

	мИмяОткрытогоФайла = "";
	СохранитьИмяФайла();
	
	ОчиститьДанные();
	//УстановитьЗаголовокФормы();
	мТекущаяСтрокаДереваАлгоритмов = ДеревоАлгоритмов.Строки.Добавить();
	мТекущаяСтрокаДереваАлгоритмов.Наименование = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(ДеревоАлгоритмов.Строки, мТекущаяСтрокаДереваАлгоритмов, "Наименование", Ложь, БазовоеИмяНовойСтроки());
	ПриИзмененииДереваАлгоритмов();
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

Процедура ПриИзмененииДереваАлгоритмов()

	ОбновитьДоступностьПанелиАлгоритма();
	Если Истина
		И ДеревоАлгоритмов.Строки.Количество() > 0
		И ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока = Неопределено
	Тогда 
	    ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока = ДеревоАлгоритмов.Строки[0];
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДоступностьПанелиАлгоритма() Экспорт

	НоваяДоступность = Истина
		И мАлгоритмЗагруженВКонсоль
		И мТекущаяСтрокаДереваАлгоритмов <> Неопределено
		И Не мТекущаяСтрокаДереваАлгоритмов.ЭтоГруппа;
	ЭлементыФормы.КоманднаяПанельПараметры.Доступность = НоваяДоступность;
	ЭлементыФормы.Параметры.Доступность = НоваяДоступность;
	ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Доступность = НоваяДоступность;
	ЭлементыФормы.ВстроенныйЯзык.Доступность = НоваяДоступность;

КонецПроцедуры

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура СохранитьИмяФайла()
	
	ирОбщий.СохранитьЗначениеЛкс("ирКонсольКода_ИмяФайла", мИмяОткрытогоФайла);
	Если ЗначениеЗаполнено(мИмяОткрытогоФайла) Тогда
		ирОбщий.ДобавитьВИсториюЭлементЛкс(мИсторияФайлов, мИмяОткрытогоФайла);
		ирОбщий.СохранитьЗначениеЛкс("ирКонсольКода_мИсторияФайлов", мИсторияФайлов);
		ОбновитьПодменюИсторииФайлов();
	КонецЕсли; 
	
КонецПроцедуры // СохранитьИмяФайла()

Процедура ОбновитьПодменюИсторииФайлов()
	
	//Если Не мРежимРедактора Тогда
		Кнопки = ЭлементыФормы.ДействияФормы.Кнопки.ОткрытьПоследние.Кнопки;
		ирОбщий.ОбновитьПодменюИсторииФайловЛкс(мИсторияФайлов, Кнопки);
	//КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьФайлИзИстории(Кнопка) 
	
	Если СохранитьВФайл(Истина) Тогда
		СтрокаИстории = мИсторияФайлов[Число(Сред(Кнопка.Имя, 2))];
		ОткрытьФайлПоПолномуИмени(СтрокаИстории.Значение);
	КонецЕсли;
	ПриИзмененииДереваАлгоритмов();
	
КонецПроцедуры

Процедура ОчиститьДанные()
	
	ДеревоАлгоритмов.Строки.Очистить();
	мТекущаяСтрокаДереваАлгоритмов = Неопределено;
	ЭтаФорма.ЭлементыФормы.ВстроенныйЯзык.УстановитьТекст("");
	Параметры.Очистить();;
	
КонецПроцедуры // ОчиститьЗначения()

Процедура ДеревоАлгоритмовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ирКэш.КартинкаПоИмениЛкс("ирПапка"));
	Иначе 
		ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ирКэш.КартинкаПоИмениЛкс("ирАлгоритм"));
	КонецЕсли; 
	Если ЗначениеЗаполнено(ДанныеСтроки.ДатаВыполнения) Тогда
		ОформлениеСтроки.Ячейки.ДатаВыполнения.УстановитьТекст(Цел((ТекущаяДата() - ДанныеСтроки.ДатаВыполнения) / 60));
	Иначе
		ОформлениеСтроки.Ячейки.ДатаВыполнения.УстановитьТекст("");
	КонецЕсли; 
	ирОбщий.ОформитьСтрокуВТабличномПолеДереваСПоискомЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки, мСтруктураПоискаВДереве);

КонецПроцедуры

Процедура ДействияФормыОбъединитьФайл(Кнопка)
	
	ОткрытьФайл(Истина);
	
КонецПроцедуры

Процедура ДеревоАлгоритмовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	СохранитьДанныеТекущейСтроки();
	Если Копирование Тогда
		ТекущийРодитель = Родитель;
	Иначе
		ТекущийРодитель = ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока;
	КонецЕсли; 
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоАлгоритмов;
	ИначеЕсли Не ТекущийРодитель.ЭтоГруппа И Не Копирование Тогда
		ТекущийРодитель = ирОбщий.ПолучитьРодителяСтрокиДереваЛкс(ТекущийРодитель);
	КонецЕсли; 
	НоваяСтрока = ТекущийРодитель.Строки.Добавить();
	Если Копирование Тогда
		ирОбщий.СкопироватьСтрокиДереваЛкс(ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока, НоваяСтрока);
	Иначе
		//УстановитьЗначенияПоУмолчаниюСтрокиАлгоритма(НоваяСтрока);
	КонецЕсли; 
	НоваяСтрока.Наименование = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(ТекущийРодитель.Строки, НоваяСтрока.Наименование, "Наименование", Ложь, БазовоеИмяНовойСтроки());
	Элемент.ТекущаяСтрока = НоваяСтрока;
	Элемент.ИзменитьСтроку();

КонецПроцедуры

Функция БазовоеИмяНовойСтроки()
	
	Возврат "Алгоритм";

КонецФункции

Процедура ДействияФормыСохранитьКак(Кнопка)
	
	СохранитьВФайл(Ложь, Истина);

КонецПроцедуры

Процедура ДеревоАлгоритмовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ирОбщий.ДеревоКонсолиПроверкаПеретаскиванияЛкс(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваАлгоритмов");
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
		И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания[0].Владелец() = Параметры
	Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоАлгоритмовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СохранитьДанныеТекущейСтроки();
	ирОбщий.ДеревоКонсолиПеретаскиваниеЛкс(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваАлгоритмов");
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
		И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания[0].Владелец() = Параметры
	Тогда
		СтандартнаяОбработка = Ложь;
		Для Каждого СтрокаПараметра Из ЗначениеПеретаскивания Цикл
			СтрокаНовогоПараметра = Строка.Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовогоПараметра, СтрокаПараметра);
			СтрокаНовогоПараметра.Имя = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(Строка.Параметры, СтрокаНовогоПараметра, "Имя");
			ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаНовогоПараметра, "Имя");
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоАлгоритмовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	СохранитьДанныеТекущейСтроки();
	ирОбщий.ДеревоКонсолиНачалоПеретаскиванияЛкс(Элемент, ПараметрыПеретаскивания, Выполнение, "СтрокаДереваАлгоритмов")

КонецПроцедуры

Процедура ДеревоАлгоритмовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ирОбщий.ДеревоКонсолиПриОкончанииРедактированияЛкс(мТекущаяСтрокаДереваАлгоритмов);

КонецПроцедуры

Процедура ПеренестиСтрокуДереваВКорень()
	
	СохранитьДанныеТекущейСтроки();
	НоваяСтрока = ДеревоАлгоритмов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекущаяСтрокаДереваАлгоритмов);
	ирОбщий.СкопироватьДеревоЛкс(мТекущаяСтрокаДереваАлгоритмов, НоваяСтрока);
	РодительТекущейСтроки = ?(мТекущаяСтрокаДереваАлгоритмов.Родитель = НеОпределено, ДеревоАлгоритмов, мТекущаяСтрокаДереваАлгоритмов.Родитель);
	РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрокаДереваАлгоритмов));
	мТекущаяСтрокаДереваАлгоритмов = НеОпределено;
	ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока = НоваяСтрока;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ПеренестиСтрокуДерева()

Процедура ДеревоАлгоритмовПередУдалением(Элемент, Отказ)
	
	мТекущаяСтрокаДереваАлгоритмов = Неопределено;

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкЗначениеИзБуфера(Кнопка)
	
	Если ЭтаФорма.ТекущийЭлемент <> ЭлементыФормы.ВстроенныйЯзык Тогда
		Возврат;
	КонецЕсли; 
	ЗначениеИзБуфера = ирОбщий.СсылкаИзБуфераОбменаЛкс();
	Если Не ирОбщий.ЛиСсылкаНаОбъектБДЛкс(ЗначениеИзБуфера, Ложь) Тогда
		Возврат;
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	СтрокаПараметра = ПолеВстроенногоЯзыка.ВставитьСсылкуНаОбъектБД(ЭлементыФормы.Параметры,,,, Истина, ЗначениеИзБуфера, Ложь, ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ВстроенныйЯзык);
	Если СтрокаПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//СтрокаПараметра.НИмя = НРег(СтрокаПараметра.Имя);
	СтрокаПараметра.Вход = Истина;
	СтрокаПараметра.Выход = Ложь;
	ОбновитьПредставлениеИТипЗначенияВСтроке(СтрокаПараметра);
	ЭлементыФормы.Параметры.ТекущаяСтрока = СтрокаПараметра;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если мРежимРедактора Тогда
		ДобавкаЗаголовка = мИмяАлгоритмаДляРедактора;
	Иначе
		ДобавкаЗаголовка = мИмяОткрытогоФайла;
	КонецЕсли; 
	ирОбщий.ОбновитьЗаголовокФормыСОткрытымФайломЛкс(ЭтаФорма, ДобавкаЗаголовка);
	ЭтаФорма.КоличествоПараметров = Параметры.Количество();
	
КонецПроцедуры

Процедура СтрокаПоискаПриИзменении(Элемент = Неопределено, АктивизироватьПервуюСтроку = Неопределено)
	
	Если Элемент <> Неопределено Тогда
		ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	КонецЕсли; 
	ирОбщий.ПрименитьСтрокуПоискаКТабличномуПолюДереваЛкс(ЭлементыФормы.ДеревоАлгоритмов, СтрокаПоискаВДереве, "ТекстАлгоритма, Наименование", мСтруктураПоискаВДереве,
		АктивизироватьПервуюСтроку <> Ложь);
	ирОбщий.НайтиПоказатьСтрокуВПолеТекстовогоДокументаЛкс(ЭтаФорма, ЭлементыФормы.ВстроенныйЯзык, СтрокаПоискаВДереве, Ложь);
	
КонецПроцедуры

Процедура СтрокаПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ВпередНажатие(Элемент)
	
	ирОбщий.СледующееВхождениеСтрокиПоискаВТабличномПолеДереваЛкс(ЭлементыФормы.ДеревоАлгоритмов, мСтруктураПоискаВДереве);
	
КонецПроцедуры

Процедура НазадНажатие(Элемент)
	
	ирОбщий.ПредыдущееВхождениеСтрокиПоискаВТабличномПолеДереваЛкс(ЭлементыФормы.ДеревоАлгоритмов, мСтруктураПоискаВДереве);

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкВычислитьВыражение(Кнопка)
	
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	КорневоеЗначение = Неопределено;
	ТекущееВыражение = ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст;
	Если СтрДлина(ТекущееВыражение) = 0 Тогда
		ТекущееВыражение = ПолеВстроенногоЯзыка.ПолучитьТекущееОбъектноеВыражение();
	КонецЕсли; 
	КорневоеИмя = ирОбщий.ПервыйФрагментЛкс(ТекущееВыражение);
	СтрокаПараметра = Параметры.Найти(Нрег(КорневоеИмя), "НИмя");
	ИсследовательОбъектов = ирОбщий.СоздатьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирИсследовательОбъектов");
	#Если Сервер И Не Сервер Тогда
	    ИсследовательОбъектов = Обработки.ирИсследовательОбъектов.Создать();
	#КонецЕсли
	//Если СтрокаПараметра <> Неопределено Тогда
	//	ЭлементыФормы.Параметры.ТекущаяСтрока = СтрокаПараметра;
	//	Если СтрокаПараметра <> Неопределено Тогда
	//		КорневоеЗначение = СтрокаПараметра.Значение;
	//	КонецЕсли; 
	//	ИсследовательОбъектов.ИсследоватьОбъект(КорневоеЗначение, , КорневоеИмя, ирОбщий.ПервыйФрагментЛкс(Сред(ТекущееВыражение, СтрДлина(КорневоеИмя) + 2)));
	//ИначеЕсли Прав(ТекущееВыражение, 1) <> "(" Тогда 
	//	ИсследовательОбъектов.ВычислитьВыражение(ТекущееВыражение);
	//КонецЕсли; 
	НаСервере = КонтекстВыполнения <> "Клиент";
	СтруктураПараметров = Новый Структура("Результат");
	АлгоритмВычисления = "";
	Для Каждого СтрокаПараметра Из Параметры Цикл
		СтруктураПараметров.Вставить(СтрокаПараметра.Имя, СтрокаПараметра.Значение);
		АлгоритмВычисления = АлгоритмВычисления + СтрокаПараметра.Имя + " = _АлгоритмОбъект." + СтрокаПараметра.Имя + ";" + Символы.ПС;
	КонецЦикла;
	АлгоритмВычисления = АлгоритмВычисления + " _АлгоритмОбъект.Результат = " + ТекущееВыражение + ";";
	Попытка
		ирОбщий.ВыполнитьАлгоритмВКонтекстеЛкс(АлгоритмВычисления, СтруктураПараметров, НаСервере);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	КорневоеЗначение = СтруктураПараметров.Результат;
	ИсследовательОбъектов.ИсследоватьОбъект(КорневоеЗначение, Ложь, ТекущееВыражение);
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкВставитьУказаниеТипаПеременной(Кнопка)
	
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык, "//: <ИмяПеременной> = Новый (""ТаблицаЗначений"");");
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкВОднострочныйВид(Кнопка)
	
	// https://www.forum.mista.ru/topic.php?id=659371&page=2
	// https://infostart.ru/public/71130/
	// https://partners.v8.1c.ru/forum/t/1134075/m/1134075
	// При компиляции 1С модулей, компилятор вставляет специальную команду перед первой выполняющейся инструкцией в строке исходного кода.
	// Эта команда используется для служебных целей платформы, например обработки прерывания выполнения кода, работы отладчика и т.п.
	// Обычно, обработка этой команды очень слабо влияет на производительность 1С кода
	// При обработке опкода новой строки "на клиенте предотвращается "замерзание" интерфейса, а на сервере отслеживается потеря связи с клиентом и убитие соединения администратором
	// "Код "переменная1 = 342" практически ничего не делает, т.к. 342 это константа, сконструированная при компиляции модуля, а присваивание ее переменной очень дешевая операция.
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	НомерСтрокиКаретки = 0;
	ЭлементыФормы.ВстроенныйЯзык.ПолучитьГраницыВыделения(НомерСтрокиКаретки, 1, 1, 1);
	ВесьТекст = Ложь;
	Если СтрДлина(ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст) = 0 Тогда
		ВесьТекст = Истина;
		Текст = ЭлементыФормы.ВстроенныйЯзык.ПолучитьТекст();
		НомерСтрокиКаретки = 1;
	Иначе
		Текст = ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст;
	КонецЕсли;
	ОднострочныйТекст = Новый ЗаписьXML;
	ОднострочныйТекст.УстановитьСтроку("");
	МногострочныйТекст = Текст;
	Если Прав(МногострочныйТекст, 1) = Символы.ПС Тогда
		МногострочныйТекст = Сред(МногострочныйТекст, 1, СтрДлина(МногострочныйТекст) - 1);
	КонецЕсли; 
	Если Найти(НРег(Текст), НРег("ОбработкаПрерыванияПользователя();")) > 0 Тогда
		ирОбщий.СообщитьЛкс("Метод ОбработкаПрерыванияПользователя() в однострочном варианте фактически не будет работать", СтатусСообщения.Информация);
	КонецЕсли; 
	Комментарии = "";
	Текст = ПолеВстроенногоЯзыка.УдалитьКомментарии(Текст);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Текст);
	ПерваяСтрокаТекста = ТекстовыйДокумент.ПолучитьСтроку(1);
	Отступ = Лев(ПерваяСтрокаТекста, СтрДлина(ПерваяСтрокаТекста) - СтрДлина(СокрЛ(ПерваяСтрокаТекста)));
	МногострочныйТекст = ""
		+              Отступ + "// Пассивный оригинал расположенного ниже однострочного кода. Выполняйте изменения синхронно в обоих вариантах."
		+ Символы.ПС + Отступ + "#Если Сервер И Не Сервер Тогда"
		+ Символы.ПС + МногострочныйТекст
		+ Символы.ПС + Отступ + "#КонецЕсли";
	ОткрытаИнструкцияДляПодсказки = Ложь;
	Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл 
		СтрокаТекста = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
		//Если Лев(СокрЛ(СтрокаТекста), 2) = "//" Тогда
		//	Продолжить;
		//КонецЕсли; 
		Если Лев(СокрЛ(СтрокаТекста), 1) = "|" Тогда
			ирОбщий.СообщитьЛкс("В однострочном коде не допускаются многострочные строковые литералы", СтатусСообщения.Внимание);
			ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(НомерСтрокиКаретки + Счетчик - 1, 1, НомерСтрокиКаретки + Счетчик - 1, 1000);
			Возврат;
		КонецЕсли;
		ИнструкцияДляПодсказки = "#Если Сервер И Не Сервер Тогда";
		Если НРег(СокрЛП(СтрокаТекста)) = НРег(ИнструкцияДляПодсказки) Тогда
			СтрокаТекста = СтрЗаменить(СтрокаТекста, ИнструкцияДляПодсказки, "Если Ложь Тогда");
			ОткрытаИнструкцияДляПодсказки = Истина;
		КонецЕсли; 
		Если ОткрытаИнструкцияДляПодсказки И СокрЛП(СтрокаТекста) = "#КонецЕсли" Тогда
			СтрокаТекста = СтрЗаменить(СтрокаТекста, "#КонецЕсли", "КонецЕсли;");
			ОткрытаИнструкцияДляПодсказки = Ложь;
		КонецЕсли; 
		Если Лев(СокрЛ(СтрокаТекста), 1) = "#" Тогда
			ирОбщий.СообщитьЛкс("В однострочном коде не допускаются инструкции препроцессора", СтатусСообщения.Внимание);
			ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(НомерСтрокиКаретки + Счетчик - 1, 1, НомерСтрокиКаретки + Счетчик - 1, 1000);
			Возврат;
		КонецЕсли; 
		ОднострочныйТекст.ЗаписатьБезОбработки(СокрП(СтрокаТекста) + " " + Символы.НПП);
	КонецЦикла;
	ВыходнойТекст = Символы.ПС;
	ВыходнойТекст = ВыходнойТекст + МногострочныйТекст + Символы.ПС;
	ВыходнойТекст = ВыходнойТекст + Отступ + КомментарийОднострочногоВида() + Символы.ПС + ОднострочныйТекст.Закрыть() + Символы.ПС + Символы.ПС;
	Если ВесьТекст Тогда
		ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(1, СтрДлина(ЭлементыФормы.ВстроенныйЯзык.ПолучитьТекст()) + 1);
		ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст = ВыходнойТекст;
		ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(1, 1);
	Иначе
		ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст = ВыходнойТекст;
		ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(НомерСтрокиКаретки, 1, НомерСтрокиКаретки, 1);
	КонецЕсли; 
	
КонецПроцедуры

Функция КомментарийОднострочногоВида()
	
	Возврат "// Однострочный код использован для ускорения. Выше расположен оригинал. Выполняйте изменения синхронно в обоих вариантах."
		+ " Преобразовано консолью кода из подсистемы ""Инструменты разработчика"" (http://devtool1c.ucoz.ru)";

КонецФункции

Процедура КоманднаяПанельВстроенныйЯзыкИзОднострочногоВида(Кнопка)

	НомерСтрокиКаретки = 0;
	ЭлементыФормы.ВстроенныйЯзык.ПолучитьГраницыВыделения(НомерСтрокиКаретки, 1, 1, 1);
	ВесьТекст = Ложь;
	Если СтрДлина(ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст) = 0 Тогда
		ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(1, СтрДлина(ЭлементыФормы.ВстроенныйЯзык.ПолучитьТекст()) + 1);
		ВесьТекст = Истина;
		НомерСтрокиКаретки = 1;
	КонецЕсли; 
	НовыйТекст = СтрЗаменить(ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст, " " + Символы.НПП, Символы.ПС);
	НовыйТекст = СтрЗаменить(НовыйТекст, КомментарийОднострочногоВида() + Символы.ПС, ""); 
	ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст = НовыйТекст;
	Если ВесьТекст Тогда
		ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(1, 1);
	Иначе
		ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(НомерСтрокиКаретки, 1, НомерСтрокиКаретки, 1);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранСпособВыполнения(Кнопка)
	
	Если Кнопка = Неопределено Или Не Кнопка.Доступность Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.КонтекстВыполнения.Кнопки.Клиент;
	КонецЕсли; 
	Для Каждого КнопкаСпособа Из ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.КонтекстВыполнения.Кнопки Цикл
		КнопкаСпособа.Пометка = Кнопка = КнопкаСпособа;
	КонецЦикла;
	ЭтаФорма.КонтекстВыполнения = Кнопка.Имя;
	мТекущаяСтрокаДереваАлгоритмов.КонтекстВыполнения = Кнопка.Имя;
	ДоступностьВнешнейОбработкиНаСервре = КонтекстВыполнения = "Клиент" Или Не ирКэш.ЛиПортативныйРежимЛкс();
	ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.ОткрытьВОтладчике.Доступность = ДоступностьВнешнейОбработкиНаСервре;
	ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.РежимВнешнейОбработки.Доступность = ДоступностьВнешнейОбработкиНаСервре;
	ЭлементыФормы.КоманднаяПанельВстроенныйЯзык.Кнопки.КонтекстВыполнения.Текст = "Контекст: " + Кнопка.Текст;
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	ПолеВстроенногоЯзыка.ЛиСерверныйКонтекст = КонтекстВыполнения <> "Клиент";

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкЦиклСИндикатором(Кнопка)
	
	ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст = "
	|Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(КоличествоПроходов, ""Обработка"");
	|Для каждого  из  Цикл
	|	ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
	|КонецЦикла;
	|ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	|";
	ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст = Символы.ПС;
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкЗагрузитьИзмененияИзВнешнейОбработки(Кнопка)
	
	СравнитьЗагрузитьИзмененияИзВнешнейОбработки(Ложь);
	
КонецПроцедуры

// Результат - Булево - Ложь - отмена действия, 
Функция СравнитьЗагрузитьИзмененияИзВнешнейОбработки(ПоказыватьСравнение = Истина)
	
	СлужебныйФайл = Новый Файл(ИмяСлужебногоФайла());
	ИнфоФайла = ирОбщий.ЗагрузитьЗначениеИзФайлаЛкс(СлужебныйФайл.ПолноеИмя);
	Если ИнфоФайла.ФайлКонсоли <> мИмяОткрытогоФайла Тогда
		Ответ = Вопрос("Отладочная внешняя обработка содержит несохраненный текст алгоритм из другого файла консоли. Открыть его, сохранив текущий файл консоли?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			Если ЭтаФорма.Модифицированность Тогда
				СохранитьВФайл();
			КонецЕсли; 
			ОткрытьФайл(ИнфоФайла.ФайлКонсоли);
		КонецЕсли; 
	КонецЕсли; 
	Если ИнфоФайла.ФайлКонсоли = мИмяОткрытогоФайла Тогда
		СтрокаАлгоритма = ДеревоАлгоритмов.Строки.Найти(ИнфоФайла.ИдентификаторАлгоритма, "Наименование");
		Если СтрокаАлгоритма = Неопределено Тогда
			Ответ = Вопрос("Алгоритм с наименованием """ + ИнфоФайла.ИдентификаторАлгоритма + """ не найден в списке. Перезаписать его несохраненный текст в отладочной внешней обработке?", РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли; 
		ЭлементыФормы.ДеревоАлгоритмов.ТекущаяСтрока = СтрокаАлгоритма;
	КонецЕсли; 
	Если мТекущаяСтрокаДереваАлгоритмов.Наименование = ИнфоФайла.ИдентификаторАлгоритма Тогда
		ТекстМодуля = ирОбщий.ТекстМодуляСгенерированнойВнешнейОбработки(ИмяФайлаВнешнейОбработки);
		ТекстИзОбработки = ирОбщий.СтрокаМеждуМаркерамиЛкс(ТекстМодуля, мМаркерНачалаАлгоритма + Символы.ПС, Символы.ПС + мМаркерКонцаАлгоритма, Ложь);
		ТекстИзПоля = ЭлементыФормы.ВстроенныйЯзык.ПолучитьТекст();
		Если ТекстИзОбработки <> ТекстИзПоля Тогда
			ЗагрузитьТекст = Истина;
			Если ПоказыватьСравнение Тогда
				ирОбщий.СравнитьЗначенияИнтерактивноЧерезXMLСтрокуЛкс(ТекстИзПоля, ТекстИзОбработки, Истина, "Консоль", "Файл");
				Ответ = Вопрос("Загрузить изменения отладочного файла в консоль? 
					|При ответе Нет изменения в отладочном файле будут утрачены.", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				КонецЕсли;
				ЗагрузитьТекст = Ответ = КодВозвратаДиалога.Да;
			КонецЕсли; 
			Если ЗагрузитьТекст Тогда
				НачальнаяСтрока = 0; НачальнаяКолонка = 0; КонечнаяСтрока = 0; КонечнаяКолонка = 0;
				ЭлементыФормы.ВстроенныйЯзык.ПолучитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
				ЭлементыФормы.ВстроенныйЯзык.УстановитьТекст(ТекстИзОбработки);
				ЭлементыФормы.ВстроенныйЯзык.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
				ЭтаФорма.Модифицированность = Истина;
				ОбновитьИнфоФайлаВнешнейОбработки(Истина);
			Иначе
				ДатаИзмененияВнешнейОбработки = ТекущаяДата();
				ОбновитьФайлВнешнейОбработки();
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	Возврат Истина;

КонецФункции

Процедура КоманднаяПанельВстроенныйЯзыкСравнитьЗагрузитьИзмененияИзВнешнейОбработки(Кнопка)
	
	СравнитьЗагрузитьИзмененияИзВнешнейОбработки(Истина);
	
КонецПроцедуры

Процедура ДействияФормыОткрытьИТС(Кнопка)
	
	ирОбщий.ОткрытьСсылкуИТСЛкс("https://its.1c.ru/db/v?doc#bookmark:dev:TI000000116");
	
КонецПроцедуры

Процедура ПараметрыВходПриИзменении(Элемент)
	
	ОбработатьИзменениеПометокПараметров();
	
КонецПроцедуры

Процедура ПараметрыВыходПриИзменении(Элемент)
	
	ОбработатьИзменениеПометокПараметров();
	
КонецПроцедуры

Процедура ПараметрыПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкСтатистикаMSSQLПоПоследнимЗапросам(Кнопка)
	
	Если мТекущаяСтрокаДереваАлгоритмов = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьСтатистикаMSSQLПоПоследнимЗапросамЛкс(мТекущаяСтрокаДереваАлгоритмов.ДатаВыполнения - мТекущаяСтрокаДереваАлгоритмов.Длительность, мТекущаяСтрокаДереваАлгоритмов.ДатаВыполнения);
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкСообщитьСразу(Кнопка)
	
	#Если Сервер И Не Сервер Тогда
		ирОбщий.СообщитьЛкс();
	#КонецЕсли
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык, "ирОбщий.СообщитьЛкс();");
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкВыделитьМетод(Кнопка)
	
	Перем НачСтрока, НачКолонка, КонСтрока, КонКолонка;
	#Если Сервер И Не Сервер Тогда
	    ПолеВстроенногоЯзыка = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	//Если Не ПолеВстроенногоЯзыка.ПроверитьПрограммныйКод() Тогда 
	//	Возврат;
	//КонецЕсли;
	мПлатформа.ИнициализацияОписанияМетодовИСвойств();
	Если Не ЗначениеЗаполнено(ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента.ВыделенныйТекст) Тогда
		ПолеВстроенногоЯзыка.ВыделитьВесьТекст();
	КонецЕсли; 
	НевидимоеПолеТекста = ирОбщий.СоздатьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой");
	#Если Сервер И Не Сервер Тогда
		ПараметрыВходаАлгоритма = Новый Структура;
	    НевидимоеПолеТекста = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
	#КонецЕсли
	НевидимоеПолеТекста.ИнициализироватьНеинтерактивно(,,,,, мПлатформа.СлужебноеПолеТекстовогоДокумента);
	НевидимоеПолеТекста.ПолеТекстовогоДокумента.УстановитьТекст(ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента.ПолучитьТекст());
	ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачСтрока, НачКолонка, КонСтрока, КонКолонка);
	НевидимоеПолеТекста.ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачСтрока, НачКолонка, КонСтрока, КонКолонка);
	ТекстНовогоМетода = НевидимоеПолеТекста.ПолеТекстовогоДокумента.ВыделенныйТекст;
	ТекстСмещения = ирОбщий.ПервыеНепечатныеСимволыЛкс(ТекстНовогоМетода);
	ЭтаФорма.Модифицированность = Истина;
	НевидимоеПолеТекста.ПолеТекстовогоДокумента.УстановитьГраницыВыделения(1, 1, НачСтрока, НачКолонка);
	ТекстДо = НевидимоеПолеТекста.ПолеТекстовогоДокумента.ВыделенныйТекст;
	НевидимоеПолеТекста.ПолеТекстовогоДокумента.УстановитьГраницыВыделения(КонСтрока, КонКолонка, Макс(1, НевидимоеПолеТекста.ПолеТекстовогоДокумента.КоличествоСтрок()), 300);
	ТекстПосле = НевидимоеПолеТекста.ПолеТекстовогоДокумента.ВыделенныйТекст;
	НевидимоеПолеТекста.ПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачСтрока, НачКолонка, КонСтрока, КонКолонка);
	НевидимоеПолеТекста.ОчиститьТаблицуСловЛокальногоКонтекста();
	ФормаНовогоМетода = ПолучитьФорму("ВыделениеМетода", ЭтаФорма);
	ЛиКорректныйФрагмент = Истина;
	ЗаглушкаВозврата = "";
	ИмяПараметраТипаВыхода = "";
	ИмяПеременнойЗаглушки = "Пустышка845234571";
	ИмяРезультатаВыражения = "Результат777";
	ТекстДо = НевидимоеПолеТекста.ЗаменитьОператорыВнешнегоПерехода(ТекстДо, , ЗаглушкаВозврата, ИмяПараметраТипаВыхода);
	ТекстПосле = НевидимоеПолеТекста.ЗаменитьОператорыВнешнегоПерехода(ТекстПосле, , ЗаглушкаВозврата, ИмяПараметраТипаВыхода);
	СтруктураПараметровКода = Новый Структура;
	МетаОбщиеМодули = Метаданные.ОбщиеМодули;
	ТипыВнешнихПереходов = Новый Структура;
	ТекстНовогоМетода = НевидимоеПолеТекста.ЗаменитьОператорыВнешнегоПерехода(ТекстНовогоМетода, ТипыВнешнихПереходов, ЗаглушкаВозврата, ИмяПараметраТипаВыхода);
	Если ТипыВнешнихПереходов.Количество() > 0 Тогда
		СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Добавить();
		СтрокаПараметра.Имя = ИмяПараметраТипаВыхода;
		ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаПараметра);
		СтрокаПараметра.Вход = Ложь;
		СтрокаПараметра.Выход = Истина;
		СтрокаПараметра.ТипЗначения = "Строка";
		СтрокаПараметра.Описание = "Служебный параметр для перехода после вызова метода";
	КонецЕсли;
	
	ПараметрыИзАлгоритма(ТекстДо + ТекстНовогоМетода + ТекстПосле, КонтекстВыполнения = "Клиент", НевидимоеПолеТекста, ЛиКорректныйФрагмент,, Истина);
	Если Не ЛиКорректныйФрагмент Тогда
		Возврат;
	КонецЕсли; 
	
	// Добавим переменные, которые не определены в выделенном фрагменте текста, как входные параметры
	ПараметрыВходаАлгоритма = ПараметрыИзАлгоритма(ТекстНовогоМетода, КонтекстВыполнения = "Клиент", НевидимоеПолеТекста, ЛиКорректныйФрагмент);
	ЗаглушкаТекстаМетода = "";
	ЭтоВыражение = Ложь;
	Если Не ЛиКорректныйФрагмент Тогда
		// Выделено выражение
		ЭтоВыражение = Истина;
		ЗаглушкаТекстаМетода = "0";
		ПараметрыВходаАлгоритма = ПараметрыИзАлгоритма("ми7ва7в9вц3ая = " + ТекстНовогоМетода, КонтекстВыполнения = "Клиент", НевидимоеПолеТекста, ЛиКорректныйФрагмент);
		Если Не ЛиКорректныйФрагмент Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	НевидимоеПолеТекста.ПолеТекстовогоДокумента.УстановитьТекст(ТекстДо);
	ФормаНовогоМетода.ТекстСмещения = ТекстСмещения;
	Для Каждого КлючИЗначение Из ПараметрыВходаАлгоритма Цикл
		СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Добавить();
		СтрокаПараметра.Имя = КлючИЗначение.Ключ;
		ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаПараметра);
		СтрокаПараметра.Вход = Истина;
		// TODO сделать более универсальное экранирование конструктора "Новый <ИмяПеременной>"
		Пока НевидимоеПолеТекста.НайтиПоказатьСловоВТексте("Новый " + КлючИЗначение.Ключ) Цикл
			НевидимоеПолеТекста.ПолеТекстовогоДокумента.ВыделенныйТекст = ИмяПеременнойЗаглушки;
		КонецЦикла;
		Пока НевидимоеПолеТекста.НайтиПоказатьСловоВТексте(КлючИЗначение.Ключ) Цикл
			НевидимоеПолеТекста.ПолеТекстовогоДокумента.ВыделенныйТекст = ИмяПеременнойЗаглушки;
		КонецЦикла;
	КонецЦикла;
	ТекстДоПереименованный = НевидимоеПолеТекста.ПолеТекстовогоДокумента.ПолучитьТекст();
	
	// Добавим внутренние переменные, чтобы пользователь мог включить их передачу на выход
	НевидимоеПолеТекста.ПолеТекстовогоДокумента.УстановитьТекст(ТекстНовогоМетода);
	НевидимоеПолеТекста.ЗаполнитьЛокальныеСвойстваИМетодыПоТексту(,,,, Истина);
	СтрокиЛокальныхПеременных = НевидимоеПолеТекста.ТаблицаСлов.НайтиСтроки(Новый Структура("ТипСлова, Определение", "Свойство", "Статистический"));
	Для Каждого СтрокаПеременной Из СтрокиЛокальныхПеременных Цикл
		Если КонтекстВыполнения <> "Клиент" И МетаОбщиеМодули.Найти(СтрокаПеременной.НСлово) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если ирОбщий.СтрокиРавныЛкс(СтрокаПеременной.НСлово, ирОбщий.ПервыйФрагментЛкс(ЗаглушкаВозврата, "=", Ложь)) Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Найти(СтрокаПеременной.НСлово, "НИмя");
		Если СтрокаПараметра = Неопределено Тогда
			СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Добавить();
			СтрокаПараметра.Имя = СтрокаПеременной.Слово;
			ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаПараметра);
		КонецЕсли; 
	КонецЦикла;
	
	// Добавим переменные, которые не определены начиная с первой выделеной строки и до конца текста, как свозные параметры
	ПараметрыСквозныеАлгоритма = ПараметрыИзАлгоритма(ТекстДоПереименованный + ТекстНовогоМетода + ТекстПосле, КонтекстВыполнения = "Клиент", НевидимоеПолеТекста, ЛиКорректныйФрагмент,
		ИмяПеременнойЗаглушки);
	Если Не ЛиКорректныйФрагмент Тогда
		Возврат;
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
		ПараметрыСквозныеАлгоритма = Новый Структура;
	#КонецЕсли
	Для Каждого КлючИЗначение Из ПараметрыСквозныеАлгоритма Цикл
		СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Найти(НРег(КлючИЗначение.Ключ), "НИмя");
		Если СтрокаПараметра = Неопределено Тогда
			СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Добавить();
			СтрокаПараметра.Имя = КлючИЗначение.Ключ;
			ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаПараметра);
		КонецЕсли; 
		СтрокаПараметра.Вход = Истина;
		СтрокаПараметра.Выход = Истина;
	КонецЦикла;
	
	// Добавим переменные, которые не определены в следующем тексте, как параметры выхода
	ПараметрыВыходаАлгоритма = ПараметрыИзАлгоритма(ТекстДоПереименованный + ЗаглушкаТекстаМетода + ТекстПосле, КонтекстВыполнения = "Клиент", НевидимоеПолеТекста,, ИмяПеременнойЗаглушки);
	#Если Сервер И Не Сервер Тогда
		ПараметрыВыходаАлгоритма = Новый Структура;
	#КонецЕсли
	Если ЭтоВыражение Тогда
		ПараметрыВыходаАлгоритма.Вставить(ИмяРезультатаВыражения);
	КонецЕсли; 
	Для Каждого КлючИЗначение Из ПараметрыВыходаАлгоритма Цикл
		СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Найти(НРег(КлючИЗначение.Ключ), "НИмя");
		Если СтрокаПараметра = Неопределено Тогда
			СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Добавить();
			СтрокаПараметра.Имя = КлючИЗначение.Ключ;
			ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаПараметра);
		КонецЕсли; 
		СтрокаПараметра.Выход = Истина;
	КонецЦикла;
	
	// Удалим переменные, которые не определены в оригнальном тексте
	ПараметрыВыходаЛожные = ПараметрыИзАлгоритма(ТекстДо + ТекстНовогоМетода + ТекстПосле, КонтекстВыполнения = "Клиент", НевидимоеПолеТекста);
	#Если Сервер И Не Сервер Тогда
		ПараметрыВыходаЛожные = Новый Структура;
	#КонецЕсли
	Для Каждого КлючИЗначение Из ПараметрыВыходаЛожные Цикл
		Если ПараметрыВходаАлгоритма.Свойство(КлючИЗначение.Ключ) Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаПараметра = ФормаНовогоМетода.ТаблицаПараметров.Найти(НРег(КлючИЗначение.Ключ), "НИмя");
		Если СтрокаПараметра <> Неопределено Тогда
			ФормаНовогоМетода.ТаблицаПараметров.Удалить(СтрокаПараметра);
		КонецЕсли; 
	КонецЦикла;
	
	//НевидимоеПолеТекста.ПолеТекстовогоДокумента.УстановитьТекст();
	Для Каждого СтрокаПараметра Из ФормаНовогоМетода.ТаблицаПараметров Цикл
		СтрокаПараметра.Обязательный = СтрокаПараметра.Вход;
		ЗаполнитьСтрокуВынесенногоПараметра(СтрокаПараметра);
		Если Не ЗначениеЗаполнено(СтрокаПараметра.ТипЗначения) Тогда
			СтрокаПараметра.ТипЗначения = НевидимоеПолеТекста.ПредставлениеМассиваСтруктурТипов(НевидимоеПолеТекста.ОпределитьТипЗначенияКонтекста(СтрокаПараметра.Имя, ТекстДо + ТекстНовогоМетода));
		КонецЕсли; 
	КонецЦикла;
	//ЗаменаЗаглушки = Символы.ПС + ТекстСмещения + "Возврат";
	Если ЭтоВыражение Тогда
		ТекстНовогоМетода = ИмяРезультатаВыражения + " = " + ТекстНовогоМетода;
	КонецЕсли; 
	ЗаменаЗаглушкиВозврата = "Возврат";
	ТекстНовогоМетода = СтрЗаменить(ТекстНовогоМетода, ЗаглушкаВозврата + "=", ЗаменаЗаглушкиВозврата);
	ЗаменаЗаглушкиВозврата = ЗаменаЗаглушкиВозврата + " Неопределено";
	ТекстНовогоМетода = СтрЗаменить(ТекстНовогоМетода, ЗаглушкаВозврата, ЗаменаЗаглушкиВозврата);
	ФормаНовогоМетода.Имя = ирОбщий.ИдентификаторИзПредставленияЛкс(мТекущаяСтрокаДереваАлгоритмов.Наименование);
	ФормаНовогоМетода.ЭлементыФормы.ПолеТела.УстановитьТекст(ТекстНовогоМетода);
	ФормаНовогоМетода.РежимВыбора = Истина;
	ФормаНовогоМетода.ЭтоВыражение = ЭтоВыражение;
	ФормаНовогоМетода.ИмяПараметраТипаВыхода = ИмяПараметраТипаВыхода;
	ФормаНовогоМетода.ТипыВнешнихПереходов = ТипыВнешнихПереходов;
	РезультатФормы = ФормаНовогоМетода.ОткрытьМодально();
	Если РезультатФормы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьТекстЛкс(ФормаНовогоМетода.ПолноеОпределение,  "Метод " + ФормаНовогоМетода.Имя, "ВстроенныйЯзык");
	ТекстВставки = ФормаНовогоМетода.ТекстВставки;
	ПолеВстроенногоЯзыка.УстановитьВыделенныйТекст(ТекстВставки);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуВынесенногоПараметра(Знач СтрокаПараметра)
	
	СтрокаЭтогоАлгоритмаПараметры = Параметры.Найти(НРег(СтрокаПараметра.Имя), "НИмя");
	Если СтрокаЭтогоАлгоритмаПараметры <> Неопределено Тогда
		СтрокаПараметра.Описание = СтрокаЭтогоАлгоритмаПараметры.Комментарий;
		СтрокаПараметра.Позиция = СтрокаЭтогоАлгоритмаПараметры.Позиция;
		СтрокаПараметра.ТипЗначения = СтрокаЭтогоАлгоритмаПараметры.ИмяТипаЗначения;
		ТипЗначения = ТипЗнч(СтрокаЭтогоАлгоритмаПараметры.Значение);
		Если Ложь
			Или ТипЗначения = Тип("Строка")
			Или ТипЗначения = Тип("Число")
			Или ТипЗначения = Тип("Булево")
			Или ТипЗначения = Тип("Неопределено")
			Или ТипЗначения = Тип("Null")
		Тогда
			СтрокаПараметра.Значение = СтрокаЭтогоАлгоритмаПараметры.Значение;
		КонецЕсли; 
		Если СтрокаПараметра.Значение <> Неопределено Тогда
			СтрокаПараметра.Обязательный = Ложь;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Функция ПараметрыИзАлгоритма(Знач ТекстДляПроверки, Знач ЭтоКлиент, Знач НевидимоеПоле, выхКорректныйФрагмент = Истина, ИгнорироватьПеременную = "", ПоказыватьСтрокуОшибки = Ложь) Экспорт 
	
	#Если Сервер И Не Сервер Тогда
		НевидимоеПоле = Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать();
		ПолеВстроенногоЯзыка = НевидимоеПоле;
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	СтруктураПараметровКода = Новый Структура;
	МетаОбщиеМодули = Метаданные.ОбщиеМодули;
	СтартоваяСтрока = 0;
	НевидимоеПоле.ПолеТекстовогоДокумента.УстановитьТекст(ТекстДляПроверки);
	Пока Истина Цикл
		ИнформацияОбОшибке = НевидимоеПоле.ПолучитьИнформациюОбОшибке(, СтартоваяСтрока, , , Истина);
		НеопределенныйМетод = мПлатформа.ИмяНеопределенногоМетодаИзИнформацииОбОшибке(ИнформацияОбОшибке);
		Если НеопределенныйМетод <> Неопределено Тогда
			КоординатыОшибки = НевидимоеПоле.КоординатыОшибки(ИнформацияОбОшибке, СтартоваяСтрока);
			НачальнаяКолонка = КоординатыОшибки.НомерКолонки;
			НевидимоеПоле.ПолеТекстовогоДокумента.УстановитьГраницыВыделения(КоординатыОшибки.НомерСтроки, НачальнаяКолонка, КоординатыОшибки.НомерСтроки, НачальнаяКолонка);
			НевидимоеПоле.ПолеТекстовогоДокумента.ВыделенныйТекст = "ирОбщий.";
			Продолжить;
		КонецЕсли; 
		НеопределеннаяПеременная = мПлатформа.ИмяНеопределеннойПеременнойИзИнформацииОбОшибке(ИнформацияОбОшибке);
		Если Не ЗначениеЗаполнено(НеопределеннаяПеременная) Тогда
			выхКорректныйФрагмент = ИнформацияОбОшибке = Неопределено;
			Если Не выхКорректныйФрагмент Тогда
				// Сообщим ошибку
				Если ПоказыватьСтрокуОшибки Тогда
					ЭтаФорма.ТекущийЭлемент = ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента;
					ирОбщий.ПоказатьОшибкуВЗапросеИлиПрограммномКодеЛкс(ПолеВстроенногоЯзыка.ПолеТекстовогоДокумента, СтартоваяСтрока,,,, ИнформацияОбОшибке);
				Иначе
					НевидимоеПоле.ПроверитьПрограммныйКод();
				КонецЕсли; 
			КонецЕсли; 
			Прервать;
		КонецЕсли;
		Если Не ЭтоКлиент И МетаОбщиеМодули.Найти(НеопределеннаяПеременная) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		Если Ложь
			Или Не ЗначениеЗаполнено(ИгнорироватьПеременную) 
			Или Не ирОбщий.СтрокиРавныЛкс(ИгнорироватьПеременную, НеопределеннаяПеременная) 
		Тогда
			СтруктураПараметровКода.Вставить(НеопределеннаяПеременная);
		КонецЕсли; 
		НевидимоеПоле.ПолеТекстовогоДокумента.ВставитьСтроку(1, НеопределеннаяПеременная + "=0;");
		СтартоваяСтрока = СтартоваяСтрока + 1;
	КонецЦикла;
	Возврат СтруктураПараметровКода;

КонецФункции

Процедура КоманднаяПанельВстроенныйЯзыкЕсли(Кнопка)
	
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык,
	"Если  Тогда
	|	" + ирОбщий.ДобавитьМногострочнуюСтрокуВТекстЛкс("", ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст, Символы.Таб) + "
	|КонецЕсли;");

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкЦиклДляКаждого(Кнопка)
	
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык,
	"Для Каждого  Из  Цикл
	|	" + ирОбщий.ДобавитьМногострочнуюСтрокуВТекстЛкс("", ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст, Символы.Таб) + "
	|КонецЦикла;");

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкЦиклДляПо(Кнопка)
	
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык,
	"Для Счетчик = 1 По  Цикл
	|	" + ирОбщий.ДобавитьМногострочнуюСтрокуВТекстЛкс("", ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст, Символы.Таб) + "
	|КонецЦикла;");
	
КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкЦиклПока(Кнопка)
	
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык,
	"Пока  Цикл
	|	" + ирОбщий.ДобавитьМногострочнуюСтрокуВТекстЛкс("", ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст, Символы.Таб) + "
	|КонецЦикла;");

КонецПроцедуры

Процедура КоманднаяПанельВстроенныйЯзыкПопытка(Кнопка)
	
	ирОбщий.ПолеТекстовогоДокументаУстановитьВставитьТекстИПереносСтрокиЛкс(ЭлементыФормы.ВстроенныйЯзык,
	"Попытка
	|	" + ирОбщий.ДобавитьМногострочнуюСтрокуВТекстЛкс("", ЭлементыФормы.ВстроенныйЯзык.ВыделенныйТекст, Символы.Таб) + "
	|Исключение
	|КонецПопытки;");
	
КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт 
	
	ирОбщий.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирКонсольКода.Форма.Форма");

мПлатформа = ирКэш.Получить();
мРежимРедактора = Ложь;
мАлгоритмЗагруженВКонсоль = Ложь;
РежимВнешнейОбработки = Ложь;
НомерВставкиЗамера = 0;
АвтосохранениеФайлаВосстановления = Истина;
//ДатаИзмененияВнешнейОбработки = Дата("00010101");
//ДатаИзмененияВнешнейОбработки = ТекущаяДата() + 100000;
АвтоПараметрыВыхода = ЭтаФорма.ЭлементыФормы.КоманднаяПанельПараметры.Кнопки.АвтоПараметрыВыхода.Пометка;
Параметры.Колонки.Добавить("Значение");
Параметры.Колонки.Добавить("НИмя");
мСписокВнешнихПараметров = Новый СписокЗначений; 
мМаркерНачалаАлгоритма = "// Текст НАЧАЛО";
мМаркерКонцаАлгоритма = "// Текст КОНЕЦ";
мПлатформа.ПолучитьФайлОткрывателя1С();
мСтруктураВосстановления = ирОбщий.ПолучитьСтруктуруВосстановленияКонсолиЛкс("irCodeConsole");
ЭлементыФормы.КП_Дерево.Кнопки.Сохранить.Доступность = Не ирКэш.ЛиПортативныйРежимЛкс();
ЭлементыФормы.КП_Дерево.Кнопки.Загрузить.Доступность = Не ирКэш.ЛиПортативныйРежимЛкс();
мАнализТехножурнала = ирКэш.ПолучитьАнализТехножурналаЛкс();
#Если Сервер И Не Сервер Тогда
	мАнализТехножурнала = Обработки.ирАнализТехножурнала.Создать();
#КонецЕсли
// Расширим доступные типы значений параметров внешними источниками данных
Параметры.Колонки.ПредставлениеЗначения.Имя = "_";
НовыйТипЗначения = Новый ОписаниеТипов(Параметры.Колонки._.ТипЗначения, ирОбщий.ОписаниеТиповВсеСсылкиЛкс().Типы());
Параметры.Колонки.Добавить("ПредставлениеЗначения", НовыйТипЗначения);
Параметры.Колонки.Удалить("_");
ДеревоАлгоритмов.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
ДеревоАлгоритмов.Колонки.Добавить("ТекстАлгоритма", Новый ОписаниеТипов("Строка"));
ДеревоАлгоритмов.Колонки.Добавить("Параметры");
ДеревоАлгоритмов.Колонки.Добавить("НачальнаяСтрока", Новый ОписаниеТипов("Число"));
ДеревоАлгоритмов.Колонки.Добавить("НачальнаяКолонка", Новый ОписаниеТипов("Число"));
ДеревоАлгоритмов.Колонки.Добавить("КонечнаяСтрока", Новый ОписаниеТипов("Число"));
ДеревоАлгоритмов.Колонки.Добавить("КонечнаяКолонка", Новый ОписаниеТипов("Число"));

