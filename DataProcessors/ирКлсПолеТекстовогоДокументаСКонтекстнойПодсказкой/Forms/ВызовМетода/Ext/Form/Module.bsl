Перем ВКОбщая;
Перем СтруктураТипаКонтекста Экспорт; 
Перем ИмяМетода Экспорт;
Перем НомерПараметра;
Перем НачалоБездействия;
Перем КонечнаяКолонка;
Перем КонечнаяСтрока;
Перем НачальнаяКолонка;
Перем НачальнаяСтрока;

Процедура ОбновлениеОтображения()
	
	Если ВКОбщая <> Неопределено Тогда
		Активизировать();
		ВКОбщая.ПереместитьОкноВПозициюКаретки();
		ВКОбщая = Неопределено;
		ФормаВладелец.Активизировать();
	КонецЕсли; 

КонецПроцедуры

// Надо вызывать до начала открытия (до ПередОткрытием), иначе недоступность формы-владельца будет сброшена
Процедура ЗапомнитьПозициюКаретки() Экспорт 
	
	Если Открыта() Тогда
		Возврат;
	КонецЕсли; 
	ВКОбщая = ирОбщий.НоваяВКОбщаяЛкс();
	ОбработкаПрерыванияПользователя();
	Если ВКОбщая <> Неопределено Тогда
		ВКОбщая.ПолучитьПозициюКаретки();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ирОбщий.Форма_ПриОткрытииЛкс(ЭтаФорма);
	ЭтаФорма.Автозакрытие = Истина;
	Если МодальныйРежим Тогда
		ЭлементыФормы.Автозакрытие.Видимость = Ложь;
	КонецЕсли; 
	НачалоБездействия = ТекущаяДата();
	ПриЛюбомОтрытии();
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ПриЛюбомОтрытии();
	
КонецПроцедуры

Процедура ПриЛюбомОтрытии()
	
	ОтключитьОбработчикОжидания("ОбновитьИлиЗакрытьФорму");
	ОбновитьИлиЗакрытьФорму();

КонецПроцедуры

Процедура ОбновитьИлиЗакрытьФорму()
	Если Ложь
		Или ФормаВладелец = Неопределено 
		Или ФормаПодсказки <> Неопределено И ФормаПодсказки.Открыта()
	Тогда
		Если Открыта() Тогда 
			Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	РезультатРазбора = ПолучитьТекущийКонтекстПараметра();
	ТаблицаСтруктурТиповКонтекста = ОпределитьТипЗначенияКонтекста(РезультатРазбора.ОбъектноеВыражение, " " + мТекстДляПоискаОпределения, мПредшествующийТекст);
	СтруктураТипаКонтекста = ТаблицаСтруктурТиповКонтекста[0];
	Если СтруктураТипаКонтекста = Неопределено Или СтруктураТипаКонтекста.СтрокаОписания = Неопределено Тогда
		Если Открыта() Тогда 
			Если Автозакрытие Тогда
				Закрыть();
			Иначе
				ПодключитьОбработчикОжиданияОбновления();
			КонецЕсли;
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭтаФорма.Заголовок,, мИмяМетода, ": ");
	СтрокаОписания = СтруктураТипаКонтекста.СтрокаОписания;
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	Если Истина
		И Автозакрытие
		И Не ВводДоступен()
		И (Ложь
			Или мНомерПараметра = Неопределено 
			Или ТекущаяДата() - НачалоБездействия > 2) // 3 секунды простоя
	Тогда
		Закрыть();
		Возврат;
	КонецЕсли; 
	Если Не ВводДоступен() Или Не Открыта() Тогда
		ТаблицаПараметров.Очистить();
		Если СтрокаОписания.Владелец().Колонки.Найти("ЛиЭкспорт") <> Неопределено Тогда
			ТекущийВариант = Неопределено;
			СтрокиПараметров = СтрокаОписания.Параметры;
			Если СтрокиПараметров <> Неопределено Тогда
				ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтрокиПараметров, ТаблицаПараметров);
			КонецЕсли;
			ЭтаФорма.ОписаниеМетода = СокрЛ(СтрокаОписания.Описание);
			ОбработкаТекста = ирКэш.ВычислительРегулярныхВыраженийЛкс();
			ОбработкаТекста.Global = Истина;
			ОбработкаТекста.Pattern = "(\n\s+)";
			Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
				Если СтрокаПараметра.Знач = Истина Тогда
					СтрокаПараметра.Знач = "Знач";
				Иначе
					СтрокаПараметра.Знач = "";
				КонецЕсли; 
				СтрокаПараметра.Описание = СокрЛ(ОбработкаТекста.Replace(СтрокаПараметра.Описание, Символы.ПС));
			КонецЦикла;
			ВариантыСинтаксиса.Очистить();
			ВариантыСинтаксиса.Добавить();
			УстановитьТекущийПараметр();
		Иначе
			ЗагрузитьВариантМетода();
		КонецЕсли;
		ЕстьПолезнаяИнформация = ТаблицаПараметров.Количество() > 0;
		Если Истина
			И ЕстьПолезнаяИнформация
			И Не ЗначениеЗаполнено(ТаблицаПараметров[0].Имя) 
		Тогда
			// Функции языка запросов. Для них нет стандарта описания параметров. Поэтому в общей таблице параметров для каждой добавляется безымянный параметр
			ЕстьПолезнаяИнформация = Ложь;
			ТаблицаПараметров[0].Имя = "<Состав параметров неизвестен>";
		КонецЕсли; 
		Если Истина
			И Не ЕстьПолезнаяИнформация 
			И Автозакрытие
			И Не ВводДоступен()
		Тогда 
			Закрыть();
			Возврат;
		КонецЕсли; 
		НеобходимаяВысота = 19 * (ТаблицаПараметров.Количество() + 3); // одну строку добавляем на случай превышения количеством запятых количества формальных параметров
		Если Ложь
			Или Не Открыта()
			Или Открыта() И Высота < НеобходимаяВысота 
		Тогда
			ЭтаФорма.Высота = НеобходимаяВысота;
		КонецЕсли;
		ЭлементыФормы.ВариантПредыдущий.Доступность = ВариантыСинтаксиса.Количество() > 1;
		ЭлементыФормы.ВариантСледующий.Доступность = ВариантыСинтаксиса.Количество() > 1;
		Если Ложь
			Или НачальнаяСтрока <> мНачальнаяСтрока 
			Или НачальнаяКолонка <> мНачальнаяКолонка 
			Или КонечнаяСтрока <> мКонечнаяСтрока
			Или КонечнаяКолонка <> мКонечнаяКолонка
		Тогда
			//Сообщить("изменилось положение курсора " + ТекущаяДата());
			НачалоБездействия = ТекущаяДата();
			НачальнаяСтрока = мНачальнаяСтрока;
			НачальнаяКолонка = мНачальнаяКолонка;
			КонечнаяСтрока = мКонечнаяСтрока;
			КонечнаяКолонка = мКонечнаяКолонка;
		КонецЕсли; 
	КонецЕсли; 
	ПодключитьОбработчикОжиданияОбновления();
	
КонецПроцедуры

Процедура УстановитьТекущийПараметр()
	
	Если мНомерПараметра > 0 Тогда
		Если ТаблицаПараметров.Количество() >= мНомерПараметра Тогда
			НоваяТекущаяСтрока = ТаблицаПараметров[мНомерПараметра - 1];
		Иначе
			НоваяТекущаяСтрока = ТаблицаПараметров.Добавить();
			НоваяТекущаяСтрока.Имя = "?";
		КонецЕсли; 
		ЭлементыФормы.ТаблицаПараметров.ТекущаяСтрока = НоваяТекущаяСтрока;
	КонецЕсли;
	ЭтаФорма.НадписьКоличествоВариантов = "из " + ВариантыСинтаксиса.Количество();

КонецПроцедуры

Процедура ЗагрузитьВариантМетода()
	
	ТаблицаПараметров.Очистить();
	СтрокаОписания = СтруктураТипаКонтекста.СтрокаОписания;
	Отбор = Новый Структура;
	Отбор.Вставить("ТипКонтекста", СтрокаОписания.ТипКонтекста);
	Отбор.Вставить("Слово", мИмяМетода);
	Отбор.Вставить("ЯзыкПрограммы", ЯзыкПрограммы);
	СтрокиПараметров = мПлатформа.ТаблицаПараметров.Скопировать(Отбор);
	#Если Сервер И Не Сервер Тогда
		СтрокиПараметров = Новый ТаблицаЗначений;
	#КонецЕсли
	КопияПараметров = СтрокиПараметров.Скопировать();
	КопияПараметров.Свернуть("ВариантСинтаксиса");
	ВариантыСинтаксиса.ЗагрузитьЗначения(КопияПараметров.ВыгрузитьКолонку(0));
	ВариантыСинтаксиса.СортироватьПоЗначению();
	Если Истина
		И ВариантыСинтаксиса.Количество() > 0
		И ВариантыСинтаксиса.НайтиПоЗначению(ТекущийВариант) = Неопределено 
	Тогда
		ТекущийВариант = ВариантыСинтаксиса[0].Значение;
	КонецЕсли; 
	Для Каждого СтрокаПараметраИсточник Из СтрокиПараметров.НайтиСтроки(Новый Структура("ВариантСинтаксиса", ТекущийВариант)) Цикл
		СтрокаПараметраПриемник = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметраПриемник, СтрокаПараметраИсточник); 
		СтрокаПараметраПриемник.Имя = ПодготовитьИмяПараметраМетода(СтрокаПараметраИсточник.Параметр);
		Если Истина
			И Не ЗначениеЗаполнено(СтрокаПараметраПриемник.Значение)
			И СтрокаПараметраИсточник.Необязательный 
		Тогда
			СтрокаПараметраПриемник.Значение = "?";
		КонецЕсли; 
	КонецЦикла;
	УстановитьТекущийПараметр();

КонецПроцедуры

Процедура ПодключитьОбработчикОжиданияОбновления()
	
	ПодключитьОбработчикОжидания("ОбновитьИлиЗакрытьФорму", 1, Истина);

КонецПроцедуры

Процедура ТаблицаПараметровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	ОформитьЯчейкуТипаЗначения(ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ТаблицаПараметровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ЭтаФорма.Закрыть();

КонецПроцедуры

Процедура ТаблицаПараметровПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	ТекущаяСтрока = ЭлементыФормы.ТаблицаПараметров.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Значение) Тогда
			ЭлементыФормы.НадписьОбязательность.Заголовок = "Необяз.";
		Иначе
			ЭлементыФормы.НадписьОбязательность.Заголовок = "Обяз.";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТипЗначенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ОткрытьЗначениеЛкс(ирОбщий.СтрРазделитьЛкс(Элемент.Значение, ",", Истина));
	
КонецПроцедуры

Процедура ВариантСледующийНажатие(Элемент)
	
	ЭлементСписка = ВариантыСинтаксиса.НайтиПоЗначению(ТекущийВариант);
	Индекс = ВариантыСинтаксиса.Индекс(ЭлементСписка);
	Если ВариантыСинтаксиса.Количество() - 1 > Индекс Тогда
		Индекс = Индекс + 1;
	Иначе
		Индекс = 0;
	КонецЕсли; 
	ТекущийВариант = ВариантыСинтаксиса[Индекс].Значение;
	ЗагрузитьВариантМетода();
	
КонецПроцедуры

Процедура ВариантПредыдущийНажатие(Элемент)
	
	ЭлементСписка = ВариантыСинтаксиса.НайтиПоЗначению(ТекущийВариант);
	Индекс = ВариантыСинтаксиса.Индекс(ЭлементСписка);
	Если Индекс > 0 Тогда
		Индекс = Индекс - 1;
	Иначе
		Индекс = ВариантыСинтаксиса.Количество() - 1;
	КонецЕсли; 
	ТекущийВариант = ВариантыСинтаксиса[Индекс].Значение;
	ЗагрузитьВариантМетода();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ирОбщий.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Форма.ВызовМетода");
