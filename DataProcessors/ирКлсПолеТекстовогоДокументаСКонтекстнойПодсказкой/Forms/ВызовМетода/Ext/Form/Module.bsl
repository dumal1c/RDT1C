Перем ВКОбщая;
Перем СтруктураТипаКонтекста Экспорт; 
Перем ИмяМетода Экспорт;
Перем НомерПараметра;
Перем НачалоБездействия;
Перем КонечнаяКолонка;
Перем КонечнаяСтрока;
Перем НачальнаяКолонка;
Перем НачальнаяСтрока;

Процедура ОбновлениеОтображения()
	
	Если ВКОбщая <> Неопределено Тогда
		Активизировать();
		ВКОбщая.ПереместитьОкноВПозициюКаретки();
		ВКОбщая = Неопределено;
		ФормаВладелец.Активизировать();
	КонецЕсли; 

КонецПроцедуры

// Надо вызывать до начала открытия (до ПередОткрытием), иначе недоступность формы-владельца будет сброшена
Процедура ЗапомнитьПозициюКаретки() Экспорт 
	
	Если Открыта() Тогда
		Возврат;
	КонецЕсли; 
	ВКОбщая = ирОбщий.НоваяВКОбщаяЛкс();
	ОбработкаПрерыванияПользователя();
	Если ВКОбщая <> Неопределено Тогда
		ВКОбщая.ПолучитьПозициюКаретки();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭтаФорма.Автозакрытие = Истина;
	Если МодальныйРежим Тогда
		ЭлементыФормы.Автозакрытие.Видимость = Ложь;
	КонецЕсли; 
	НачалоБездействия = ТекущаяДата();
	ПриЛюбомОтрытии();
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ПриЛюбомОтрытии();
	
КонецПроцедуры

Процедура ПриЛюбомОтрытии()
	
	ОтключитьОбработчикОжидания("ОбновитьИлиЗакрытьФорму");
	ОбновитьИлиЗакрытьФорму();

КонецПроцедуры

Процедура ОбновитьИлиЗакрытьФорму()
	Если ФормаВладелец = Неопределено Тогда
		Если Открыта() Тогда 
			Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	РезультатРазбора = ПолучитьТекущийКонтекстПараметра();
	ТаблицаСтруктурТиповКонтекста = ОпределитьТипЗначенияКонтекста(РезультатРазбора.ОбъектноеВыражение, " " + мТекстДляПоискаОпределения, мПредшествующийТекст);
	СтруктураТипаКонтекста = ТаблицаСтруктурТиповКонтекста[0];
	Если СтруктураТипаКонтекста = Неопределено Или СтруктураТипаКонтекста.СтрокаОписания = Неопределено Тогда
		Если Открыта() Тогда 
			Если Автозакрытие Тогда
				Закрыть();
			Иначе
				ПодключитьОбработчикОжиданияОбновления();
			КонецЕсли;
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭтаФорма.Заголовок,, мИмяМетода, ": ");
	СтрокаОписания = СтруктураТипаКонтекста.СтрокаОписания;
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	Если Истина
		И Автозакрытие
		И Не ВводДоступен()
		И (Ложь
			Или мНомерПараметра = Неопределено 
			Или ТекущаяДата() - НачалоБездействия > 2) // 3 секунды простоя
	Тогда
		Закрыть();
		Возврат;
	КонецЕсли; 
	Если Не ВводДоступен() Или Не Открыта() Тогда
		ТаблицаПараметров.Очистить();
		Отбор = Новый Структура;
		Если СтрокаОписания.Владелец().Колонки.Найти("ЛиЭкспорт") <> Неопределено Тогда
			СтрокиПараметров = СтрокаОписания.Параметры;
			Если СтрокиПараметров <> Неопределено Тогда
				ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтрокиПараметров, ТаблицаПараметров);
			КонецЕсли;
			ЭтаФорма.ОписаниеМетода = СтрокаОписания.Описание;
			ОбработкаТекста = ирКэш.ВычислительРегулярныхВыраженийЛкс();
			ОбработкаТекста.Global = Истина;
			ОбработкаТекста.Pattern = "(\n\s+)";
			Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
				Если СтрокаПараметра.Знач = Истина Тогда
					СтрокаПараметра.Знач = "Знач";
				Иначе
					СтрокаПараметра.Знач = "";
				КонецЕсли; 
				СтрокаПараметра.Описание = ОбработкаТекста.Replace(СтрокаПараметра.Описание, Символы.ПС);
			КонецЦикла;
		Иначе
			Отбор.Вставить("ТипКонтекста", СтрокаОписания.ТипКонтекста);
			Отбор.Вставить("Слово", мИмяМетода);
			Отбор.Вставить("ЯзыкПрограммы", ЯзыкПрограммы);
			СтрокиПараметров = мПлатформа.ТаблицаПараметров.Скопировать(Отбор);
			Для Каждого СтрокаПараметраИсточник Из СтрокиПараметров Цикл
				СтрокаПараметраПриемник = ТаблицаПараметров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПараметраПриемник, СтрокаПараметраИсточник); 
				СтрокаПараметраПриемник.Имя = ПодготовитьИмяПараметраМетода(СтрокаПараметраИсточник.Параметр);
				Если СтрокаПараметраИсточник.Необязательный Тогда
					СтрокаПараметраПриемник.Значение = "?";
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		НеобходимаяВысота = 19 * (ТаблицаПараметров.Количество() + 2); // одну строку добавляем на случай превышения количеством запятых количества формальных параметров
		Если Ложь
			Или Не Открыта()
			Или Открыта() И Высота < НеобходимаяВысота 
		Тогда
			ЭтаФорма.Высота = НеобходимаяВысота;
		КонецЕсли; 
		Если Ложь
			Или НачальнаяСтрока <> мНачальнаяСтрока 
			Или НачальнаяКолонка <> мНачальнаяКолонка 
			Или КонечнаяСтрока <> мКонечнаяСтрока
			Или КонечнаяКолонка <> мКонечнаяКолонка
		Тогда
			НачалоБездействия = ТекущаяДата();
			НачальнаяСтрока = мНачальнаяСтрока;
			НачальнаяКолонка = мНачальнаяКолонка;
			КонечнаяСтрока = мКонечнаяСтрока;
			КонечнаяКолонка = мКонечнаяКолонка;
		КонецЕсли; 
		Если мНомерПараметра <> Неопределено Тогда
			Если ТаблицаПараметров.Количество() >= мНомерПараметра Тогда
				НоваяТекущаяСтрока = ТаблицаПараметров[мНомерПараметра - 1];
			Иначе
				НоваяТекущаяСтрока = ТаблицаПараметров.Добавить();
				НоваяТекущаяСтрока.Имя = "?";
			КонецЕсли; 
			ЭлементыФормы.ТаблицаПараметров.ТекущаяСтрока = НоваяТекущаяСтрока;
		КонецЕсли; 
	КонецЕсли; 
	ПодключитьОбработчикОжиданияОбновления();
	
КонецПроцедуры

Процедура ПодключитьОбработчикОжиданияОбновления()
	
	ПодключитьОбработчикОжидания("ОбновитьИлиЗакрытьФорму", 1, Истина);

КонецПроцедуры

Процедура ТаблицаПараметровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	ОформитьЯчейкуТипаЗначения(ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ТаблицаПараметровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ЭтаФорма.Закрыть();

КонецПроцедуры

Процедура ТаблицаПараметровПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Форма.ВызовМетода");
