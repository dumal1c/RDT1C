Перем ВКОбщая;
Перем ПараметрСтруктураТипаКонтекста Экспорт; 
Перем СтруктураТипаКонтекста; 
Перем ИмяМетода;
Перем НомерПараметра;
Перем НачалоБездействия;
Перем КонечнаяКолонка;
Перем КонечнаяСтрока;
Перем НачальнаяКолонка;
Перем НачальнаяСтрока;
Перем ЛиТекущийВариантУстановленВручную;
Перем КоличествоФактПараметровМетода;
Перем АктивироватьВладельцаФормы;
Перем ПоследнееОбновление;

Процедура ОбновлениеОтображения()
	
	Если ВКОбщая <> Неопределено Тогда
		Активизировать();
		Если МодальныйРежим Или ВводДоступен() Тогда
			ВКОбщая.ПереместитьОкноВПозициюКаретки();
			ВКОбщая = Неопределено;
			ВладелецФормы.Активизировать();
		КонецЕсли;
	КонецЕсли; 
	//Если АктивироватьВладельцаФормы = Истина Тогда
	//	АктивироватьВладельцаФормы = Ложь;
	//	Если ВводДоступен() Тогда
	//		ВладелецФормы.Активизировать();
	//	КонецЕсли; 
	//КонецЕсли; 

КонецПроцедуры

// Надо вызывать до начала открытия (до ПередОткрытием), иначе недоступность формы-владельца будет сброшена
Процедура ЗапомнитьПозициюКаретки() Экспорт 
	
	Если ВводДоступен() Тогда // Так при двойном открытии почему то меняется позиция главного окна
	//Если Открыта() Тогда
		Возврат;
	КонецЕсли; 
	ВКОбщая = ирОбщий.НоваяВКОбщаяЛкс();
	ОбработкаПрерыванияПользователя();
	Если ВКОбщая <> Неопределено Тогда
		ВКОбщая.ПолучитьПозициюКаретки();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ирОбщий.Форма_ПриОткрытииЛкс(ЭтаФорма);
	ЭтаФорма.Автозакрытие = СостояниеОкна = ВариантСостоянияОкна.Свободное;
	Если Не Автозакрытие Тогда
		ЭлементыФормы.ТаблицаПараметров.Шапка = Истина;
		ЭлементыФормы.ТаблицаПараметров.Колонки.Описание.Видимость = Истина;
	КонецЕсли; 
	Если МодальныйРежим Тогда
		ЭлементыФормы.Автозакрытие.Видимость = Ложь;
	КонецЕсли; 
	НачалоБездействия = ТекущаяДата();
	ПриЛюбомОтрытии();
	ирОбщий.УстановитьПрикреплениеФормыВУправляемомПриложенииЛкс(Этаформа);
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ПриЛюбомОтрытии();
	
КонецПроцедуры

Процедура ПриЛюбомОтрытии() 
	
	ОтключитьОбработчикОжидания("ОбновитьФормуОбработчикОжидания");
	ОбновитьИлиЗакрытьФорму();

КонецПроцедуры

Процедура ОбновитьФормуОбработчикОжидания()
	
	ОбновитьИлиЗакрытьФорму(Истина);
	
КонецПроцедуры

Процедура ОбновитьИлиЗакрытьФорму(ЭтоВызовЧерезОжидание = Ложь, Необязательное = Ложь) Экспорт 
	Перем КонечнаяКолонкаЛ;
	Перем КонечнаяСтрокаЛ;
	Перем НачальнаяКолонкаЛ;
	Перем НачальнаяСтрокаЛ;
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	МоментВремени = ирОбщий.ТекущееВремяВМиллисекундахЛкс();
	Если Истина
		И Необязательное 
		И ПоследнееОбновление <> Неопределено
		И МоментВремени - ПоследнееОбновление < 100
	Тогда
		// Защита от слишком частого обновления. Такое возможно по клавиатурному вводу.
		Возврат;
	КонецЕсли;
	ПоследнееОбновление = МоментВремени;
	Если Ложь
		Или ФормаВладелец = Неопределено 
		Или (Истина
			И ПараметрСтруктураТипаКонтекста = Неопределено
			И Автодополнение <> Неопределено
			И Автодополнение.Открыта())
	Тогда
		Если Открыта() Тогда 
			Закрыть();
		КонецЕсли; 
		Возврат;
	КонецЕсли;
	Если ПараметрСтруктураТипаКонтекста <> Неопределено Тогда
		СтруктураТипаКонтекста = ПараметрСтруктураТипаКонтекста;
		Если ВладелецФормы <> Неопределено Тогда 
			АктивироватьВладельцаФормы = Не ЭтоВызовЧерезОжидание;
		КонецЕсли; 
	Иначе
		Если Не ЗначениеЗаполнено(мВызовМетода) Тогда
			ПолучитьТекущийКонтекстПараметра();
		КонецЕсли; 
		ТаблицаСтруктурТиповКонтекста = ОпределитьТипЗначенияКонтекста(мВызовМетода, " " + мТекстДляПоискаОпределения, мПредшествующийТекст,, мЭтоКонструктор);
		мВызовМетода = "";
		СтруктураТипаКонтекста = ТаблицаСтруктурТиповКонтекста[0];
	КонецЕсли; 
	Если СтруктураТипаКонтекста = Неопределено Или СтруктураТипаКонтекста.СтрокаОписания = Неопределено Тогда
		Если Открыта() Тогда 
			Если Автозакрытие Тогда
				Закрыть();
			Иначе
				ПодключитьОбработчикОжиданияОбновления();
			КонецЕсли;
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	СтрокаОписания = СтруктураТипаКонтекста.СтрокаОписания;
	Если СтрокаОписания.Владелец().Колонки.Найти("ЛиЭкспорт") <> Неопределено Тогда
		НовоеИмяМетода = СтрокаОписания.Имя;
	Иначе
		НовоеИмяМетода = СтрокаОписания.Слово;
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ФормаНеИмеетФокуса = АктивироватьВладельцаФормы = Истина Или Не ВводДоступен(); // Так надо делать, т.к. иногда ВводДоступен() возвращает Истина, хотя фокуса нет
	Если Истина
		И Автозакрытие
		И ФормаНеИмеетФокуса
		И (Ложь
			Или мНомерПараметра = Неопределено 
			Или ТекущаяДата() - НачалоБездействия > 3) // 3 секунды простоя
	Тогда
		Закрыть();
		Возврат;
	КонецЕсли; 
	Если Ложь 
		Или ФормаНеИмеетФокуса
		Или Не Открыта() 
	Тогда
		Если ИмяМетода <> НовоеИмяМетода Тогда
			ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭтаФорма.Заголовок,, НовоеИмяМетода, ": ");
			ИмяМетода = НовоеИмяМетода;
			ЛиТекущийВариантУстановленВручную = Ложь;
			Если ПараметрСтруктураТипаКонтекста = Неопределено Тогда
				ЗапомнитьПозициюКаретки(); 
			КонецЕсли; 
			НачалоБездействия = ТекущаяДата();
		КонецЕсли;
		Если Не ЭтоВызовЧерезОжидание Или ПараметрСтруктураТипаКонтекста = Неопределено Тогда
			ТаблицаПараметров.Очистить();
			Если СтрокаОписания.Владелец().Колонки.Найти("ЛиЭкспорт") <> Неопределено Тогда
				ТекущийВариант = Неопределено;
				СтрокиПараметров = СтрокаОписания.Параметры;
				Если СтрокиПараметров <> Неопределено Тогда
					ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтрокиПараметров, ТаблицаПараметров);
				КонецЕсли;
				ЭтаФорма.ОписаниеМетода = СокрЛ(СтрокаОписания.Описание);
				ОбновитьТипЗначенияИзТаблицыСтруктурТипов(СтрокаОписания, СтрокаОписания.ТаблицаСтруктурТипов, Ложь);
				ЭтаФорма.ТипЗначенияМетода = СтрокаОписания.ТипЗначения;
				ОбработкаТекста = ирКэш.ВычислительРегулярныхВыраженийЛкс();
				ОбработкаТекста.Global = Истина;
				ОбработкаТекста.Pattern = "(\n\s+)";
				Для Каждого СтрокаПараметра Из ТаблицаПараметров Цикл
					Если СтрокаПараметра.Знач = Истина Тогда
						СтрокаПараметра.Знач = "Знач";
					Иначе
						СтрокаПараметра.Знач = "";
					КонецЕсли; 
					СтрокаПараметра.Описание = СокрЛ(ОбработкаТекста.Replace(СтрокаПараметра.Описание, Символы.ПС));
				КонецЦикла;
				ВариантыСинтаксиса.Очистить();
				ВариантыСинтаксиса.Добавить();
				УстановитьТекущийПараметр();
			Иначе
				ЗагрузитьВариантМетода();
			КонецЕсли;
			ЭлементыФормы.ВариантПредыдущий.Доступность = ВариантыСинтаксиса.Количество() > 1;
			ЭлементыФормы.ВариантСледующий.Доступность = ВариантыСинтаксиса.Количество() > 1;
		КонецЕсли; 
		ЕстьПолезнаяИнформация = ТаблицаПараметров.Количество() > 0;
		Если Истина
			И ЕстьПолезнаяИнформация
			И Не ЗначениеЗаполнено(ТаблицаПараметров[0].Имя) 
		Тогда
			// Функции языка запросов. Для них нет стандарта описания параметров. Поэтому в общей таблице параметров для каждой добавляется безымянный параметр
			ЕстьПолезнаяИнформация = Ложь;
			ТаблицаПараметров[0].Имя = "<Состав параметров неизвестен>";
		КонецЕсли; 
		Если Истина
			И Не ЕстьПолезнаяИнформация 
			И Автозакрытие
			И ФормаНеИмеетФокуса
		Тогда 
			Закрыть();
			Возврат;
		КонецЕсли; 
		НеобходимаяВысота = 19 * (ТаблицаПараметров.Количество() + 3); // одну строку добавляем на случай превышения количеством запятых количества формальных параметров
		Если Истина
			И СостояниеОкна = ВариантСостоянияОкна.Свободное
			И (Ложь
				Или Не Открыта()
				Или (Истина
					И Открыта() 
					И Высота < НеобходимаяВысота))
		Тогда
			ЭтаФорма.Высота = НеобходимаяВысота;
		КонецЕсли;
		Если ПараметрСтруктураТипаКонтекста = Неопределено Тогда
			ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(НачальнаяСтрокаЛ, НачальнаяКолонкаЛ, КонечнаяСтрокаЛ, КонечнаяКолонкаЛ);
			Если Ложь
				Или НачальнаяСтрока <> НачальнаяСтрокаЛ 
				Или НачальнаяКолонка <> НачальнаяКолонкаЛ 
				Или КонечнаяСтрока <> КонечнаяСтрокаЛ
				Или КонечнаяКолонка <> КонечнаяКолонкаЛ
			Тогда
				Если Ложь
					Или НачальнаяСтрока <> НачальнаяСтрокаЛ 
					Или КонечнаяСтрока <> КонечнаяСтрокаЛ
				Тогда
					ЗапомнитьПозициюКаретки(); 
				КонецЕсли; 
				//Сообщить("изменилось положение курсора " + ТекущаяДата());
				НачалоБездействия = ТекущаяДата();
				НачальнаяСтрока = НачальнаяСтрокаЛ;
				НачальнаяКолонка = НачальнаяКолонкаЛ;
				КонечнаяСтрока = КонечнаяСтрокаЛ;
				КонечнаяКолонка = КонечнаяКолонкаЛ;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;
	ПодключитьОбработчикОжиданияОбновления();
	
КонецПроцедуры

Процедура УстановитьТекущийПараметр()
	
	Если ФормаВладелец = ВладелецФормы И мНомерПараметра > 0 Тогда
		Если ТаблицаПараметров.Количество() >= мНомерПараметра Тогда
			НоваяТекущаяСтрока = ТаблицаПараметров[мНомерПараметра - 1];
		Иначе
			НоваяТекущаяСтрока = ТаблицаПараметров.Добавить();
			НоваяТекущаяСтрока.Имя = "?";
		КонецЕсли; 
		ЭлементыФормы.ТаблицаПараметров.ТекущаяСтрока = НоваяТекущаяСтрока;
	КонецЕсли;
	ЭтаФорма.НадписьКоличествоВариантов = "из " + ВариантыСинтаксиса.Количество();

КонецПроцедуры

Процедура ЗагрузитьВариантМетода()
	
	ТаблицаПараметров.Очистить();
	СтрокаОписания = СтруктураТипаКонтекста.СтрокаОписания;
	ТипКонтекста = СтрокаОписания.ТипКонтекста;
	Отбор = Новый Структура;
	Отбор.Вставить("ТипКонтекста", ТипКонтекста);
	Если мЭтоКонструктор Тогда
		Отбор.Вставить("Слово", "<Новый>");
	Иначе
		Отбор.Вставить("Слово", ИмяМетода);
	КонецЕсли; 
	Отбор.Вставить("ЯзыкПрограммы", ЯзыкПрограммы);
	СтрокиПараметров = мПлатформа.ТаблицаПараметров.Скопировать(Отбор);
	#Если Сервер И Не Сервер Тогда
		СтрокиПараметров = Новый ТаблицаЗначений;
	#КонецЕсли
	Если Не ЛиТекущийВариантУстановленВручную Тогда
		ТаблицаВариантов = СтрокиПараметров.Скопировать();
		ЭтаФорма.ТекущийВариант = мПлатформа.ПодобратьВариантСинтаксисаМетода(ТаблицаВариантов, мФактическиеПараметры.Количество(), ТекущийВариант, ЛиТекущийВариантУстановленВручную);
		ВариантыСинтаксиса = Новый СписокЗначений;
		ВариантыСинтаксиса.ЗагрузитьЗначения(ТаблицаВариантов.ВыгрузитьКолонку(0));
		ВариантыСинтаксиса.СортироватьПоЗначению();
	КонецЕсли; 
	ПараметрыВарианта = СтрокиПараметров.НайтиСтроки(Новый Структура("ВариантСинтаксиса", ТекущийВариант));
	Для Каждого СтрокаПараметраИсточник Из ПараметрыВарианта Цикл
		СтрокаПараметраПриемник = ТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПараметраПриемник, СтрокаПараметраИсточник); 
		СтрокаПараметраПриемник.Имя = ПодготовитьИмяПараметраМетода(СтрокаПараметраИсточник.Параметр);
		Если Истина
			И Не ЗначениеЗаполнено(СтрокаПараметраПриемник.Значение)
			И СтрокаПараметраИсточник.Необязательный 
		Тогда
			СтрокаПараметраПриемник.Значение = "?";
		КонецЕсли; 
	КонецЦикла;
	УстановитьТекущийПараметр();

КонецПроцедуры

Процедура ПодключитьОбработчикОжиданияОбновления()
	
	ПодключитьОбработчикОжидания("ОбновитьФормуОбработчикОжидания", 1, Истина);

КонецПроцедуры

Процедура ТаблицаПараметровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	ОформитьЯчейкуТипаЗначения(ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ТаблицаПараметровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если СостояниеОкна = ВариантСостоянияОкна.Свободное Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли; 

КонецПроцедуры

Процедура ТаблицаПараметровПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	ТекущаяСтрока = ЭлементыФормы.ТаблицаПараметров.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Значение) Или ТекущаяСтрока.Имя = "?" Тогда
			ЭлементыФормы.НадписьОбязательность.Заголовок = "Необяз.";
		Иначе
			ЭлементыФормы.НадписьОбязательность.Заголовок = "Обяз.";
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТипЗначенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ОткрытьЗначениеЛкс(ирОбщий.СтрРазделитьЛкс(Элемент.Значение, ",", Истина));
	
КонецПроцедуры

Процедура ВариантСледующийНажатие(Элемент)
	
	ЭлементСписка = ВариантыСинтаксиса.НайтиПоЗначению(ТекущийВариант);
	Индекс = ВариантыСинтаксиса.Индекс(ЭлементСписка);
	Если ВариантыСинтаксиса.Количество() - 1 > Индекс Тогда
		Индекс = Индекс + 1;
	Иначе
		Индекс = 0;
	КонецЕсли; 
	УстановитьВариантСинтаксисаПоИндексу(Индекс);
	
КонецПроцедуры

Процедура ВариантПредыдущийНажатие(Элемент)
	
	ЭлементСписка = ВариантыСинтаксиса.НайтиПоЗначению(ТекущийВариант);
	Индекс = ВариантыСинтаксиса.Индекс(ЭлементСписка);
	Если Индекс > 0 Тогда
		Индекс = Индекс - 1;
	Иначе
		Индекс = ВариантыСинтаксиса.Количество() - 1;
	КонецЕсли; 
	УстановитьВариантСинтаксисаПоИндексу(Индекс);
	
КонецПроцедуры

Процедура УстановитьВариантСинтаксисаПоИндексу(Знач Индекс)
	
	ЭтаФорма.ТекущийВариант = ВариантыСинтаксиса[Индекс].Значение;
	ЛиТекущийВариантУстановленВручную = Истина;
	ЗагрузитьВариантМетода();

КонецПроцедуры

Процедура ПриЗакрытии()
	
	ирОбщий.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ТипЗначенияМетодаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ОткрытьЗначениеЛкс(ирОбщий.СтрРазделитьЛкс(Элемент.Значение, ",", Истина));

КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	ирОбщий.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Форма.ВызовМетода");
