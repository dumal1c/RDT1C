Перем мИсторияФайлов;
Перем мТекущаяСтрокаДереваЗапросов;
Перем мСтрокаЗагруженаВКонсоль;
Перем мИмяОткрытогоФайла;
Перем мПлатформа;
Перем мКодыСостояний;
Перем мГруппыСостояний;
Перем мЗаголовкиHttp;
Перем мИменаПростыхСвойствЗапроса;

Процедура ПриОткрытии()
	
	// Антибаг конфигуратора http://www.hostedredmine.com/issues/862503
	ЭлементыФормы.КП_Дерево.Видимость = Ложь;
	
	ОбновитьДоступностьКнопкиВыполнятьНаСервере();
	ЭтаФорма.Модифицированность = Ложь;
	Если Не МодальныйРежим И Не мРежимОтладки Тогда
		// Попытаемся загрузить последний открывавшийся файл
		мИмяОткрытогоФайла = ирОбщий.ВосстановитьЗначениеЛкс("ирКонсольHTTPЗапросов_ИмяФайла");
		Если мИмяОткрытогоФайла = НеОпределено Тогда
			мИмяОткрытогоФайла = "";
		КонецЕсли;
		Если ПустаяСтрока(мИмяОткрытогоФайла) Тогда
			СоздатьФайл();
		Иначе
			Попытка
				ЗагрузитьИзФайла();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
	мИсторияФайлов = ирОбщий.ВосстановитьЗначениеЛкс("ирКонсольHTTPЗапросов_мИсторияФайлов");
	Если мИсторияФайлов = Неопределено Тогда
		мИсторияФайлов = Новый СписокЗначений;
	КонецЕсли;
	ОбновитьПодменюИсторииФайлов();
	ЭтаФорма.ТаймаутЗапроса = 10;
	МассивМетодов = ЭлементыФормы.МетодЗапроса.СписокВыбора;
	МассивМетодов.Добавить("GET");
	МассивМетодов.Добавить("HEAD");
	МассивМетодов.Добавить("PUT");
	МассивМетодов.Добавить("POST");
	МассивМетодов.Добавить("DELETE");
	МассивМетодов.Добавить("PATCH");
	МассивМетодов.Добавить("MERGE");
	МассивМетодов.Добавить("OPTIONS");
	МассивМетодов.Добавить("TRACE");
	МассивМетодов.Добавить("CONNECT");
	МассивМетодов.СортироватьПоЗначению();
	СписокВыбора = ЭлементыФормы.МаксимальныйРазмерОтвета.СписокВыбора;
	СписокВыбора.Добавить(1);
	СписокВыбора.Добавить(100);
	СписокВыбора.Добавить(1000);
	СписокВыбора.Добавить(10000);
	СписокВыбора = ЭлементыФормы.КодировкаЗапроса.СписокВыбора;
	СписокВыбора.Добавить("UTF-8");
	СписокВыбора.Добавить("UTF-16");
	СписокВыбора.Добавить("windows-1251");
	СписокВыбора = ЭлементыФормы.ИсточникТелаЗапроса.СписокВыбора;
	Для Каждого Страница Из ЭлементыФормы.ПанельТелоЗапроса.Страницы Цикл
		СписокВыбора.Добавить(Страница.Имя, Страница.Заголовок);
	КонецЦикла;
	мКодыСостояний = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет("КодыСостояний"),,,, Истина);
	мГруппыСостояний = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет("ГруппыКодовСостояний"),,,, Истина);
	мЗаголовкиHttp = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет("Заголовки"),,,, Истина);

КонецПроцедуры

Процедура ПараметрыПредставлениеЗначенияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.Параметры.ТекущаяСтрока.Значение);
	
КонецПроцедуры

Процедура ОбновитьДоступностьКнопкиВыполнятьНаСервере()
	
	ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Кнопки.Сервер.Доступность = Истина
		И Ложь // TODO
		//И Не ирКэш.ЭтоФайловаяБазаЛкс()
		//И Не РежимВнешнейОбработки
		И (Ложь
			Или Не ирКэш.ЛиПортативныйРежимЛкс()
			Или ирПортативный.ЛиСерверныйМодульДоступенЛкс()
			);
			
КонецПроцедуры

Процедура ДействияФормыНовоеОкно(Кнопка)
	
	Если ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока <> Неопределено Тогда
		СохранитьДанныеТекущейСтроки();
		Ответ = Вопрос("Создать в новом окне новый файл и скопировать туда текущий запрос?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли; 
	НоваяФорма = ирОбщий.ОткрытьНовоеОкноОбработкиЛкс(ЭтотОбъект);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НоваяФорма.СоздатьФайл();
		ПутьВДереве = ирОбщий.Дерево_ПутьСтрокойЛкс(ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока, "");
		КопияДерева = ДеревоЗапросов.Скопировать();
		КопияСтроки = ирОбщий.Дерево_НайтиПоПутиСтрокойЛкс(КопияДерева, "", ПутьВДереве);
		НоваяСтрока = НоваяФорма.ДеревоЗапросов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КопияСтроки); 
		НоваяФорма.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
		НоваяФорма.ДеревоЗапросов.Строки.Удалить(0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Ответ = ирОбщий.ЗапроситьСохранениеДанныхФормыЛкс(ЭтаФорма);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если Не СохранитьВФайл() Тогда 
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	Отказ = Ответ = КодВозвратаДиалога.Отмена;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыОткрытьФайл(Кнопка)
	
	ОткрытьФайл();

КонецПроцедуры

Процедура ОткрытьФайл(РежимОбъединения = Ложь)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки";
	УстановитьФильтрВыбораФайла(ДиалогВыбораФайла);
	Файл = Новый Файл(мИмяОткрытогоФайла);
	ДиалогВыбораФайла.Каталог = Файл.Путь;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ОткрытьФайлПоПолномуИмени(ДиалогВыбораФайла.ПолноеИмяФайла, РежимОбъединения);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьФильтрВыбораФайла(Знач ДиалогВыбораФайла)
	
	#Если Сервер И Не Сервер Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла;
	#КонецЕсли
	ДиалогВыбораФайла.Фильтр = ирОбщий.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("h1c", "Файлы списка запросов");
	ДиалогВыбораФайла.Расширение = "h1c";

КонецПроцедуры

Процедура ОткрытьФайлПоПолномуИмени(ПолноеИмяФайла, РежимОбъединения = Ложь)
	
	Если РежимОбъединения Тогда
		ЗагрузитьИзФайла(ПолноеИмяФайла);
	Иначе
		мИмяОткрытогоФайла = ПолноеИмяФайла;
		Файл = Новый Файл(мИмяОткрытогоФайла);
		ЗагрузитьИзФайла(, ирОбщий.СтрокиРавныЛкс(Файл.Расширение, ".h1c"));
	КонецЕсли; 
	СохранитьИмяФайла();
	
КонецПроцедуры

Процедура ЗагрузитьИзФайла(ИмяФайла = "", НовыйФормат = Истина)
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = мИмяОткрытогоФайла;
		РежимОбъединения = Ложь;
	Иначе
		РежимОбъединения = Истина;
	КонецЕсли; 
	//Проверим существование файла.
	ПолученноеЗначение = ирОбщий.ПрочитатьЗначениеИзФайлаСКонтролемПотерьЛкс(ИмяФайла);
	ДанныеЗагружены = Ложь;
	ЭтаФорма.Модифицированность = РежимОбъединения;
	Если Не РежимОбъединения Тогда
		ОчиститьДанные();
		//УстановитьЗаголовокФормы();
	КонецЕсли;
	Если ТипЗнч(ПолученноеЗначение) = Тип("Структура") Тогда
		ДеревоЗапросовДляЗагрузки = ПолученноеЗначение.ДеревоЗапросов;
	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
		ДеревоЗапросовДляЗагрузки = ПолученноеЗначение;
	Иначе
		ДеревоЗапросовДляЗагрузки = Неопределено;
	КонецЕсли; 
	Если ДеревоЗапросовДляЗагрузки <> Неопределено Тогда
		ирОбщий.СкопироватьДеревоЛкс(ДеревоЗапросовДляЗагрузки, ДеревоЗапросов, Не РежимОбъединения);
		Если ДеревоЗапросовДляЗагрузки.Строки.Количество() > 0 Тогда
			КоординатыТекущейСтроки = ДеревоЗапросовДляЗагрузки.Строки[0].КоординатыТекущейСтроки;
			Попытка
				НоваяТекущаяСтрока = ирОбщий.Дерево_НайтиПоПутиМассивомЛкс(ДеревоЗапросов, КоординатыТекущейСтроки);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ирОбщий.СообщитьСУчетомМодальностиЛкс(ОписаниеОшибки, МодальныйРежим);
				НоваяТекущаяСтрока = Неопределено;
			КонецПопытки; 
			Если НоваяТекущаяСтрока <> Неопределено Тогда
				ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяТекущаяСтрока;
			КонецЕсли; 
		КонецЕсли; 
		ДанныеЗагружены = Истина;
	КонецЕсли; 
	Если Не ДанныеЗагружены Тогда 
		СоздатьФайл();
		Предупреждение("Невозможно загрузить список запросов из указанного файла!
		|Создан новый файл", 10);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСохранитьФайл(Кнопка)
	
	СохранитьВФайл();
	
КонецПроцедуры

Функция СохранитьВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь)
	
	ИмяФайла = "";
	Если ЗначениеЗаполнено(мИмяОткрытогоФайла) Тогда
		Файл = Новый Файл(мИмяОткрытогоФайла);
		ИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + ".h1c";
	КонецЕсли; 
	СохранитьДанныеТекущейСтроки();
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущий файл?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для сохранения";
	УстановитьФильтрВыбораФайла(ДиалогВыбораФайла);
	Файл = Новый Файл(мИмяОткрытогоФайла);
	ДиалогВыбораФайла.Каталог = Файл.Путь;
	КопияДерева = ДеревоЗапросов.Скопировать();
	ВсеСтрокиКопииДерева = ирОбщий.ВсеСтрокиДереваЗначенийЛкс(КопияДерева);
	КопияДерева.Колонки.Добавить("КоординатыТекущейСтроки"); // Такой несистемный прием нужен для совместимости по формату со старыми консолями
	Если КопияДерева.Строки.Количество() > 0 Тогда
		КопияДерева.Строки[0].КоординатыТекущейСтроки = ирОбщий.Дерево_ПутьМассивомЛкс(мТекущаяСтрокаДереваЗапросов);
	КонецЕсли; 
	ДанныеДляФайла = Новый Структура();
	ДанныеДляФайла.Вставить("ДеревоЗапросов", КопияДерева);
	Если ЗапрашиватьИмяФайла Или ПустаяСтрока(ИмяФайла) Тогда
		Если Не ДиалогВыбораФайла.Выбрать() Тогда 
			Возврат Ложь;
		КонецЕсли; 
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли; 
	Если Не ЗначениеВФайл(ИмяФайла, ДанныеДляФайла) Тогда 
		Сообщить("Ошибка записи файла """ + ИмяФайла + """", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли; 
	мИмяОткрытогоФайла = ИмяФайла;
	СохранитьИмяФайла();
	ЭтаФорма.Модифицированность = Ложь;
	//УстановитьЗаголовокФормы();
	Обновить();
	Возврат Истина;

КонецФункции

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДействияФормыОПодсистеме(Кнопка)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ирОбщий.ФормаОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура КлсУниверсальнаяКомандаНажатие(Кнопка) Экспорт 
	
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработчикОжиданияСПараметрамиЛкс() Экспорт 
	
	ирОбщий.ОбработчикОжиданияСПараметрамиЛкс();

КонецПроцедуры

Процедура ДействияФормыСтруктураФормы(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруФормыЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	СохранитьДанныеТекущейСтроки();
	ЗагрузитьДанныеТекущейСтроки();
	
КонецПроцедуры

Процедура СохранитьДанныеТекущейСтроки()
	
	Если Истина
		И мСтрокаЗагруженаВКонсоль
		И ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрокаДереваЗапросов <> НеОпределено 
	Тогда
		СтруктураЗапроса = Новый Структура(мИменаПростыхСвойствЗапроса);
		ЗаполнитьЗначенияСвойств(СтруктураЗапроса, ЭтаФорма, мИменаПростыхСвойствЗапроса); 
		Если ХранитьПароль Тогда
			СтруктураЗапроса.Вставить("ПарольЗапроса", Новый ХранилищеЗначения(ПарольЗапроса));
		Иначе
			СтруктураЗапроса.Вставить("ПарольЗапроса");
		КонецЕсли; 
		Если Истина 
			И МаксимальныйРазмерОтвета > 0 
			И ТелоОтветаДвоичныеДанные <> Неопределено 
			И ТелоОтветаДвоичныеДанные.Размер() > МаксимальныйРазмерОтвета 
		Тогда
			ТелоОтветаДвоичныеДанныеДляСохранения = Неопределено;
			ТелоОтветаСтрокаДляСохранения = Неопределено;
		Иначе
			ТелоОтветаДвоичныеДанныеДляСохранения = ТелоОтветаДвоичныеДанные;
			ТелоОтветаСтрокаДляСохранения = ТелоОтветаСтрока;
		КонецЕсли; 
		СтруктураЗапроса.Вставить("ТелоОтветаСтрока", ТелоОтветаСтрокаДляСохранения);
		СтруктураЗапроса.Вставить("ТелоОтветаДвоичныеДанные", ТелоОтветаДвоичныеДанныеДляСохранения);
		СтруктураЗапроса.Вставить("ЗаголовкиОтвета", ЗаголовкиОтвета.Выгрузить());
		СтруктураЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса.Скопировать());
		СтруктураЗапроса.Вставить("ЗаголовкиЗапроса", ЗаголовкиЗапроса.Выгрузить());
		СтруктураЗапроса.Вставить("ДанныеФормыЗапроса", ДанныеФормыЗапроса.Скопировать());
		СтруктураЗапроса.Вставить("КукиЗапроса", КукиЗапроса.Скопировать());
		СтруктураЗапроса.Вставить("КукиОтвета", КукиОтвета.Скопировать());
		мТекущаяСтрокаДереваЗапросов.Запрос = СтруктураЗапроса;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеТекущейСтроки()

	мТекущаяСтрокаДереваЗапросов = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	мСтрокаЗагруженаВКонсоль = Истина
		И ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрокаДереваЗапросов <> НеОпределено 
		И Не мТекущаяСтрокаДереваЗапросов.ЭтоГруппа;
	ЭлементыФормы.ТелоОтветаСтрокаHtml.УстановитьТекст("");
	СтруктураЗапроса = Новый Структура(мИменаПростыхСвойствЗапроса);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураЗапроса); 
	ЭтаФорма.ТелоОтветаСтрока = Неопределено;
	ЭтаФорма.ТелоОтветаДвоичныеДанные = Неопределено;
	ЭтаФорма.ПарольЗапроса = Неопределено;
	ЭтаФорма.ХранитьПароль = Истина;
	ЭтаФорма.ТипАвторизации = "Basic";
	ЭтаФорма.ТаймаутЗапроса = 10;
	ЭтаФорма.МетодЗапроса = "GET";
	ЭтаФорма.МаксимальныйРазмерОтвета = 1000;
	ЭтаФорма.ИсточникСтрокиДляПоиска = "<Тело>";
	ЭтаФорма.ИсточникТелаЗапроса = "ТелоЗапросаСтрока";
	ПараметрыЗапроса.Очистить();
	ЗаголовкиЗапроса.Очистить();
	ЗаголовкиОтвета.Очистить();
	ДанныеФормыЗапроса.Очистить();
	КукиЗапроса.Очистить();
	КукиОтвета.Очистить();
	Если мСтрокаЗагруженаВКонсоль Тогда
		СтруктураЗапроса = мТекущаяСтрокаДереваЗапросов.Запрос;
		Если СтруктураЗапроса <> Неопределено Тогда
			ИменаТаблиц = "ПараметрыЗапроса, ЗаголовкиЗапроса, ДанныеФормыЗапроса";
			Если СтруктураЗапроса.Свойство("КукиЗапроса") Тогда
				ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.КукиЗапроса, ЭтаФорма.КукиЗапроса);
				ИменаТаблиц = ИменаТаблиц + ", КукиЗапроса";
			КонецЕсли; 
			Если СтруктураЗапроса.Свойство("КукиОтвета") Тогда
				ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.КукиОтвета, ЭтаФорма.КукиОтвета);
				ИменаТаблиц = ИменаТаблиц + ", КукиОтвета";
			КонецЕсли; 
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураЗапроса,, ИменаТаблиц); 
			ЭлементыФормы.ТелоОтветаСтрокаHtml.УстановитьТекст(ЭтаФорма.ТелоОтветаСтрока);
			Если ТипЗнч(СтруктураЗапроса.ПарольЗапроса) = Тип("ХранилищеЗначения") Тогда
				ЭтаФорма.ПарольЗапроса = СтруктураЗапроса.ПарольЗапроса.Получить();
			КонецЕсли; 
			ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.ПараметрыЗапроса, ЭтаФорма.ПараметрыЗапроса);
			ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.ЗаголовкиЗапроса, ЭтаФорма.ЗаголовкиЗапроса);
			ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.ЗаголовкиОтвета, ЭтаФорма.ЗаголовкиОтвета);
			ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.ДанныеФормыЗапроса, ЭтаФорма.ДанныеФормыЗапроса);
			Для Каждого СтрокаЗаголовка Из ЗаголовкиЗапроса Цикл
				ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаЗаголовка);
			КонецЦикла;
			Для Каждого СтрокаЗаголовка Из ЗаголовкиОтвета Цикл
				ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаЗаголовка);
			КонецЦикла;
			ИсточникТелаЗапросаПриИзменении();
		КонецЕсли; 
		ВыбраннаяКнопка = ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Кнопки.Найти(мТекущаяСтрокаДереваЗапросов.КонтекстВыполнения);
		ВыбранСпособВыполнения(ВыбраннаяКнопка);
	КонецЕсли;
	ОбновитьСписокВыбораИсточникаПоискаРезультата();
	НастроитьЭлементыФормы();
	ОбновитьКонечныйURL();

КонецПроцедуры

Процедура КП_ДеревоДобавитьГруппу(Кнопка)
	
	ЭлементыФормы.ДеревоЗапросов.ДобавитьСтроку();
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока.ЭтоГруппа = Истина;
	
КонецПроцедуры

Процедура ДействияФормыНовыйФайл(Кнопка = Неопределено) 
	
	Если СохранитьВФайл(Истина) Тогда
		СоздатьФайл();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьФайл(Отладка = Ложь) Экспорт 

	мИмяОткрытогоФайла = "";
	СохранитьИмяФайла();
	
	ОчиститьДанные();
	//УстановитьЗаголовокФормы();
	мТекущаяСтрокаДереваЗапросов = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрокаДереваЗапросов.Наименование = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(ДеревоЗапросов.Строки, мТекущаяСтрокаДереваЗапросов, "Наименование", Ложь, БазовоеИмяНовойСтроки());
	ПриИзмененииДереваЗапросов();
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

Процедура ПриИзмененииДереваЗапросов()

	НастроитьЭлементыФормы();
	Если Истина
		И ДеревоЗапросов.Строки.Количество() > 0
		И ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = Неопределено
	Тогда 
	    ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0];
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура СохранитьИмяФайла()
	
	ирОбщий.СохранитьЗначениеЛкс("ирКонсольHTTPЗапросов_ИмяФайла", мИмяОткрытогоФайла);
	Если ЗначениеЗаполнено(мИмяОткрытогоФайла) Тогда
		ирОбщий.ДобавитьВИсториюЭлементЛкс(мИсторияФайлов, мИмяОткрытогоФайла);
		ирОбщий.СохранитьЗначениеЛкс("ирКонсольHTTPЗапросов_мИсторияФайлов", мИсторияФайлов);
		ОбновитьПодменюИсторииФайлов();
	КонецЕсли; 
	
КонецПроцедуры // СохранитьИмяФайла()

Процедура ОбновитьПодменюИсторииФайлов()
	
	//Если Не мРежимРедактора Тогда
		Кнопки = ЭлементыФормы.ДействияФормы.Кнопки.ОткрытьПоследние.Кнопки;
		ирОбщий.ОбновитьПодменюИсторииФайловЛкс(мИсторияФайлов, Кнопки);
	//КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьФайлИзИстории(Кнопка) 
	
	Если СохранитьВФайл(Истина) Тогда
		СтрокаИстории = мИсторияФайлов[Число(Сред(Кнопка.Имя, 2))];
		ОткрытьФайлПоПолномуИмени(СтрокаИстории.Значение);
	КонецЕсли;
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры

Процедура ОчиститьДанные()
	
	ДеревоЗапросов.Строки.Очистить();
	мТекущаяСтрокаДереваЗапросов = Неопределено;
	ЗагрузитьДанныеТекущейСтроки();
	
КонецПроцедуры // ОчиститьЗначения()

Процедура ДеревоЗапросовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ирКэш.КартинкаПоИмениЛкс("ирПапка"));
	Иначе 
		//ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ирКэш.КартинкаПоИмениЛкс("ирАлгоритм"));
	КонецЕсли; 

КонецПроцедуры

Процедура ДействияФормыОбъединитьФайл(Кнопка)
	
	ОткрытьФайл(Истина);
	
КонецПроцедуры

Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	СохранитьДанныеТекущейСтроки();
	Если Копирование Тогда
		ТекущийРодитель = Родитель;
	Иначе
		ТекущийРодитель = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	КонецЕсли; 
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоЗапросов;
	ИначеЕсли Не ТекущийРодитель.ЭтоГруппа И Не Копирование Тогда
		ТекущийРодитель = ирОбщий.ПолучитьРодителяСтрокиДереваЛкс(ТекущийРодитель);
	КонецЕсли; 
	НоваяСтрока = ТекущийРодитель.Строки.Добавить();
	Если Копирование Тогда
		ирОбщий.СкопироватьСтрокиДереваЛкс(ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли; 
	НоваяСтрока.Наименование = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(ТекущийРодитель.Строки, НоваяСтрока.Наименование, "Наименование", Ложь, БазовоеИмяНовойСтроки());
	Элемент.ТекущаяСтрока = НоваяСтрока;
	Элемент.ИзменитьСтроку();

КонецПроцедуры

Функция БазовоеИмяНовойСтроки()
	
	Возврат "Запрос";

КонецФункции

Процедура ДействияФормыСохранитьКак(Кнопка)
	
	СохранитьВФайл(Ложь, Истина);

КонецПроцедуры

Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ирОбщий.ДеревоКонсолиПроверкаПеретаскиванияЛкс(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваЗапросов");
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
		И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания[0].Владелец() = ПараметрыЗапроса
	Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СохранитьДанныеТекущейСтроки();
	ирОбщий.ДеревоКонсолиПеретаскиваниеЛкс(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваЗапросов", "Наименование");
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
		И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания[0].Владелец() = ПараметрыЗапроса
	Тогда
		СтандартнаяОбработка = Ложь;
		Для Каждого СтрокаПараметра Из ЗначениеПеретаскивания Цикл
			СтрокаНовогоПараметра = Строка.Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовогоПараметра, СтрокаПараметра);
			СтрокаНовогоПараметра.Имя = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(Строка.Параметры, СтрокаНовогоПараметра, "Имя");
			ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаНовогоПараметра, "Имя");
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	СохранитьДанныеТекущейСтроки();
	ирОбщий.ДеревоКонсолиНачалоПеретаскиванияЛкс(Элемент, ПараметрыПеретаскивания, Выполнение, "СтрокаДереваЗапросов")

КонецПроцедуры

Процедура ПеренестиСтрокуДереваВКорень()
	
	СохранитьДанныеТекущейСтроки();
	НоваяСтрока = ДеревоЗапросов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекущаяСтрокаДереваЗапросов);
	ирОбщий.СкопироватьДеревоЛкс(мТекущаяСтрокаДереваЗапросов, НоваяСтрока);
	РодительТекущейСтроки = ?(мТекущаяСтрокаДереваЗапросов.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрокаДереваЗапросов.Родитель);
	РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрокаДереваЗапросов));
	мТекущаяСтрокаДереваЗапросов = НеОпределено;
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ПеренестиСтрокуДерева()

Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	мТекущаяСтрокаДереваЗапросов = Неопределено;

КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ирОбщий.ОбновитьЗаголовокФормыСОткрытымФайломЛкс(ЭтаФорма, мИмяОткрытогоФайла);
	ирОбщий.ОбновитьЗаголовкиСтраницПанелейЛкс(ЭтаФорма);
	//ЭтаФорма.КоличествоПараметров = Параметры.Количество();
	Если ТелоЗапросаДвоичныеДанные <> Неопределено Тогда
		ЭтаФорма.СтатусДвоичныхДанных = "Двоичные данные установлены " + ТелоЗапросаДвоичныеДанные.Размер() + " байт";
	Иначе
		ЭтаФорма.СтатусДвоичныхДанных = "Двоичные данные не установлены";
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранСпособВыполнения(Кнопка)
	
	Если Кнопка = Неопределено Или Не Кнопка.Доступность Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Кнопки.Клиент;
	КонецЕсли; 
	Для Каждого КнопкаСпособа Из ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Кнопки Цикл
		КнопкаСпособа.Пометка = Кнопка = КнопкаСпособа;
	КонецЦикла;
	ЭтаФорма.КонтекстВыполнения = Кнопка.Имя;
	мТекущаяСтрокаДереваЗапросов.КонтекстВыполнения = Кнопка.Имя;
	ДоступностьВнешнейОбработкиНаСервре = КонтекстВыполнения = "Клиент" Или Не ирКэш.ЛиПортативныйРежимЛкс();
	ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Текст = "Контекст: " + Кнопка.Текст;

КонецПроцедуры

Процедура КоманднаяПанельФормыОткрытьИТС(Кнопка)
	
	ирОбщий.ОткрытьСсылкуИТСЛкс("https://its.1c.ru/db/v?doc#bookmark:dev:TI000000116");
	
КонецПроцедуры

Процедура СерверЗапросаПриИзменении(Элемент)
	
	СтруктураURI = ирОбщий.СтруктураURIЛкс(СерверЗапроса);
	ЭтаФорма.СерверЗапроса = СтруктураURI.Хост;
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Функция ПротоколЗапроса()
	Протокол = ?(ИспользоватьЗащищенноеСоединение, "https", "http");
	Возврат Протокол;
КонецФункции

Процедура ОбновитьКонечныйURL()
	
	Результат = "";
	Результат = Результат + ПротоколЗапроса() + "://";
	Результат = Результат + СерверЗапроса;
	Если ЗначениеЗаполнено(ПортЗапроса) И ПортЗапроса <> 80 Тогда
		Результат = Результат + ":" + XMLСтрока(ПортЗапроса);
	КонецЕсли;
	Если Лев(АдресРесурса, 1) = "/" Тогда
		АдресРесурса = Сред(АдресРесурса, 2);
	КонецЕсли;
	ФрагментыАдреса = ирОбщий.СтрРазделитьЛкс(АдресРесурса, "/");
	#Если Сервер И Не Сервер Тогда
		ФрагментыАдреса = Новый Массив;
	#КонецЕсли
	Для Индекс = 0 По ФрагментыАдреса.ВГраница() Цикл
		ФрагментыАдреса[Индекс] = КодироватьСтроку(ФрагментыАдреса[Индекс], СпособКодированияСтроки.КодировкаURL);
	КонецЦикла;
	АдресРесурсаЗакодированный = ирОбщий.СтрСоединитьЛкс(ФрагментыАдреса, "/");
	РезультатДекодированный = Результат + "/" + АдресРесурса;
	Результат = Результат + "/" + АдресРесурсаЗакодированный;
	Если ирОбщий.СтрокиРавныЛкс(МетодЗапроса, "GET") Тогда
		СтрокаПараметров = "";
		СтрокаПараметровДекодированная = "";
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			Если ЗначениеЗаполнено(СтрокаПараметров) Тогда
				СтрокаПараметров = СтрокаПараметров + "&";
				СтрокаПараметровДекодированная = СтрокаПараметровДекодированная + "&";
			КонецЕсли;
			СтрокаПараметров = СтрокаПараметров + КодироватьСтроку(ПараметрЗапроса.Имя, СпособКодированияСтроки.КодировкаURL)
				+ "=" + КодироватьСтроку(ПараметрЗапроса.Значение, СпособКодированияСтроки.КодировкаURL);
			СтрокаПараметровДекодированная = СтрокаПараметровДекодированная + ПараметрЗапроса.Имя + "=" + ПараметрЗапроса.Значение;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаПараметров) Тогда
			РезультатДекодированный = РезультатДекодированный + "?" + СтрокаПараметровДекодированная;
			Результат = Результат + "?" + СтрокаПараметров;
		КонецЕсли; 
	КонецЕсли; 
	ЭтаФорма.КонечныйURLДекодированный = РезультатДекодированный;
	ЭтаФорма.КонечныйURL = Результат;
	
КонецПроцедуры

Процедура АдресНаСервереПриИзменении(Элемент)
	
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура ЗащищенноеПриИзменении(Элемент)
	
	ЭтаФорма.ПортЗапроса = 0;
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура ПортЗапросаПриИзменении(Элемент)
	
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура КонечныйЗапросНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаРасширенногоЗначения_НачалоВыбораЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ПолучитьТелоPOSTЗапросаFormData(СписокСоответствий, РазделительBound = Неопределено, Кодировка = Неопределено)

	ТекстТелаЗапроса = "";
	Если НЕ ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = "UTF-8";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РазделительBound) Тогда
		РазделительBound = "" + Новый УникальныйИдентификатор();
	КонецЕсли;
	Для Каждого СтрСписка Из СписокСоответствий Цикл
		ТекстТелаЗапроса = 	ТекстТелаЗапроса 
		+ Символы.ПС
		+ "--" + РазделительBound
		+ Символы.ПС
		+ "Content-Type: text/plain; charset="
		+ Кодировка
		+ Символы.ПС
		+ "Content-Disposition: form-data; name='"
		+ СтрСписка.Ключ
		+ "'"
		+ Символы.ПС
		+ Символы.ПС
		+ СтрСписка.Значение
		+ Символы.ПС
		+ "--" + РазделительBound;
	КонецЦикла;
	Возврат ТекстТелаЗапроса + "--";
	
КонецФункции

Процедура ДобавитьТокенOAuth2ВЗапрос(Токен)
	УстановитьГенерируемыйЗаголовокЗапроса("Authorization", "Bearer " + Токен);
КонецПроцедуры

Функция ПолучитьЗапросHTTP(Сервис, Заголовки = Неопределено, ТелоЗапроса = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Заголовки) Или ТипЗнч(Заголовки) <> Тип("Соответствие") Тогда
		Заголовки = Новый Соответствие;
	КонецЕсли;
	Запрос = Новый HTTPЗапрос(Сервис, Заголовки);
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	Возврат Запрос;
	
КонецФункции

Функция ПолучитьТокенOAuth2(Сервис, Ключ, Секрет, Scope, СоединениеHTTP)
	
	#Если Сервер И Не Сервер Тогда
		СоединениеHTTP = Новый HTTPСоединение;
	#КонецЕсли
	СтруктураURI = ирОбщий.СтруктураURIЛкс(Сервис);
	Данные = Новый Структура("client_id, client_secret, scope, grant_type", Ключ, Секрет, Scope, "client_credentials");
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ЗапросHTTP = ПолучитьЗапросHTTP(СтруктураURI.ПутьНаСервере, Заголовки, ирОбщий.СохранитьОбъектВСтрокуJsonЛкс(Данные));
	РезультатЗапроса = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	#Если Сервер И Не Сервер Тогда
		РезультатЗапроса = Новый HTTPОтвет;
	#КонецЕсли
	Если РезультатЗапроса.КодСостояния <> 200 Тогда
		Сообщить("Ошибка получения токена OAuth2 - Код ответа " + РезультатЗапроса.КодСостояния);
		Возврат Неопределено;
	КонецЕсли;
	Данные = РезультатЗапроса.ПолучитьТелоКакСтроку();
	СтруктураДанных = ирОбщий.СохранитьОбъектВСтрокуJsonЛкс(Данные);
	Если НЕ СтруктураДанных.Свойство("access_token") Тогда
		Сообщить("Ошибка получения токена OAuth2 - В ответе нет поля ""access_token""");
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтруктураДанных.access_token;
	
КонецФункции

Функция ИспользоватьBOMЗапроса()
	ИспользованиеByteOrderMarkМой = Вычислить("ИспользованиеByteOrderMark"); // Доступен с 8.3.6
	Результат = ?(ИспользоватьBOM, ИспользованиеByteOrderMarkМой.Авто, ИспользованиеByteOrderMarkМой.НеИспользовать);
	Возврат Результат;
КонецФункции

Процедура КоманднаяПанельВыполнениеВыполнитьЗапрос(Кнопка = Неопределено)
	
	Если Не ЗначениеЗаполнено(СерверЗапроса) Тогда
		Сообщить("Необходимо указать сервер запроса");
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.СерверЗапроса;
		Возврат;
	КонецЕсли;
	// Встречал имена кук, начинающиеся с цифры
	//Если Не ирОбщий.ПроверитьТаблицуПараметровЛкс(КукиЗапроса, "Проверка таблицы ""Куки запроса"". ") Тогда
	//	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КукиЗапроса;
	//	Возврат;
	//КонецЕсли; 
	//Если Не ирОбщий.ПроверитьТаблицуПараметровЛкс(ПараметрыЗапроса, "Проверка таблицы ""Параметры запроса GET"". ") Тогда
	//	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПараметрыЗапроса;
	//	Возврат;
	//КонецЕсли; 
	Если ИсточникТелаЗапроса = "ДвоичныеДанные" И ТелоЗапросаДвоичныеДанные = Неопределено Тогда
		Сообщить("Необходимо установить двоичные данные, либо выбрать другой источник тела запроса");
		ЭлементыФормы.ПанельТелоЗапроса.ТекущаяСтраница = ЭлементыФормы.ПанельТелоЗапроса.Страницы.ДвоичныеДанные;
		ЭлементыФормы.ПанельЗапрос.ТекущаяСтраница = ЭлементыФормы.ПанельЗапрос.Страницы.ТелоЗапроса;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ИсточникТелаЗапроса;
		Возврат;
	КонецЕсли; 
	ПортВременный = КонечныйПорт(ПортЗапроса, ИспользоватьЗащищенноеСоединение);
	ИнтернетПрокси = ирОбщий.ИнтернетПрокси(СобственныйПрокси, ИспользоватьЗащищенноеСоединение);
	ЗащищенноеСоединение = ?(ИспользоватьЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
	СоединениеHTTP = СоединениеHTTP(СерверЗапроса, ПортВременный, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС, "Основное соединение");
	Если СоединениеHTTP = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
		СоединениеHTTP = Новый HTTPСоединение;
	#КонецЕсли
	АдресРесурсаСПараметрами = АдресРесурсаСПараметрами();
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурсаСПараметрами);
	Если ИсточникТелаЗапроса = "ДанныеФормыЗапроса" Тогда
		СформироватьТелоЗапросаИзДанныхФормы();
	КонецЕсли; 
	Если ИсточникТелаЗапроса = "ДанныеФормыЗапроса" Или ИсточникТелаЗапроса = "ТелоЗапросаСтрока" Тогда
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапросаСтрока, КодировкаЗапроса, ИспользоватьBOMЗапроса());
	Иначе
		ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ТелоЗапросаДвоичныеДанные);
	КонецЕсли; 
	Если ТипАвторизации = "OAuth2" Тогда
		Токен = ПолучитьТокенOAuth2(OAuth2_Сервис, OAuth2_КлючКлиента, OAuth2_СекретКлиента, OAuth2_Scope, СоединениеHTTP);
		Если ЗначениеЗаполнено(Токен) Тогда
			ДобавитьТокенOAuth2ВЗапрос(Токен); 
		КонецЕсли;
	КонецЕсли;
	УстановитьЗаголовкиЗапросаHTTP(ЗапросHTTP);
	ВремяНачала = ирОбщий.ПолучитьТекущееВремяВМиллисекундахЛкс();
	Попытка
		ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод(МетодЗапроса, ЗапросHTTP);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки; 
	ЭтаФорма.КодСостояния = ОтветHTTP.КодСостояния;
	Для Счетчик = 1 По 5 Цикл
		Если Автоперенаправление И КодСостояния >= 300 И КодСостояния < 400 Тогда 
			ПрочитатьКуки(ОтветHTTP);
			СтруктураURL = ирОбщий.СтруктураURIЛкс(ОтветHTTP.Заголовки["Location"]);
			ЗапросHTTP.АдресРесурса = СтруктураURL.ПутьНаСервере;
			ЗащищенноеСоединение = ?(СтруктураURL.ИспользоватьHTTPS, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
			СоединениеHTTP = СоединениеHTTP(СтруктураURL.ИмяСервера, СтруктураURL.ПортHttp, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС, "Перенаправленное соединение");
			Если СоединениеHTTP = Неопределено Тогда
				Возврат;
			КонецЕсли; 
			#Если Сервер И Не Сервер Тогда
				СоединениеHTTP = Новый HTTPСоединение;
			#КонецЕсли
			УстановитьЗаголовкиЗапросаHTTP(ЗапросHTTP);
			ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод(МетодЗапроса, ЗапросHTTP);
			ЭтаФорма.КодСостояния = ОтветHTTP.КодСостояния;
		Иначе
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	ВремяКонца = ирОбщий.ПолучитьТекущееВремяВМиллисекундахЛкс();
	ДлительностьВыполнения = ВремяКонца - ВремяНачала;
	мТекущаяСтрокаДереваЗапросов.Длительность = ДлительностьВыполнения;
	ЭтаФорма.ТелоОтветаСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	ЭлементыФормы.ТелоОтветаHtml.УстановитьТекст("<html></html>");
	ЭлементыФормы.ТелоОтветаHtml.УстановитьТекст(ТелоОтветаСтрока);
	ЭлементыФормы.ТелоОтветаСтрокаHtml.УстановитьТекст(ТелоОтветаСтрока);
	ЭтаФорма.ТелоОтветаДвоичныеДанные = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
	ЭтаФорма.КоличествоСимволовОтвета = СтрДлина(ТелоОтветаСтрока);
	ЭтаФорма.КоличествоБайтОтвета = ТелоОтветаДвоичныеДанные.Размер();
	ЗаголовкиОтвета.Очистить();
	Для Каждого ЗаголовокОтвета Из ОтветHTTP.Заголовки Цикл
		СтрокаЗаголовка = ЗаголовкиОтвета.Добавить();
		СтрокаЗаголовка.Имя = ЗаголовокОтвета.Ключ;
		ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаЗаголовка);
		СтрокаЗаголовка.Значение = ЗаголовокОтвета.Значение;
		СтрокаОписания = мЗаголовкиHttp.Найти(ЗаголовокОтвета.Ключ, "Заголовок");
		Если СтрокаОписания <> Неопределено Тогда
			СтрокаЗаголовка.Описание = ОписаниеЗаголовка(СтрокаОписания, Ложь);
		КонецЕсли; 
	КонецЦикла;
	ЗаголовкиОтвета.Сортировать("Имя");
	ОбновитьСписокВыбораИсточникаПоискаРезультата();
	ПрочитатьКуки(ОтветHTTP);
	#Если Сервер И Не Сервер Тогда
		мКодыСостояний = Новый ТаблицаЗначений;
	#КонецЕсли
	СтрокаКодаСостояния = мКодыСостояний.Найти(КодСостояния, "Код");
	ЭтаФорма.ОписаниеКодаСостояния = "";
	Если СтрокаКодаСостояния <> Неопределено Тогда
		ЭтаФорма.ОписаниеКодаСостояния = СтрокаКодаСостояния.Описание;
	КонецЕсли; 
	ЭтаФорма.ГруппаКодовСостояний = "";
	Для Каждого СтрокаГруппы Из мГруппыСостояний Цикл
		Если Цел(СтрокаГруппы.Код / 100) = Цел(КодСостояния / 100) Тогда
			ЭтаФорма.ГруппаКодовСостояний = СтрокаГруппы.Описание;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	ВыполнитьПоискРезультата();
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиЗапросаHTTP(Знач ЗапросHTTP)
	
	Если КукиЗапроса.Количество() > 0 Тогда
		СформироватьЗаголовокКуки();
	КонецЕсли;
	Для Каждого ЗаголовокЗапроса Из ЗаголовкиЗапроса Цикл
		ЗапросHTTP.Заголовки.Вставить(ЗаголовокЗапроса.Имя, ЗаголовокЗапроса.Значение);
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьКуки(Знач ОтветHTTP)
	
	КукиОтвета.Очистить();
	КукиСтрока = ОтветHTTP.Заголовки["Set-Cookie"];
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	// {ОписаниеРегулярногоВыражения.Начало} конструктор из подсистемы "Инструменты разработчика" (http://devtool1c.ucoz.ru)
	// Перем АтрибутСоЗначением, Атрибут, Элемент;
	// {Шаблон.Начало}
	// + <АтрибутФлаг> = Secure|HttpOnly
	// + <АтрибутСоЗначением> = ([_ЁА-ЯA-Z\d]+)\s*=\s*([^;]*)\s*
	// + <Атрибут> = (?:<АтрибутСоЗначением>|<АтрибутФлаг>)
	// + <Элемент> = (\s*<Атрибут>;?)+(?:,|$)
	// {Шаблон.Конец}
	АтрибутФлаг = "Secure|HttpOnly";
	АтрибутСоЗначением = "([_ЁА-ЯA-Z\d]+)\s*=\s*([^;]*)\s*";
	Атрибут = "(?:" + АтрибутСоЗначением + "|" + АтрибутФлаг + ")";
	Элемент = "(\s*" + Атрибут + ";?)+(?:,|$)";
	// {ОписаниеРегулярногоВыражения.Конец}
	
	ВхожденияЭлементы = ирОбщий.НайтиРегулярноеВыражениеЛкс(КукиСтрока, Элемент, "Элемент",,,,, Истина);
	#Если Сервер И Не Сервер Тогда
	    ВхожденияЭлементы = Обработки.ирПлатформа.Создать().ВхожденияРегулярногоВыражения;
	#КонецЕсли
	Для каждого ВхождениеЭлемент Из ВхожденияЭлементы Цикл
		СтрокаКукиЗапроса = Неопределено;
		ВхожденияАтрибуты = ирОбщий.НайтиРегулярноеВыражениеЛкс(ВхождениеЭлемент.ТекстВхождения, Атрибут, "Имя, Значение, Флаг");
		#Если Сервер И Не Сервер Тогда
		    ВхожденияАтрибуты = Обработки.ирПлатформа.Создать().ВхожденияРегулярногоВыражения;
		#КонецЕсли
		Для каждого ВхождениеАтрибут Из ВхожденияАтрибуты Цикл
			Если СтрокаКукиЗапроса = Неопределено Тогда
				СтрокаКукиЗапроса = КукиЗапроса.Найти(НРег(ВхождениеАтрибут.Имя), "НИмя");
				Если СтрокаКукиЗапроса = Неопределено Тогда
					СтрокаКукиЗапроса = КукиЗапроса.Добавить();
					СтрокаКукиЗапроса.Имя = ВхождениеАтрибут.Имя;
					ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаКукиЗапроса);
				Иначе
					СтрокаКукиЗапроса.Secure = Ложь;
					СтрокаКукиЗапроса.HttpOnly = Ложь;
				КонецЕсли;
				СтрокаКукиЗапроса.Значение = ВхождениеАтрибут.Значение;
			Иначе
				Если ЗначениеЗаполнено(ВхождениеАтрибут.Имя) Тогда
					СтрокаКукиЗапроса[СтрЗаменить(ВхождениеАтрибут.Имя, "-", "")] = ВхождениеАтрибут.Значение;
				Иначе
					СтрокаКукиЗапроса[ВхождениеАтрибут.ТекстВхождения] = Истина;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла; 
		СтрокаКукиОтвета = КукиОтвета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКукиОтвета, СтрокаКукиЗапроса); 
	КонецЦикла;
	КукиЗапроса.Сортировать("Имя");
	КукиОтвета.Сортировать("Имя");

КонецПроцедуры

Функция ОписаниеЗаголовка(Знач СтрокаОписания, ДобавитьПример = Ложь)
	
	Результат = СтрокаОписания.Описание ;
	Если ДобавитьПример И ЗначениеЗаполнено(СтрокаОписания.Пример) Тогда
		Результат = Результат + Символы.ПС + "Пример. " + СтрокаОписания.Пример;
	КонецЕсли; 
	Возврат Результат;

КонецФункции

Процедура ОбновитьСписокВыбораИсточникаПоискаРезультата()
	
	Перем СписокВыбора, СтрокаЗаголовка;
	
	СписокВыбора = ЭлементыФормы.ИсточникСтрокиДляПоиска.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("<Тело>");
	Для Каждого СтрокаЗаголовка Из ЗаголовкиОтвета Цикл
		СписокВыбора.Добавить(СтрокаЗаголовка.Имя);
	КонецЦикла;

КонецПроцедуры

Функция СформироватьЗаголовокКуки()
	
	ЗначениеКук = "";
	Для Каждого СтрокаКуки Из КукиЗапроса Цикл
		Если ЗначениеЗаполнено(ЗначениеКук) Тогда
			ЗначениеКук = ЗначениеКук + "; ";
		КонецЕсли; 
		ЗначениеКук = ЗначениеКук + СтрокаКуки.Имя + " = " + СтрокаКуки.Значение;
	КонецЦикла;
	Результат = УстановитьГенерируемыйЗаголовокЗапроса("Cookie", ЗначениеКук);
	Возврат Результат;

КонецФункции

Функция СформироватьТелоЗапросаИзДанныхФормы()
	
	СоответствияДанныеФормы = Новый Соответствие;
	Для Каждого ЭлементДаныеФормы Из ДанныеФормыЗапроса Цикл
		СоответствияДанныеФормы.Вставить(ЭлементДаныеФормы.Имя, ЭлементДаныеФормы.Значение);
	КонецЦикла;
	РазделительBound = "" + Новый УникальныйИдентификатор();
	ЭтаФорма.ТелоЗапросаСтрока = ПолучитьТелоPOSTЗапросаFormData(СоответствияДанныеФормы, РазделительBound);
	ЭтаФорма.ТелоЗапросаДвоичныеДанные = Неопределено;
	Результат = УстановитьГенерируемыйЗаголовокЗапроса("Content-Type", "multipart/form-data; boundary=""" + РазделительBound + """");
	Возврат Результат;

КонецФункции

Функция УстановитьГенерируемыйЗаголовокЗапроса(ИмяЗаголовка, Знач ЗначениеКук)
	
	СтрокаЗаголовка = ЗаголовкиЗапроса.Найти(ИмяЗаголовка, "Имя");
	Если СтрокаЗаголовка = Неопределено Тогда
		СтрокаЗаголовка = ЗаголовкиЗапроса.Добавить();
		СтрокаЗаголовка.Имя = ИмяЗаголовка;
		ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаЗаголовка);
	КонецЕсли; 
	СтрокаЗаголовка.Генерируемый = Истина;
	СтрокаЗаголовка.Значение = ЗначениеКук;
	ЗаголовкиЗапроса.Сортировать("Имя");
	Возврат СтрокаЗаголовка;

КонецФункции

Функция СоединениеHTTP(СерверЗапроса, ПортВременный, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС, ПредставлениеСоединения = "Соединение")
	
	Попытка
		// параметр АутентификацияОС появился в 8.3.7
		СоединениеHTTP = Вычислить("Новый HTTPСоединение(СерверЗапроса, ПортВременный, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС)");
	Исключение
		Сообщить(ПредставлениеСоединения + " не установлено по причине: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Возврат СоединениеHTTP;

КонецФункции

Функция КонечныйПорт(Порт, ИспользоватьЗащищенноеСоединение = Ложь)
	
	Если ЗначениеЗаполнено(Порт) Тогда
		ПортВременный = Порт;
	Иначе
		Если ИспользоватьЗащищенноеСоединение Тогда
			ПортВременный = 443;
		Иначе
			ПортВременный = 80;
		КонецЕсли; 
	КонецЕсли;
	Возврат ПортВременный;

КонецФункции

Процедура КонечныйЗапросПриИзменении(Элемент)
	
	ЗагрузитьКонечныйЗапрос(КонечныйURL);
	
КонецПроцедуры

Процедура ЗагрузитьКонечныйЗапрос(Знач СтрокаURL, ДекодироватьURL = Истина)
	
	СтруктураURI = ирОбщий.СтруктураURIЛкс(СтрокаURL);
	ЭтаФорма.СерверЗапроса = СтруктураURI.Хост;
	ЭтаФорма.ПортЗапроса = СтруктураURI.Порт;
	Если ЗначениеЗаполнено(СтруктураURI.Логин) Тогда
		ЭтаФорма.ПользовательЗапроса = СтруктураURI.Логин;
		ЭтаФорма.ПарольЗапроса = СтруктураURI.Пароль;
	КонецЕсли; 
	ЭтаФорма.ИспользоватьЗащищенноеСоединение = СтруктураURI.ИспользоватьHTTPS;
	ЭтаФорма.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыЗапроса.Очистить();
	Фрагменты = ирОбщий.СтрРазделитьЛкс(АдресРесурса, "?");
	Если Фрагменты.Количество() > 1 Тогда
		ЭтаФорма.АдресРесурса = Фрагменты[0];
		СтрокаПараметров = ирОбщий.ПервыйФрагментЛкс(Фрагменты[1], "#"); // Отбрасываем якорь
		Фрагменты = ирОбщий.СтрРазделитьЛкс(СтрокаПараметров, "&");
		Для Каждого Фрагмент Из Фрагменты Цикл
			СтрокаПараметра = ПараметрыЗапроса.Добавить();
			ИмяПараметра = ирОбщий.ПервыйФрагментЛкс(Фрагмент, "=");
			ЗначениеПараметра =  ирОбщий.ПоследнийФрагментЛкс(Фрагмент, "=");
			Если ДекодироватьURL Тогда
				ИмяПараметра = РаскодироватьСтроку(ИмяПараметра, СпособКодированияСтроки.КодировкаURL);
				ЗначениеПараметра = РаскодироватьСтроку(ЗначениеПараметра, СпособКодированияСтроки.КодировкаURL);
			КонецЕсли; 
			СтрокаПараметра.Имя = ИмяПараметра;
			СтрокаПараметра.Значение = ЗначениеПараметра;
		КонецЦикла;
	КонецЕсли;
	Если ДекодироватьURL Тогда
		ФрагментыАдреса = ирОбщий.СтрРазделитьЛкс(АдресРесурса, "/");
		#Если Сервер И Не Сервер Тогда
			ФрагментыАдреса = Новый Массив;
		#КонецЕсли
		Для Индекс = 0 По ФрагментыАдреса.ВГраница() Цикл
			ФрагментыАдреса[Индекс] = РаскодироватьСтроку(ФрагментыАдреса[Индекс], СпособКодированияСтроки.КодировкаURL);
		КонецЦикла;
		ЭтаФорма.АдресРесурса = ирОбщий.СтрСоединитьЛкс(ФрагментыАдреса, "/");
	КонецЕсли; 
	ОбновитьКонечныйURL();
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

Процедура ДействияФормыНастройкиПрокси(Кнопка)
	
	ФормаПрокси = ПолучитьФорму("Прокси");
	ФормаПрокси.ПараметрПротокол = ПротоколЗапроса();
	ФормаПрокси.Открыть();
	
КонецПроцедуры

Процедура КПТелоОтветаJSON(Кнопка)
	
	ОткрытьОтветЧерезВременныйФайл("json");
	
КонецПроцедуры

Процедура ОткрытьОтветЧерезВременныйФайл(Знач РасширениеФайла)
	
	Если ТелоОтветаДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ТелоОтветаДвоичныеДанные.Записать(ИмяВременногоФайла);
	ЗапуститьПриложение(ИмяВременногоФайла);

КонецПроцедуры

Процедура КПТелоОтветаXML(Кнопка)
	
	ОткрытьОтветЧерезВременныйФайл("xml");

КонецПроцедуры

Процедура КПТелоОтветаHTML(Кнопка)

	ОткрытьОтветЧерезВременныйФайл("html");
	
КонецПроцедуры

Процедура ЗаголовкиОтветаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТелоЗапросаПриИзменении(Элемент)
	
	ЭтаФорма.ТелоЗапросаДвоичныеДанные = Неопределено;
	
КонецПроцедуры

Процедура КПТелоЗагрузитьТекстИзФайла(Кнопка)
	
	ИмяФайла = ирОбщий.ВыбратьФайлЛкс();
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли; 
	ЭтаФорма.ТелоЗапросаДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	ЭтаФорма.ТелоЗапросаСтрока = ТекстовыйДокумент.ПолучитьТекст();
	ЭтаФорма.ИсточникТелаЗапроса = "ТелоЗапросаСтрока";
	
КонецПроцедуры

Процедура КПТелоЗагрузитьДвоичныеДанныеИзФайла(Кнопка)
	
	ИмяФайла = ирОбщий.ВыбратьФайлЛкс();
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли; 
	ЭтаФорма.ТелоЗапросаДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	ЭтаФорма.ИсточникТелаЗапроса = "ДвоичныеДанные";

КонецПроцедуры

Процедура КПТелоОтветаОткрытьФайлВПапке(Кнопка)
	
	Если ТелоОтветаДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dat");
	ТелоОтветаДвоичныеДанные.Записать(ИмяВременногоФайла);
	ирОбщий.ОткрытьФайлВПроводникеЛкс(ИмяВременногоФайла);

КонецПроцедуры

Процедура ОписаниеКодаСостоянияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ОткрытьЗначениеЛкс(мКодыСостояний, Ложь);
	
КонецПроцедуры

Процедура ГруппаКодовСостоянийНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ОткрытьЗначениеЛкс(мГруппыСостояний, Ложь);
	
КонецПроцедуры

Процедура ЗаголовкиЗапросаИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	#Если Сервер И Не Сервер Тогда
		мЗаголовкиHttp = Новый ТаблицаЗначений;
	#КонецЕсли
	ЗаголовкиОсновные = мЗаголовкиHttp.НайтиСтроки(Новый Структура("Основной", Истина));
	ЗаголовкиЗапросаЦелого = мЗаголовкиHttp.НайтиСтроки(Новый Структура("ЗапросЦелый", Истина));
	ЗаголовкиЗапросаПорции = мЗаголовкиHttp.НайтиСтроки(Новый Структура("ЗапросПорция", Истина));
	ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(ЗаголовкиЗапросаЦелого, ЗаголовкиОсновные);
	ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(ЗаголовкиЗапросаПорции, ЗаголовкиОсновные);
	ДоступныеЗаголовкиЗапроса = мЗаголовкиHttp.Скопировать(ЗаголовкиОсновные);
	ДоступныеЗаголовкиЗапроса.Сортировать("Заголовок");
	НачальнаяСтрока = ДоступныеЗаголовкиЗапроса.Найти(ЭлементыФормы.ЗаголовкиЗапроса.ТекущиеДанные.Имя, "Заголовок");
	Если НачальнаяСтрока = Неопределено Тогда
		НачальнаяСтрока = ДоступныеЗаголовкиЗапроса[0];
	КонецЕсли; 
	ВыбраннаяСтрока = ирОбщий.ВыбратьСтрокуТаблицыЗначенийЛкс(ДоступныеЗаголовкиЗапроса, НачальнаяСтрока, Истина, "Выберите заголовок запроса");
	Если ВыбраннаяСтрока <> Неопределено Тогда
		СтрокаЗаголовка = ЭлементыФормы.ЗаголовкиЗапроса.ТекущиеДанные;
		СтрокаЗаголовка.Имя = ВыбраннаяСтрока.Заголовок;
		СтрокаЗаголовка.Описание = ОписаниеЗаголовка(ВыбраннаяСтрока, Истина);
		ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаЗаголовка);
		ЗаголовкиЗапроса.Сортировать("Имя");
	КонецЕсли; 
	
КонецПроцедуры

Процедура КП_ЗаголовкиЗапросаОписание(Кнопка)
	
	ЗапуститьПриложение("https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%B7%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%BE%D0%B2_HTTP");
	
КонецПроцедуры

Процедура ЗаголовкиОтветаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ЗаголовкиОтвета.Колонки.Описание Тогда
		ПоказатьСтрокуОписанияЗаголовка(ВыбраннаяСтрока);
	ИначеЕсли Колонка = ЭлементыФормы.ЗаголовкиОтвета.Колонки.Значение Тогда
		ирОбщий.ОткрытьЗначениеЛкс(ВыбраннаяСтрока.Значение);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПоказатьСтрокуОписанияЗаголовка(Знач ВыбраннаяСтрока)
	
	СтрокаОписания = мЗаголовкиHttp.Найти(ВыбраннаяСтрока.Имя, "Заголовок");
	Если СтрокаОписания <> Неопределено Тогда
		ирОбщий.ВыбратьСтрокуТаблицыЗначенийЛкс(мЗаголовкиHttp, СтрокаОписания, Ложь, "Описание заголовков");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаголовкиЗапросаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ЗаголовкиЗапроса.Колонки.Описание Тогда
		ПоказатьСтрокуОписанияЗаголовка(ВыбраннаяСтрока);
	КонецЕсли; 

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ирКэш.НомерРежимаСовместимостиЛкс() < 803001 Тогда
		Сообщить("Инструмент доступен только в режиме совместимости 8.3.1 и выше");
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

Процедура КП_ЗаголовкиОтветаПрименитьПеренаправлениеКЗапросу(Кнопка)
	
	ЗаголовокПеренаправления = ЗаголовкиОтвета.Найти(НРег("Location"), "НИмя");
	Если ЗаголовокПеренаправления = Неопределено Тогда
		Сообщить("Заголовок ""Location"" не найден");
		Возврат;
	КонецЕсли; 
	ЗагрузитьКонечныйЗапрос(ЗаголовокПеренаправления.Значение);
	
КонецПроцедуры

Процедура ТипАвторизацииПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

Процедура КПТелоОткрытьФайлЗапросаВПапке(Кнопка)
	
	Если ТелоЗапросаДвоичныеДанные <> Неопределено Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dat");
		ТелоЗапросаДвоичныеДанные.Записать(ИмяВременногоФайла);
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТелоЗапросаСтрока);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
	КонецЕсли; 
	ирОбщий.ОткрытьФайлВПроводникеЛкс(ИмяВременногоФайла);
	
КонецПроцедуры

Процедура ОткрытьЗапросЧерезВременныйФайл(Знач РасширениеФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Если ТелоЗапросаДвоичныеДанные <> Неопределено Тогда
		ТелоЗапросаДвоичныеДанные.Записать(ИмяВременногоФайла);
	Иначе
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТелоЗапросаСтрока);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
	КонецЕсли; 
	ЗапуститьПриложение(ИмяВременногоФайла);

КонецПроцедуры

Процедура КПТелоЗапросаJSON(Кнопка)
	
	ОткрытьЗапросЧерезВременныйФайл("json");
	
КонецПроцедуры

Процедура КПТелоЗапросаXML(Кнопка)
	
	ОткрытьЗапросЧерезВременныйФайл("xml");
	
КонецПроцедуры

Процедура КПТелоЗапросаПросмотрДереваJSON(Кнопка)
	
	ирОбщий.ОткрытьПросмотрДереваJSONЛкс(ТелоЗапросаСтрока, мТекущаяСтрокаДереваЗапросов.Наименование + " - Запрос");
	
КонецПроцедуры

Процедура КПТелоОтветаПросмотрДереваJSON(Кнопка)
	
	ирОбщий.ОткрытьПросмотрДереваJSONЛкс(ТелоОтветаСтрока, мТекущаяСтрокаДереваЗапросов.Наименование + " - Ответ");
	
КонецПроцедуры

Процедура ПараметрыЗапросаЗначениеПриИзменении(Элемент)
	
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура ПараметрыЗапросаПослеУдаления(Элемент)
	
	ОбновитьКонечныйURL();

КонецПроцедуры

Процедура ПараметрыЗапросаИмяПриИзменении(Элемент)
	
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура ДекодироватьПриИзменении(Элемент)
	
	ЗагрузитьКонечныйЗапрос(КонечныйURL);
	
КонецПроцедуры

Процедура КП_КукиЗапросаОписание(Кнопка)
	
	ЗапуститьПриложение("https://ru.wikipedia.org/wiki/Cookie");
	
КонецПроцедуры

Процедура КукиИмяПриИзменении(Элемент)
	
	ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(ЭлементыФормы.КукиЗапроса.ТекущаяСтрока);
	КукиЗапроса.Сортировать("Имя");
	
КонецПроцедуры

Процедура МетодЗапросаПриИзменении(Элемент)
	
	НастроитьЭлементыФормы();
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура НастроитьЭлементыФормы()
	
	НоваяДоступность = Истина
		И мСтрокаЗагруженаВКонсоль
		И мТекущаяСтрокаДереваЗапросов <> Неопределено
		И Не мТекущаяСтрокаДереваЗапросов.ЭтоГруппа;
	ЭлементыФормы.ПанельЗапрос.Доступность = НоваяДоступность;
	ЭлементыФормы.ПанельОтвет.Доступность = НоваяДоступность;
	ЭлементыФормы.ПанельOAuth2.Видимость = ТипАвторизации = "OAuth2";
	Для Каждого СтрокаЗаголовка Из ЗаголовкиЗапроса Цикл
		СтрокаЗаголовка.Генерируемый = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаголовкиЗапросаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура КП_ДанныеФормыЗапросаСформироватьСтрокуТела(Кнопка)
	
	СтрокаЗаголовка = СформироватьТелоЗапросаИзДанныхФормы();
	ЭлементыФормы.ЗаголовкиЗапроса.ТекущаяСтрока = СтрокаЗаголовка;
	ЭлементыФормы.ПанельТелоЗапроса.ТекущаяСтраница = ЭлементыФормы.ПанельТелоЗапроса.Страницы.ТелоЗапросаСтрока;
	
КонецПроцедуры

Процедура КП_КукиЗапросаСформироватьЗаголовок(Кнопка)
	
	СтрокаЗаголовка = СформироватьЗаголовокКуки();
	ЭлементыФормы.ЗаголовкиЗапроса.ТекущаяСтрока = СтрокаЗаголовка;
	ЭлементыФормы.ПанельЗапрос.ТекущаяСтраница = ЭлементыФормы.ПанельЗапрос.Страницы.ЗаголовкиЗапроса;
	
КонецПроцедуры

Процедура КП_ЗаголовкиЗапросаМенеджерТабличногоПоля(Кнопка)
	
	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.ЗаголовкиЗапроса, ЭтаФорма);
	
КонецПроцедуры

Процедура КП_ЗаголовкиОтветаМенеджерТабличногоПоля(Кнопка)
	
	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.ЗаголовкиОтвета, ЭтаФорма);
	
КонецПроцедуры

Процедура КП_ДанныеФормыЗапросаОписание(Кнопка)
	
	ЗапуститьПриложение("https://ru.wikipedia.org/wiki/Multipart/form-data");
	
КонецПроцедуры

Процедура ЗаголовкиЗапросаЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.ЗаголовкиЗапроса, СтандартнаяОбработка,, Истина);

КонецПроцедуры

Процедура ВыполнитьПоискРезультата()
	
	ЭтаФорма.СтатусПоиска = Неопределено;
	ЭтаФорма.РезультатПоиска = Неопределено;
	Если Не ЗначениеЗаполнено(РегулярноеВыражение) Тогда
		ЭтаФорма.СтатусПоиска = "Не заполнено регулярное выражение";
		Возврат;
	КонецЕсли; 
	ТекстГдеИскать = ТекстГдеИскать();
	Если ТекстГдеИскать = Неопределено Тогда
		ЭтаФорма.СтатусПоиска = "Не найдено";
	КонецЕсли; 
	Вхождения = ирОбщий.НайтиРегулярноеВыражениеЛкс(ТекстГдеИскать, РегулярноеВыражение,, Ложь,,, Ложь);
	Если ТипЗнч(Вхождения) = Тип("Строка") Тогда
		ЭтаФорма.СтатусПоиска = "Ошибка";
		Возврат;
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
	    Вхождения = Обработки.ирПлатформа.Создать().ВхожденияРегулярногоВыражения;
	#КонецЕсли
	Если Вхождения.Количество() = 0 Тогда
		ЭтаФорма.СтатусПоиска = "Не найдено";
	Иначе
		ЭтаФорма.СтатусПоиска = "Найдено";
		Если Вхождения[0].Подгруппы.Количество() = 0 Тогда
			ЭтаФорма.РезультатПоиска = Вхождения[0].ТекстВхождения;
		Иначе
			ЭтаФорма.РезультатПоиска = Вхождения[0].Подгруппы[0];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ТекстГдеИскать()
	
	Если ИсточникСтрокиДляПоиска = "<Тело>" Тогда
		ТекстГдеИскать = ТелоОтветаСтрока;
	Иначе
		СтрокаЗаголовка = ЗаголовкиОтвета.Найти(НРег(ИсточникСтрокиДляПоиска), "НИмя");
		Если СтрокаЗаголовка <> Неопределено Тогда
			ТекстГдеИскать = СтрокаЗаголовка.Значение;
		КонецЕсли; 
	КонецЕсли; 
	Возврат ТекстГдеИскать;

КонецФункции

Процедура РегулярноеВыражениеПриИзменении(Элемент)
	
	ВыполнитьПоискРезультата();
	
КонецПроцедуры

Процедура РегулярноеВыражениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Конструктор = ирОбщий.ПолучитьФормуЛкс("Обработка.ирКонструкторРегулярногоВыражения.Форма",, Элемент);
	Конструктор.мРежимРедактора = Истина;
	Конструктор.ПараметрПроверочныйТекст = ТекстГдеИскать();
	Конструктор.ПараметрВыражение = РегулярноеВыражение;
	Конструктор.ОткрытьМодально();
	
КонецПроцедуры

Процедура ИсточникСтрокиДляПоискаПриИзменении(Элемент)
	
	ВыполнитьПоискРезультата();
	
КонецПроцедуры

Процедура ПанельОтветПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.ПанельОтвет.Страницы.Результат = ЭлементыФормы.ПанельОтвет.Страницы[ТекущаяСтраница] Тогда
		ВыполнитьПоискРезультата();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КП_ЗаголовкиОтветаДобавитьВЗапрос(Кнопка)
	
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ЗаголовкиОтвета.ВыделенныеСтроки Цикл
		СтрокаЗаголовка = ЗаголовкиЗапроса.Найти(ВыделеннаяСтрока.Имя, "Имя");
		Если СтрокаЗаголовка = Неопределено Тогда
			СтрокаЗаголовка = ЗаголовкиЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗаголовка, ВыделеннаяСтрока); 
			ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаЗаголовка);
			ЗаголовкиЗапроса.Сортировать("Имя");
			ЭлементыФормы.ЗаголовкиЗапроса.ТекущаяСтрока = СтрокаЗаголовка;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ЗаголовкиЗапросаОписаниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.ЗаголовкиЗапроса, СтандартнаяОбработка,, Истина);

КонецПроцедуры

Процедура ДанныеФормыЗапросаОписаниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.ДанныеФормыЗапроса, СтандартнаяОбработка,, Истина);

КонецПроцедуры

Процедура ДанныеФормыЗапросаЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.ДанныеФормыЗапроса, СтандартнаяОбработка,, Истина);

КонецПроцедуры

Процедура ПараметрыЗапросаОписаниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.ПараметрыЗапроса, СтандартнаяОбработка,, Истина);

КонецПроцедуры

Процедура КП_ДанныеФормыЗапросаЗаполнитьИзСтрокиТела(Кнопка)
	
	ЗаголовокТипаСодержимого = ЗаголовкиЗапроса.Найти(Нрег("Content-Type"), "НИмя");
	Если ЗаголовокТипаСодержимого <> Неопределено Тогда
		// multipart/form-data; boundary="65fd0349-95ae-4604-b788-636e0a5e0d57"
		Если НРег(ирОбщий.ПервыйФрагментЛкс(ЗаголовокТипаСодержимого.Значение, ";")) = "multipart/form-data" Тогда 
			Разделитель = "--" + ирОбщий.СтрокаМеждуМаркерамиЛкс(ЗаголовокТипаСодержимого.Значение, """", """", Ложь, Ложь);
			Если ЗначениеЗаполнено(Разделитель) Тогда
				Если ДанныеФормыЗапроса.Количество() > 0 Тогда
					Ответ = Вопрос("Существующие строки будут удалены. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
					Если Ответ <> КодВозвратаДиалога.ОК Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли; 
				ДанныеФормыЗапроса.Очистить();
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.УстановитьТекст(ТелоЗапросаСтрока);
				ВнутриПараметра = Ложь;
				ВнутриЗначенияПараметра = Ложь;
				ЗаписьЗначения = Неопределено;
				Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
					СтрокаТела = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
					Если Не ВнутриПараметра Тогда 
						Если Найти(СтрокаТела, Разделитель) = 1 Тогда
							ВнутриПараметра = Истина;
							СтрокаПараметра = ДанныеФормыЗапроса.Добавить();
						КонецЕсли; 
					ИначеЕсли ВнутриПараметра Тогда 
						Если Найти(СтрокаТела, Разделитель) = 1 Тогда
							ВнутриПараметра = Ложь;
							ВнутриЗначенияПараметра = Ложь;
							СтрокаПараметра.Значение = ЗаписьЗначения.Закрыть();
						ИначеЕсли Найти(СтрокаТела, "Content-Type:") = 1 Тогда
							// пока не читаем кодировку
							//СтрокаПараметра.Кодировка = "";
						ИначеЕсли Найти(СтрокаТела, "Content-Disposition:") = 1 Тогда
							СтрокаПараметра.Имя = ирОбщий.СтрокаМеждуМаркерамиЛкс(СтрокаТела, "'", "'", Ложь, Ложь);
						ИначеЕсли ПустаяСтрока(СтрокаТела) Тогда 
							ВнутриЗначенияПараметра = Истина;
							ЗаписьЗначения = Новый ЗаписьXML;
							ЗаписьЗначения.УстановитьСтроку("");
							ЗаписьЗначенияПустая = Истина;
						ИначеЕсли ВнутриЗначенияПараметра Тогда 
							Если Не ЗаписьЗначенияПустая Тогда
								ЗаписьЗначения.ЗаписатьБезОбработки(Символы.ПС);
							КонецЕсли; 
							ЗаписьЗначения.ЗаписатьБезОбработки(СтрокаТела);
							ЗаписьЗначенияПустая = Ложь;
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла;
				ДанныеФормыЗапроса.Сортировать("Имя");
				ЭтаФорма.Модифицированность = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КукиЗапросаЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭтаФорма, ЭлементыФормы.КукиЗапроса, СтандартнаяОбработка,, Истина);
	
КонецПроцедуры

Процедура ИсточникТелаЗапросаПриИзменении(Элемент = Неопределено)
	
	НастроитьЭлементыФормы();
	ЭлементыФормы.ПанельТелоЗапроса.ТекущаяСтраница = ЭлементыФормы.ПанельТелоЗапроса.Страницы[ИсточникТелаЗапроса];
	
КонецПроцедуры

Процедура ИсточникТелаЗапросаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура КП_ДвоичныеДанныеТелаЗапросаОчистить(Кнопка)
	
	ЭтаФорма.ТелоЗапросаДвоичныеДанные = Неопределено;
	
КонецПроцедуры

Процедура КП_ЗаголовкиЗапросаОчистить(Кнопка)
	
	ЗаголовкиЗапроса.Очистить();
	
КонецПроцедуры

Процедура КП_ЗаголовкиОтветаСравнить(Кнопка)
	
	ирОбщий.СравнитьСодержимоеЭлементаУправленияЛкс(ЭтаФорма, ЭлементыФормы.ЗаголовкиОтвета);
	
КонецПроцедуры

Процедура КП_ЗаголовкиЗапросаСравнить(Кнопка)
	
	ирОбщий.СравнитьСодержимоеЭлементаУправленияЛкс(ЭтаФорма, ЭлементыФормы.ЗаголовкиЗапроса);
	
КонецПроцедуры

Процедура КП_КукиОтветаСравнить(Кнопка)
	
	ирОбщий.СравнитьСодержимоеЭлементаУправленияЛкс(ЭтаФорма, ЭлементыФормы.КукиОтвета);
	
КонецПроцедуры

Процедура КП_КукиОтветаМенеджерТабличногоПоля(Кнопка)
	
	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.КукиОтвета, ЭтаФорма);
	
КонецПроцедуры

Процедура КП_КукиЗапросаМенеджерТабличногоПоля(Кнопка)
	
	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.КукиЗапроса, ЭтаФорма);
	
КонецПроцедуры

Процедура КП_КукиЗапросаСравнить(Кнопка)
	
	ирОбщий.СравнитьСодержимоеЭлементаУправленияЛкс(ЭтаФорма, ЭлементыФормы.КукиЗапроса);
	
КонецПроцедуры

Процедура КП_ПараметрыЗапросаМенеджерТабличногоПоля(Кнопка)
	
	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.ПараметрыЗапроса, ЭтаФорма);
	
КонецПроцедуры

Процедура СформироватьЗапросOAuth2Нажатие(Элемент)
	
	Данные = Новый Структура("client_id, client_secret, scope, grant_type", OAuth2_КлючКлиента, OAuth2_СекретКлиента, OAuth2_Scope, "client_credentials");
	OAuth2_СервисЛ = OAuth2_Сервис;
	ЭлементыФормы.ДеревоЗапросов.ДобавитьСтроку();
	мТекущаяСтрокаДереваЗапросов.Наименование = ирОбщий.АвтоУникальноеИмяВКоллекцииЛкс(ирОбщий.ПолучитьРодителяСтрокиДереваЛкс(мТекущаяСтрокаДереваЗапросов).Строки, "Авторизация OAuth2 ", "Наименование", Ложь);
	ЗагрузитьКонечныйЗапрос(OAuth2_СервисЛ);
	ЭтаФорма.МетодЗапроса = "POST";
	УстановитьГенерируемыйЗаголовокЗапроса("Content-Type", "application/json");
	ЭтаФорма.ТелоЗапросаСтрока = ирОбщий.СохранитьОбъектВСтрокуJsonЛкс(Данные);
	ОбработкаПрерыванияПользователя();
	КоманднаяПанельВыполнениеВыполнитьЗапрос();
	
КонецПроцедуры

Процедура КукиОтветаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.КукиОтвета.Колонки.Значение Тогда
		ирОбщий.ОткрытьЗначениеЛкс(ВыбраннаяСтрока.Значение, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КонечныйURLДекодированныйПриИзменении(Элемент)
	
	ЗагрузитьКонечныйЗапрос(КонечныйURLДекодированный, Ложь);
	
КонецПроцедуры

Процедура КонечныйURLДекодированныйОткрытие(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаРасширенногоЗначения_НачалоВыбораЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура Надпись6Нажатие(Элемент)
	
	ЗапуститьПриложение(КонечныйURL);
	
КонецПроцедуры

Процедура КП_ПараметрыЗапросаСравнить(Кнопка)
	
	ирОбщий.СравнитьСодержимоеЭлементаУправленияЛкс(ЭтаФорма, ЭлементыФормы.ПараметрыЗапроса);

КонецПроцедуры

Процедура ЗаголовкиОтветаПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура ЗаголовкиОтветаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура КукиОтветаПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КукиОтветаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ПараметрыЗапросаПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура ПараметрыЗапросаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура КукиЗапросаПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КукиЗапросаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ЗаголовкиЗапросаПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура ДействияФормыСгенерироватьПрограммныйКод(Кнопка)
	
	Текст = "";
	ПортВременный = КонечныйПорт(ПортЗапроса, ИспользоватьЗащищенноеСоединение);
	ИнтернетПрокси = ирОбщий.ИнтернетПрокси(СобственныйПрокси, ИспользоватьЗащищенноеСоединение);
	АдресРесурсаСПараметрами = АдресРесурсаСПараметрами();
	Если ИсточникТелаЗапроса = "ДанныеФормыЗапроса" Тогда
		СформироватьТелоЗапросаИзДанныхФормы();
	КонецЕсли; 
	Если КукиЗапроса.Количество() > 0 Тогда
		СформироватьЗаголовокКуки();
	КонецЕсли;
	Текст = Текст + "ИнтернетПрокси = Новый ИнтернетПрокси(" + ?(Не СобственныйПрокси, "ИСТИНА", "ЛОЖЬ") + ");";
	Если СобственныйПрокси Тогда
		СобственныеПрокси = ирОбщий.ВосстановитьЗначениеЛкс("ИнтернетПрокси");
		Протокол = ПротоколЗапроса();
		Если СобственныеПрокси.Свойство(Протокол) Тогда 
			НастройкиПрокси = СобственныеПрокси[Протокол];
			Если ЗначениеЗаполнено(НастройкиПрокси.Сервер) Тогда
				Текст = Текст + "
				|ИнтернетПрокси.Установить(""" + Протокол + """, """ + НастройкиПрокси.Сервер + """, " + XMLСтрока(НастройкиПрокси.Порт) + ", """ + НастройкиПрокси.Пользователь 
					+ """, """ + НастройкиПрокси.Пароль + """, " + ?(НастройкиПрокси.АутентификацияОС, "ИСТИНА", "ЛОЖЬ") + ");";
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	Текст = Текст + "
	|СерверЗапроса = """ + СерверЗапроса + """;
	|ПортВременный = " + XMLСтрока(ПортВременный) + ";
	|ПользовательЗапроса = """ + ПользовательЗапроса + """;
	|ПарольЗапроса = """ + ПарольЗапроса + """;
	|ТаймаутЗапроса = " + XMLСтрока(ТаймаутЗапроса) + ";
	|ЗащищенноеСоединение = " + ?(ИспользоватьЗащищенноеСоединение, "Новый ЗащищенноеСоединениеOpenSSL()", "Неопределено") + ";
	|АутентификацияОС = " + ?(АутентификацияОС, "ИСТИНА", "ЛОЖЬ") + ";
	|СоединениеHTTP = Новый HTTPСоединение(СерверЗапроса, ПортВременный, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС);
	|АдресРесурсаСПараметрами = """ + АдресРесурсаСПараметрами + """;
	|ЗапросHTTP = Новый HTTPЗапрос(АдресРесурсаСПараметрами);";
	Если ИсточникТелаЗапроса = "ДанныеФормыЗапроса" Или ИсточникТелаЗапроса = "ТелоЗапросаСтрока" Тогда
		Текст = Текст + "
		|ТелоЗапросаСтрока = " + ирОбщий.ПолучитьСтроковыйЛитералИзМногострочногоТекстаЛкс(ТелоЗапросаСтрока) + ";
		|КодировкаЗапроса = """ + КодировкаЗапроса + """;
		|ИспользоватьBOMЗапроса = " + ?(ИспользоватьBOM, "ИспользованиеByteOrderMark.Авто", "ИспользованиеByteOrderMark.НеИспользовать") + ";
		|ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапросаСтрока, КодировкаЗапроса, ИспользоватьBOMЗапроса);";
	Иначе
		Текст = Текст + "
		|ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ТелоЗапросаДвоичныеДанные);";
	КонецЕсли; 
	Для Каждого ЗаголовокЗапроса Из ЗаголовкиЗапроса Цикл
		Текст = Текст + "
		|ЗапросHTTP.Заголовки.Вставить(""" + ЗаголовокЗапроса.Имя + """, """ + ЗаголовокЗапроса.Значение + """);";
	КонецЦикла;
	Текст = Текст + "
	|ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод(""" + МетодЗапроса + """, ЗапросHTTP);
	|КодСостояния = ОтветHTTP.КодСостояния;
	|ТелоОтветаСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	|ТелоОтветаДвоичныеДанные = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();";
	Если ЗначениеЗаполнено(РегулярноеВыражение) Тогда
		Если ИсточникСтрокиДляПоиска = "<Тело>" Тогда
			Текст = Текст + "
			|ТекстГдеИскать = ТелоОтветаСтрока;";
		Иначе
			Текст = Текст + "
			|ТекстГдеИскать = ОтветHTTP.Заголовки[" + ИсточникСтрокиДляПоиска + "];";
		КонецЕсли; 
		Текст = Текст + "
		|RegExp = Новый COMОбъект(""VBScript.RegExp"");
		|RegExp.Global = Ложь;
		|RegExp.IgnoreCase = Истина;
		|RegExp.Pattern = """ + РегулярноеВыражение + """;
		|Вхождения = RegExp.Execute(ТекстГдеИскать);
		|Если Вхождения.Count > 0 Тогда
		|	Если Вхождения.Item(0).SubMatches().Count = 0 Тогда
		|		РезультатПоиска = Вхождения.Item(0).Value;
		|	Иначе
		|		РезультатПоиска = Вхождения.Item(0).SubMatches(0);
		|	КонецЕсли; 
		|КонецЕсли;";
	КонецЕсли; 
	ирОбщий.ОперироватьСтруктуройЛкс(Текст);
	
КонецПроцедуры

Функция АдресРесурсаСПараметрами()
	
	Перем АдресРесурсаСПараметрами, СтрокаПараметра, ТекстПараметров;
	
	АдресРесурсаСПараметрами = АдресРесурса;
	Если ирОбщий.СтрокиРавныЛкс(МетодЗапроса, "GET") Тогда 
		ТекстПараметров = "";
		Для Каждого СтрокаПараметра Из ПараметрыЗапроса Цикл
			Если ЗначениеЗаполнено(ТекстПараметров) Тогда
				ТекстПараметров = ТекстПараметров + "&";
			КонецЕсли; 
			ТекстПараметров = ТекстПараметров + СтрокаПараметра.Имя + "=" + СтрокаПараметра.Значение;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстПараметров) Тогда
			АдресРесурсаСПараметрами = АдресРесурсаСПараметрами + "?" + ТекстПараметров;
		КонецЕсли; 
	КонецЕсли;
	Возврат АдресРесурсаСПараметрами;

КонецФункции

мПлатформа = ирКэш.Получить();
мСтрокаЗагруженаВКонсоль = Ложь;
//Параметры.Колонки.Добавить("НИмя");
мСтруктураВосстановления = ирОбщий.ПолучитьСтруктуруВосстановленияКонсолиЛкс("irHttpConsole");
мИменаПростыхСвойствЗапроса = "МетодЗапроса, СерверЗапроса, ПортЗапроса, АдресРесурса, ПользовательЗапроса, ИспользоватьЗащищенноеСоединение, ТипАвторизации, АутентификацияОС, ТаймаутЗапроса, СобственныйПрокси,
|ХранитьПароль, Автоперенаправление, МаксимальныйРазмерОтвета, КодировкаЗапроса, ИспользоватьBOM, ТелоЗапросаСтрока, ТелоЗапросаДвоичныеДанные, РегулярноеВыражение, РезультатПоиска,
|СтатусПоиска, ИсточникСтрокиДляПоиска, ИсточникТелаЗапроса, OAuth2_Сервис, OAuth2_КлючКлиента, OAuth2_СекретКлиента, OAuth2_Scope";
ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирКонсольHTTPЗапросов.Форма.Форма");
