Перем мИсторияФайлов;
Перем мТекущаяСтрокаДереваЗапросов;
Перем мСтрокаЗагруженаВКонсоль;
Перем мИмяОткрытогоФайла;
Перем мПлатформа;
Перем мКодыСостояний;
Перем мГруппыСостояний;
Перем мЗаголовкиHttp;
Перем мИменаПростыхСвойствЗапроса;

Процедура ПриОткрытии()
	
	ОбновитьДоступностьКнопкиВыполнятьНаСервере();
	ЭтаФорма.Модифицированность = Ложь;
	Если Не МодальныйРежим И Не мРежимОтладки Тогда
		// Попытаемся загрузить последний открывавшийся файл
		мИмяОткрытогоФайла = ирОбщий.ВосстановитьЗначениеЛкс("ирКонсольHTTPЗапросов_ИмяФайла");
		Если мИмяОткрытогоФайла = НеОпределено Тогда
			мИмяОткрытогоФайла = "";
		КонецЕсли;
		Если ПустаяСтрока(мИмяОткрытогоФайла) Тогда
			СоздатьФайл();
		Иначе
			Попытка
				ЗагрузитьИзФайла();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
	мИсторияФайлов = ирОбщий.ВосстановитьЗначениеЛкс("ирКонсольHTTPЗапросов_мИсторияФайлов");
	Если мИсторияФайлов = Неопределено Тогда
		мИсторияФайлов = Новый СписокЗначений;
	КонецЕсли;
	ОбновитьПодменюИсторииФайлов();
	ЭтаФорма.ТаймаутЗапроса = 10;
	МассивМетодов = ЭлементыФормы.МетодЗапроса.СписокВыбора;
	МассивМетодов.Добавить("GET");
	МассивМетодов.Добавить("HEAD");
	МассивМетодов.Добавить("PUT");
	МассивМетодов.Добавить("POST");
	МассивМетодов.Добавить("DELETE");
	МассивМетодов.Добавить("PATCH");
	МассивМетодов.Добавить("MERGE");
	МассивМетодов.Добавить("OPTIONS");
	МассивМетодов.Добавить("TRACE");
	МассивМетодов.Добавить("CONNECT");
	СписокВыбора = ЭлементыФормы.МаксимальныйРазмерОтвета.СписокВыбора;
	СписокВыбора.Добавить(1);
	СписокВыбора.Добавить(100);
	СписокВыбора.Добавить(1000);
	СписокВыбора.Добавить(10000);
	СписокВыбора = ЭлементыФормы.КодировкаЗапроса.СписокВыбора;
	СписокВыбора.Добавить("UTF-8");
	СписокВыбора.Добавить("UTF-16");
	СписокВыбора.Добавить("windows-1251");
	мКодыСостояний = ирОбщий.ПолучитьТаблицуИзТабличногоДокументаЛкс(ПолучитьМакет("КодыСостояний"),,,, Истина);
	мГруппыСостояний = ирОбщий.ПолучитьТаблицуИзТабличногоДокументаЛкс(ПолучитьМакет("ГруппыКодовСостояний"),,,, Истина);
	мЗаголовкиHttp = ирОбщий.ПолучитьТаблицуИзТабличногоДокументаЛкс(ПолучитьМакет("Заголовки"),,,, Истина);

КонецПроцедуры

Процедура ПараметрыПредставлениеЗначенияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.Параметры.ТекущаяСтрока.Значение);
	
КонецПроцедуры

Процедура ОбновитьДоступностьКнопкиВыполнятьНаСервере()
	
	ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Кнопки.Сервер.Доступность = Истина
		И Ложь // TODO
		//И Не ирКэш.ЭтоФайловаяБазаЛкс()
		//И Не РежимВнешнейОбработки
		И (Ложь
			Или Не ирКэш.ЛиПортативныйРежимЛкс()
			Или ирПортативный.ЛиСерверныйМодульДоступенЛкс()
			);
			
КонецПроцедуры

Процедура ДействияФормыНовоеОкно(Кнопка)
	
	Если ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока <> Неопределено Тогда
		СохранитьДанныеТекущейСтроки();
		Ответ = Вопрос("Создать в новом окне новый файл и скопировать туда текущий запрос?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли; 
	НоваяФорма = ирОбщий.ОткрытьНовоеОкноОбработкиЛкс(ЭтотОбъект);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		НоваяФорма.СоздатьФайл();
		ПутьВДереве = ирОбщий.ПолучитьСтрокуПутиВДеревеЛкс(ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока, "");
		КопияДерева = ДеревоЗапросов.Скопировать();
		КопияСтроки = ирОбщий.НайтиПоСтрокеПутиВДеревеЛкс(КопияДерева, "", ПутьВДереве);
		НоваяСтрока = НоваяФорма.ДеревоЗапросов.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, КопияСтроки); 
		НоваяФорма.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
		НоваяФорма.ДеревоЗапросов.Строки.Удалить(0);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтаФорма.Модифицированность Тогда
		Ответ = Вопрос("Данные в форме были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если Не СохранитьВФайл() Тогда 
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
		Отказ = Ответ = КодВозвратаДиалога.Отмена;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыОткрытьФайл(Кнопка)
	
	ОткрытьФайл();

КонецПроцедуры

Процедура ОткрытьФайл(РежимОбъединения = Ложь)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки";
	УстановитьФильтрВыбораФайла(ДиалогВыбораФайла);
	Файл = Новый Файл(мИмяОткрытогоФайла);
	ДиалогВыбораФайла.Каталог = Файл.Путь;
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ОткрытьФайлПоПолномуИмени(ДиалогВыбораФайла.ПолноеИмяФайла, РежимОбъединения);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьФильтрВыбораФайла(Знач ДиалогВыбораФайла)
	
	#Если Сервер И Не Сервер Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла;
	#КонецЕсли
	ДиалогВыбораФайла.Фильтр = ирОбщий.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("h1c", "Файлы списка запросов");
	ДиалогВыбораФайла.Расширение = "h1c";

КонецПроцедуры

Процедура ОткрытьФайлПоПолномуИмени(ПолноеИмяФайла, РежимОбъединения = Ложь)
	
	Если РежимОбъединения Тогда
		ЗагрузитьИзФайла(ПолноеИмяФайла);
	Иначе
		мИмяОткрытогоФайла = ПолноеИмяФайла;
		Файл = Новый Файл(мИмяОткрытогоФайла);
		ЗагрузитьИзФайла(, ирОбщий.СтрокиРавныЛкс(Файл.Расширение, ".h1c"));
	КонецЕсли; 
	СохранитьИмяФайла();
	
КонецПроцедуры

Процедура ЗагрузитьИзФайла(ИмяФайла = "", НовыйФормат = Истина)
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайла = мИмяОткрытогоФайла;
		РежимОбъединения = Ложь;
	Иначе
		РежимОбъединения = Истина;
	КонецЕсли; 
	//Проверим существование файла.
	ПолученноеЗначение = ирОбщий.ПрочитатьЗначениеИзФайлаСКонтролемПотерьЛкс(ИмяФайла);
	ДанныеЗагружены = Ложь;
	ЭтаФорма.Модифицированность = РежимОбъединения;
	Если Не РежимОбъединения Тогда
		ОчиститьДанные();
		//УстановитьЗаголовокФормы();
	КонецЕсли;
	Если ТипЗнч(ПолученноеЗначение) = Тип("Структура") Тогда
		ДеревоЗапросовДляЗагрузки = ПолученноеЗначение.ДеревоЗапросов;
	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
		ДеревоЗапросовДляЗагрузки = ПолученноеЗначение;
	Иначе
		ДеревоЗапросовДляЗагрузки = Неопределено;
	КонецЕсли; 
	Если ДеревоЗапросовДляЗагрузки <> Неопределено Тогда
		ирОбщий.СкопироватьДеревоЛкс(ДеревоЗапросовДляЗагрузки, ДеревоЗапросов, Не РежимОбъединения);
		Если ДеревоЗапросовДляЗагрузки.Строки.Количество() > 0 Тогда
			КоординатыТекущейСтроки = ДеревоЗапросовДляЗагрузки.Строки[0].КоординатыТекущейСтроки;
			Попытка
				НоваяТекущаяСтрока = ирОбщий.ПолучитьСтрокуДереваПоКоординатамЛкс(ДеревоЗапросов, КоординатыТекущейСтроки);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ирОбщий.СообщитьСУчетомМодальностиЛкс(ОписаниеОшибки, МодальныйРежим);
				НоваяТекущаяСтрока = Неопределено;
			КонецПопытки; 
			Если НоваяТекущаяСтрока <> Неопределено Тогда
				ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяТекущаяСтрока;
			КонецЕсли; 
		КонецЕсли; 
		ДанныеЗагружены = Истина;
	КонецЕсли; 
	Если Не ДанныеЗагружены Тогда 
		СоздатьФайл();
		Предупреждение("Невозможно загрузить список запросов из указанного файла!
		|Создан новый файл", 10);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСохранитьФайл(Кнопка)
	
	СохранитьВФайл();
	
КонецПроцедуры

Функция СохранитьВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь)
	
	ИмяФайла = "";
	Если ЗначениеЗаполнено(мИмяОткрытогоФайла) Тогда
		Файл = Новый Файл(мИмяОткрытогоФайла);
		ИмяФайла = Файл.Путь + Файл.ИмяБезРасширения + ".h1c";
	КонецЕсли; 
	СохранитьДанныеТекущейСтроки();
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущий файл?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для сохранения";
	УстановитьФильтрВыбораФайла(ДиалогВыбораФайла);
	Файл = Новый Файл(мИмяОткрытогоФайла);
	ДиалогВыбораФайла.Каталог = Файл.Путь;
	КопияДерева = ДеревоЗапросов.Скопировать();
	ВсеСтрокиКопииДерева = ирОбщий.ВсеСтрокиДереваЗначенийЛкс(КопияДерева);
	КопияДерева.Колонки.Добавить("КоординатыТекущейСтроки"); // Такой несистемный прием нужен для совместимости по формату со старыми консолями
	Если КопияДерева.Строки.Количество() > 0 Тогда
		КопияДерева.Строки[0].КоординатыТекущейСтроки = ирОбщий.ПолучитьКоординатыСтрокиДереваЛкс(мТекущаяСтрокаДереваЗапросов);
	КонецЕсли; 
	ДанныеДляФайла = Новый Структура();
	ДанныеДляФайла.Вставить("ДеревоЗапросов", КопияДерева);
	Если ЗапрашиватьИмяФайла Или ПустаяСтрока(ИмяФайла) Тогда
		Если Не ДиалогВыбораФайла.Выбрать() Тогда 
			Возврат Ложь;
		КонецЕсли; 
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли; 
	Если Не ЗначениеВФайл(ИмяФайла, ДанныеДляФайла) Тогда 
		Сообщить("Ошибка записи файла """ + ИмяФайла + """", СтатусСообщения.Внимание);
		Возврат Ложь;
	КонецЕсли; 
	мИмяОткрытогоФайла = ИмяФайла;
	СохранитьИмяФайла();
	ЭтаФорма.Модифицированность = Ложь;
	//УстановитьЗаголовокФормы();
	Обновить();
	Возврат Истина;

КонецФункции

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДействияФормыОПодсистеме(Кнопка)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ирОбщий.ФормаОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура КлсУниверсальнаяКомандаНажатие(Кнопка) Экспорт 
	
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработчикОжиданияСПараметрамиЛкс() Экспорт 
	
	ирОбщий.ОбработчикОжиданияСПараметрамиЛкс();

КонецПроцедуры

Процедура ДействияФормыСтруктураФормы(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруФормыЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	СохранитьДанныеТекущейСтроки();
	ЗагрузитьДанныеТекущейСтроки();
	
КонецПроцедуры

Процедура СохранитьДанныеТекущейСтроки()
	
	Если Истина
		И мСтрокаЗагруженаВКонсоль
		И ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрокаДереваЗапросов <> НеОпределено 
	Тогда
		СтруктураЗапроса = Новый Структура(мИменаПростыхСвойствЗапроса);
		ЗаполнитьЗначенияСвойств(СтруктураЗапроса, ЭтаФорма, мИменаПростыхСвойствЗапроса); 
		Если ХранитьПароль Тогда
			СтруктураЗапроса.Вставить("ПарольЗапроса", Новый ХранилищеЗначения(ПарольЗапроса));
		Иначе
			СтруктураЗапроса.Вставить("ПарольЗапроса");
		КонецЕсли; 
		Если Истина 
			И МаксимальныйРазмерОтвета > 0 
			И ТелоОтветаДвоичныеДанные <> Неопределено 
			И ТелоОтветаДвоичныеДанные.Размер() > МаксимальныйРазмерОтвета 
		Тогда
			ТелоОтветаДвоичныеДанныеДляСохранения = Неопределено;
			ТелоОтветаСтрокаДляСохранения = Неопределено;
		Иначе
			ТелоОтветаДвоичныеДанныеДляСохранения = ТелоОтветаДвоичныеДанные;
			ТелоОтветаСтрокаДляСохранения = ТелоОтветаСтрока;
		КонецЕсли; 
		СтруктураЗапроса.Вставить("ТелоОтветаСтрока", ТелоОтветаСтрокаДляСохранения);
		СтруктураЗапроса.Вставить("ТелоОтветаДвоичныеДанные", ТелоОтветаДвоичныеДанныеДляСохранения);
		СтруктураЗапроса.Вставить("ПараметрыЗапроса", ПараметрыЗапроса.Скопировать());
		СтруктураЗапроса.Вставить("ЗаголовкиЗапроса", ЗаголовкиЗапроса.Скопировать());
		СтруктураЗапроса.Вставить("ДанныеФормыЗапроса", ДанныеФормыЗапроса.Скопировать());
		мТекущаяСтрокаДереваЗапросов.Запрос = СтруктураЗапроса;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеТекущейСтроки()

	мТекущаяСтрокаДереваЗапросов = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	мСтрокаЗагруженаВКонсоль = Истина
		И ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрокаДереваЗапросов <> НеОпределено 
		И Не мТекущаяСтрокаДереваЗапросов.ЭтоГруппа;
	ЭлементыФормы.ТелоОтветаСтрокаHtml.УстановитьТекст("");
	СтруктураЗапроса = Новый Структура(мИменаПростыхСвойствЗапроса);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураЗапроса); 
	ЭтаФорма.ТелоОтветаСтрока = Неопределено;
	ЭтаФорма.ТелоОтветаДвоичныеДанные = Неопределено;
	ЭтаФорма.ПарольЗапроса = Неопределено;
	ЭтаФорма.ХранитьПароль = Истина;
	ЭтаФорма.ТипАвторизации = "Basic";
	ЭтаФорма.ТаймаутЗапроса = 10;
	ЭтаФорма.МетодЗапроса = "GET";
	ЭтаФорма.МаксимальныйРазмерОтвета = 1000;
	ПараметрыЗапроса.Очистить();
	ЗаголовкиЗапроса.Очистить();
	ДанныеФормыЗапроса.Очистить();
	Если мСтрокаЗагруженаВКонсоль Тогда
		СтруктураЗапроса = мТекущаяСтрокаДереваЗапросов.Запрос;
		Если СтруктураЗапроса <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураЗапроса,, "ПараметрыЗапроса, ЗаголовкиЗапроса, ДанныеФормыЗапроса"); 
			ЭлементыФормы.ТелоОтветаСтрокаHtml.УстановитьТекст(ЭтаФорма.ТелоОтветаСтрока);
			Если ТипЗнч(СтруктураЗапроса.ПарольЗапроса) = Тип("ХранилищеЗначения") Тогда
				ЭтаФорма.ПарольЗапроса = СтруктураЗапроса.ПарольЗапроса.Получить();
			КонецЕсли; 
			ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.ПараметрыЗапроса, ЭтаФорма.ПараметрыЗапроса);
			ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.ЗаголовкиЗапроса, ЭтаФорма.ЗаголовкиЗапроса);
			ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(СтруктураЗапроса.ДанныеФормыЗапроса, ЭтаФорма.ДанныеФормыЗапроса);
		КонецЕсли; 
		ВыбраннаяКнопка = ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Кнопки.Найти(мТекущаяСтрокаДереваЗапросов.КонтекстВыполнения);
		ВыбранСпособВыполнения(ВыбраннаяКнопка);
	КонецЕсли;
	ОбновитьДоступностьПанелиЗапроса();
	ОбновитьКонечныйURL();

КонецПроцедуры

Процедура КП_ДеревоДобавитьГруппу(Кнопка)
	
	ЭлементыФормы.ДеревоЗапросов.ДобавитьСтроку();
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока.ЭтоГруппа = Истина;
	
КонецПроцедуры

Процедура ДействияФормыНовыйФайл(Кнопка = Неопределено) 
	
	Если СохранитьВФайл(Истина) Тогда
		СоздатьФайл();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьФайл(Отладка = Ложь) Экспорт 

	мИмяОткрытогоФайла = "";
	СохранитьИмяФайла();
	
	ОчиститьДанные();
	//УстановитьЗаголовокФормы();
	мТекущаяСтрокаДереваЗапросов = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрокаДереваЗапросов.Наименование = ирОбщий.ПолучитьАвтоУникальноеИмяВКоллекцииЛкс(ДеревоЗапросов.Строки, мТекущаяСтрокаДереваЗапросов, "Наименование", Ложь, БазовоеИмяНовойСтроки());
	ПриИзмененииДереваЗапросов();
	ЭтаФорма.Модифицированность = Ложь;
	
КонецПроцедуры

Процедура ПриИзмененииДереваЗапросов()

	ОбновитьДоступностьПанелиЗапроса();
	Если Истина
		И ДеревоЗапросов.Строки.Количество() > 0
		И ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = Неопределено
	Тогда 
	    ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0];
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДоступностьПанелиЗапроса() Экспорт

	НоваяДоступность = Истина
		И мСтрокаЗагруженаВКонсоль
		И мТекущаяСтрокаДереваЗапросов <> Неопределено
		И Не мТекущаяСтрокаДереваЗапросов.ЭтоГруппа;
	ЭлементыФормы.ПанельЗапрос.Доступность = НоваяДоступность;
	ЭлементыФормы.ПанельОтвет.Доступность = НоваяДоступность;
	ЭлементыФормы.ПанельOAuth2.Видимость = ТипАвторизации = "OAuth2";

КонецПроцедуры

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура СохранитьИмяФайла()
	
	ирОбщий.СохранитьЗначениеЛкс("ирКонсольHTTPЗапросов_ИмяФайла", мИмяОткрытогоФайла);
	Если ЗначениеЗаполнено(мИмяОткрытогоФайла) Тогда
		ирОбщий.ДобавитьВИсториюЭлементЛкс(мИсторияФайлов, мИмяОткрытогоФайла);
		ирОбщий.СохранитьЗначениеЛкс("ирКонсольHTTPЗапросов_мИсторияФайлов", мИсторияФайлов);
		ОбновитьПодменюИсторииФайлов();
	КонецЕсли; 
	
КонецПроцедуры // СохранитьИмяФайла()

Процедура ОбновитьПодменюИсторииФайлов()
	
	//Если Не мРежимРедактора Тогда
		Кнопки = ЭлементыФормы.ДействияФормы.Кнопки.ОткрытьПоследние.Кнопки;
		ирОбщий.ОбновитьПодменюИсторииФайловЛкс(мИсторияФайлов, Кнопки);
	//КонецЕсли; 
	
КонецПроцедуры

Процедура ОткрытьФайлИзИстории(Кнопка) 
	
	Если СохранитьВФайл(Истина) Тогда
		СтрокаИстории = мИсторияФайлов[Число(Сред(Кнопка.Имя, 2))];
		ОткрытьФайлПоПолномуИмени(СтрокаИстории.Значение);
	КонецЕсли;
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры

Процедура ОчиститьДанные()
	
	ДеревоЗапросов.Строки.Очистить();
	мТекущаяСтрокаДереваЗапросов = Неопределено;
	ЗагрузитьДанныеТекущейСтроки();
	
КонецПроцедуры // ОчиститьЗначения()

Процедура ДеревоЗапросовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	

КонецПроцедуры

Процедура ДействияФормыОбъединитьФайл(Кнопка)
	
	ОткрытьФайл(Истина);
	
КонецПроцедуры

Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	СохранитьДанныеТекущейСтроки();
	Если Копирование Тогда
		ТекущийРодитель = Родитель;
	Иначе
		ТекущийРодитель = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	КонецЕсли; 
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоЗапросов;
	ИначеЕсли Не ТекущийРодитель.ЭтоГруппа Тогда
		ТекущийРодитель = ирОбщий.ПолучитьРодителяСтрокиДереваЛкс(ТекущийРодитель);
	КонецЕсли; 
	НоваяСтрока = ТекущийРодитель.Строки.Добавить();
	Если Копирование Тогда
		ирОбщий.СкопироватьСтрокиДереваЛкс(ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока, НоваяСтрока);
	КонецЕсли; 
	НоваяСтрока.Наименование = ирОбщий.ПолучитьАвтоУникальноеИмяВКоллекцииЛкс(ТекущийРодитель.Строки, НоваяСтрока.Наименование, "Наименование", Ложь, БазовоеИмяНовойСтроки());
	Элемент.ТекущаяСтрока = НоваяСтрока;
	Элемент.ИзменитьСтроку();

КонецПроцедуры

Функция БазовоеИмяНовойСтроки()
	
	Возврат "Запрос";

КонецФункции

Процедура ДействияФормыСохранитьКак(Кнопка)
	
	СохранитьВФайл(Ложь, Истина);

КонецПроцедуры

Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ирОбщий.ДеревоКонсолиПроверкаПеретаскиванияЛкс(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваАлгоритмов");
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
		И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания[0].Владелец() = ПараметрыЗапроса
	Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СохранитьДанныеТекущейСтроки();
	ирОбщий.ДеревоКонсолиПеретаскиваниеЛкс(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваАлгоритмов", "Наименование");
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
		И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания[0].Владелец() = ПараметрыЗапроса
	Тогда
		СтандартнаяОбработка = Ложь;
		Для Каждого СтрокаПараметра Из ЗначениеПеретаскивания Цикл
			СтрокаНовогоПараметра = Строка.Параметры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовогоПараметра, СтрокаПараметра);
			СтрокаНовогоПараметра.Имя = ирОбщий.ПолучитьАвтоУникальноеИмяВКоллекцииЛкс(Строка.Параметры, СтрокаНовогоПараметра, "Имя");
			ирОбщий.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаНовогоПараметра, "Имя");
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	СохранитьДанныеТекущейСтроки();
	ирОбщий.ДеревоКонсолиНачалоПеретаскиванияЛкс(Элемент, ПараметрыПеретаскивания, Выполнение, "СтрокаДереваАлгоритмов")

КонецПроцедуры

Процедура ПеренестиСтрокуДереваВКорень()
	
	СохранитьДанныеТекущейСтроки();
	НоваяСтрока = ДеревоЗапросов.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекущаяСтрокаДереваЗапросов);
	ирОбщий.СкопироватьДеревоЛкс(мТекущаяСтрокаДереваЗапросов, НоваяСтрока);
	РодительТекущейСтроки = ?(мТекущаяСтрокаДереваЗапросов.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрокаДереваЗапросов.Родитель);
	РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрокаДереваЗапросов));
	мТекущаяСтрокаДереваЗапросов = НеОпределено;
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры // ПеренестиСтрокуДерева()

Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	мТекущаяСтрокаДереваЗапросов = Неопределено;

КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ирОбщий.ОбновитьЗаголовокФормыСОткрытымФайломЛкс(ЭтаФорма, мИмяОткрытогоФайла);
	ирОбщий.ОбновитьЗаголовкиСтраницПанелейЛкс(ЭтаФорма);
	//ЭтаФорма.КоличествоПараметров = Параметры.Количество();
	Если ТелоЗапросаДвоичныеДанные <> Неопределено Тогда
		ЭтаФорма.СтатусДвоичныхДанных = "Двоичные данные установлены";
	Иначе
		ЭтаФорма.СтатусДвоичныхДанных = "Двоичные данные не установлены";
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранСпособВыполнения(Кнопка)
	
	Если Кнопка = Неопределено Или Не Кнопка.Доступность Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Кнопки.Клиент;
	КонецЕсли; 
	Для Каждого КнопкаСпособа Из ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Кнопки Цикл
		КнопкаСпособа.Пометка = Кнопка = КнопкаСпособа;
	КонецЦикла;
	ЭтаФорма.КонтекстВыполнения = Кнопка.Имя;
	мТекущаяСтрокаДереваЗапросов.КонтекстВыполнения = Кнопка.Имя;
	ДоступностьВнешнейОбработкиНаСервре = КонтекстВыполнения = "Клиент" Или Не ирКэш.ЛиПортативныйРежимЛкс();
	ЭлементыФормы.КоманднаяПанельВыполнение.Кнопки.КонтекстВыполнения.Текст = "Контекст: " + Кнопка.Текст;

КонецПроцедуры

Процедура КоманднаяПанельФормыОткрытьИТС(Кнопка)
	
	ирОбщий.ОткрытьСсылкуИТСЛкс("https://its.1c.ru/db/v?doc#bookmark:dev:TI000000116");
	
КонецПроцедуры

Процедура СерверЗапросаПриИзменении(Элемент)
	
	СтруктураURI = ирОбщий.СтруктураURIЛкс(СерверЗапроса);
	ЭтаФорма.СерверЗапроса = СтруктураURI.Хост;
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Функция ПротоколЗапроса()
	Протокол = ?(ИспользоватьЗащищенноеСоединение, "https", "http");
	Возврат Протокол;
КонецФункции

Процедура ОбновитьКонечныйURL()
	
	Результат = "";
	Результат = Результат + ПротоколЗапроса() + "://";
	Результат = Результат + СерверЗапроса;
	Если ЗначениеЗаполнено(ПортЗапроса) И ПортЗапроса <> 80 Тогда
		Результат = Результат + ":" + XMLСтрока(ПортЗапроса);
	КонецЕсли;
	Если Лев(АдресРесурса, 1) = "/" Тогда
		АдресРесурса = Сред(АдресРесурса, 2);
	КонецЕсли; 
	Результат = Результат + "/" + АдресРесурса;
	СтрокаПараметров = "";
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Если ЗначениеЗаполнено(СтрокаПараметров) Тогда
			СтрокаПараметров = СтрокаПараметров + "&";
		КонецЕсли;
		СтрокаПараметров = СтрокаПараметров + ПараметрЗапроса.Имя + "=" + ПараметрЗапроса.Значение;
	КонецЦикла;
	Если ЗначениеЗаполнено(СтрокаПараметров) Тогда
		Результат = Результат + "?" + СтрокаПараметров;
	КонецЕсли; 
	ЭтаФорма.КонечныйURL = Результат;
	
КонецПроцедуры

Процедура АдресНаСервереПриИзменении(Элемент)
	
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура ЗащищенноеПриИзменении(Элемент)
	
	ЭтаФорма.ПортЗапроса = 0;
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура ПортЗапросаПриИзменении(Элемент)
	
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура КонечныйЗапросНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаРасширенногоЗначения_НачалоВыбораЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Функция ПолучитьТелоPOSTЗапросаFormData(СписокСоответствий, РазделительBound = Неопределено, Кодировка = Неопределено)

	ТекстТелаЗапроса = "";
	Если НЕ ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = "UTF-8";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РазделительBound) Тогда
		РазделительBound = "" + Новый УникальныйИдентификатор();
	КонецЕсли;
	Для Каждого СтрСписка Из СписокСоответствий Цикл
		ТекстТелаЗапроса = 	ТекстТелаЗапроса 
		+ Символы.ПС
		+ "--" + РазделительBound
		+ Символы.ПС
		+ "Content-Type: text/plain; charset="
		+ Кодировка
		+ Символы.ПС
		+ "Content-Disposition: form-data; name='"
		+ СтрСписка.Ключ
		+ "'"
		+ Символы.ПС
		+ Символы.ПС
		+ СтрСписка.Значение
		+ Символы.ПС
		+ "--" + РазделительBound;
	КонецЦикла;
	Возврат ТекстТелаЗапроса + "--";
	
КонецФункции

Процедура ДобавитьТокенOAuth2ВЗапрос(ЗапросHTTP, Токен)
	#Если Сервер И Не Сервер Тогда
		ЗапросHTTP = Новый HTTPЗапрос;
	#КонецЕсли
	ЗапросHTTP.Заголовки.Вставить("Authorization", "Bearer " + Токен);
КонецПроцедуры

Функция ПолучитьЗапросHTTP(Сервис, Заголовки = Неопределено, ТелоЗапроса = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Заголовки) Или ТипЗнч(Заголовки) <> Тип("Соответствие") Тогда
		Заголовки = Новый Соответствие;
	КонецЕсли;
	Запрос = Новый HTTPЗапрос(Сервис, Заголовки);
	Если ЗначениеЗаполнено(ТелоЗапроса) Тогда
		Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	КонецЕсли;
	Возврат Запрос;
	
КонецФункции

Функция ПолучитьТокенOAuth2(Сервис, Ключ, Секрет, Scope, СоединениеHTTP)
	
	#Если Сервер И Не Сервер Тогда
		СоединениеHTTP = Новый HTTPСоединение;
	#КонецЕсли
	СтруктураURI = ирОбщий.СтруктураURIЛкс(Сервис);
	Данные = Новый Структура("client_id, client_secret, scope, grant_type", Ключ, Секрет, Scope, "client_credentials");
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ЗапросHTTP = ПолучитьЗапросHTTP(СтруктураURI.ПутьНаСервере, Заголовки, ирОбщий.СохранитьОбъектВСтрокуJsonЛкс(Данные));
	РезультатЗапроса = СоединениеHTTP.ОтправитьДляОбработки(ЗапросHTTP);
	#Если Сервер И Не Сервер Тогда
		РезультатЗапроса = Новый HTTPОтвет;
	#КонецЕсли
	Если РезультатЗапроса.КодСостояния <> 200 Тогда
		Сообщить("Ошибка получения токена OAuth2 - Код ответа " + РезультатЗапроса.КодСостояния);
		Возврат Неопределено;
	КонецЕсли;
	Данные = РезультатЗапроса.ПолучитьТелоКакСтроку();
	СтруктураДанных = ирОбщий.СохранитьОбъектВСтрокуJsonЛкс(Данные);
	Если НЕ СтруктураДанных.Свойство("access_token") Тогда
		Сообщить("Ошибка получения токена OAuth2 - В ответе нет поля ""access_token""");
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтруктураДанных.access_token;
	
КонецФункции

Функция ИспользоватьBOMЗапроса()
	ИспользованиеByteOrderMarkМой = Вычислить("ИспользованиеByteOrderMark"); // Доступен с 8.3.6
	Результат = ?(ИспользоватьBOM, ИспользованиеByteOrderMarkМой.Авто, ИспользованиеByteOrderMarkМой.НеИспользовать);
	Возврат Результат;
КонецФункции

Процедура КоманднаяПанельВыполнениеВыполнитьЗапрос(Кнопка)
	
	Если Не ЗначениеЗаполнено(СерверЗапроса) Тогда
		Сообщить("Необходимо указать сервер запроса");
		Возврат;
	КонецЕсли;
	ПортВременный = КонечныйПорт(ПортЗапроса, ИспользоватьЗащищенноеСоединение);
	ИнтернетПрокси = ирОбщий.ИнтернетПрокси(СобственныйПрокси, ИспользоватьЗащищенноеСоединение);
	ЗащищенноеСоединение = ?(ИспользоватьЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
	СоединениеHTTP = СоединениеHTTP(СерверЗапроса, ПортВременный, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС, "Основное соединение");
	Если СоединениеHTTP = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	#Если Сервер И Не Сервер Тогда
		СоединениеHTTP = Новый HTTPСоединение;
	#КонецЕсли
	ТекстПараметров = "";
	Для Каждого СтрокаПараметра Из ПараметрыЗапроса Цикл
		Если ЗначениеЗаполнено(ТекстПараметров) Тогда
			ТекстПараметров = ТекстПараметров + "&";
		КонецЕсли; 
		ТекстПараметров = ТекстПараметров + СтрокаПараметра.Имя + "=" + СтрокаПараметра.Значение;
	КонецЦикла;
	АдресРесурсаСПараметрами = АдресРесурса;
	Если ЗначениеЗаполнено(ТекстПараметров) Тогда
		АдресРесурсаСПараметрами = АдресРесурсаСПараметрами + "?" + ТекстПараметров;
	КонецЕсли; 
	ЗапросHTTP = Новый HTTPЗапрос(АдресРесурсаСПараметрами);
	Если ТелоЗапросаДвоичныеДанные <> Неопределено Тогда
		ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ТелоЗапросаДвоичныеДанные);
	Иначе
		ЗапросHTTP.УстановитьТелоИзСтроки(ТелоЗапросаСтрока, КодировкаЗапроса, ИспользоватьBOMЗапроса());
	КонецЕсли; 
	Для Каждого ЗаголовокЗапроса Из ЗаголовкиЗапроса Цикл
		ЗапросHTTP.Заголовки.Вставить(ЗаголовокЗапроса.Имя, ЗаголовокЗапроса.Значение);
	КонецЦикла;
	Если ДанныеФормыЗапроса.Количество() > 0 Тогда
		СоответствияДанныеФормы = Новый Соответствие;
		Для Каждого ЭлементДаныеФормы Из ДанныеФормыЗапроса Цикл
			СоответствияДанныеФормы.Вставить(ЭлементДаныеФормы.Имя, ЭлементДаныеФормы.Значение);
		КонецЦикла;
		РазделительBound = "" + Новый УникальныйИдентификатор();
		ТекстТелаЗапроса = ПолучитьТелоPOSTЗапросаFormData(СоответствияДанныеФормы, РазделительBound);
		ЗапросHTTP.УстановитьТелоИзСтроки(ТекстТелаЗапроса, КодировкаЗапроса, ИспользоватьBOMЗапроса());
		ЗапросHTTP.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=""" + РазделительBound + """");
	КонецЕсли;
	Если ТипАвторизации = "OAuth2" Тогда
		Токен = ПолучитьТокенOAuth2(OAuth2_Сервис, OAuth2_КлючКлиента, OAuth2_СекретКлиента, OAuth2_Scope, СоединениеHTTP);
		Если ЗначениеЗаполнено(Токен) Тогда
			ДобавитьТокенOAuth2ВЗапрос(ЗапросHTTP, Токен); 
		КонецЕсли;
	КонецЕсли;
	ВремяНачала = ирОбщий.ПолучитьТекущееВремяВМиллисекундахЛкс();
	ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод(МетодЗапроса, ЗапросHTTP);
	ЭтаФорма.КодСостояния = ОтветHTTP.КодСостояния;
	Для Счетчик = 1 По 5 Цикл
		Если Автоперенаправление И КодСостояния >= 300 И КодСостояния < 400 Тогда 
			СтруктураURL = ирОбщий.СтруктураURIЛкс(ОтветHTTP.Заголовки["Location"]);
			ЗапросHTTP.АдресРесурса = СтруктураURL.ПутьНаСервере;
			ЗащищенноеСоединение = ?(СтруктураURL.ИспользоватьHTTPS, Новый ЗащищенноеСоединениеOpenSSL(), Неопределено);
			СоединениеHTTP = СоединениеHTTP(СерверЗапроса, СтруктураURL.ПортHttp, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС, "Перенаправленное соединение");
			Если СоединениеHTTP = Неопределено Тогда
				Возврат;
			КонецЕсли; 
			#Если Сервер И Не Сервер Тогда
				СоединениеHTTP = Новый HTTPСоединение;
			#КонецЕсли
			ОтветHTTP = СоединениеHTTP.ВызватьHTTPМетод(МетодЗапроса, ЗапросHTTP);
			ЭтаФорма.КодСостояния = ОтветHTTP.КодСостояния;
		Иначе
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	ВремяКонца = ирОбщий.ПолучитьТекущееВремяВМиллисекундахЛкс();
	ДлительностьВыполнения = ВремяКонца - ВремяНачала;
	мТекущаяСтрокаДереваЗапросов.Длительность = ДлительностьВыполнения;
	ЭтаФорма.ТелоОтветаСтрока = ОтветHTTP.ПолучитьТелоКакСтроку();
	ЭлементыФормы.ТелоОтветаHtml.УстановитьТекст("<html></html>");
	ЭлементыФормы.ТелоОтветаHtml.УстановитьТекст(ТелоОтветаСтрока);
	ЭлементыФормы.ТелоОтветаСтрокаHtml.УстановитьТекст(ТелоОтветаСтрока);
	ЭтаФорма.ТелоОтветаДвоичныеДанные = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
	ЭтаФорма.КоличествоСимволовОтвета = СтрДлина(ТелоОтветаСтрока);
	ЭтаФорма.КоличествоБайтОтвета = ТелоОтветаДвоичныеДанные.Размер();
	ЗаголовкиОтвета.Очистить();
	Для Каждого ЗаголовокОтвета Из ОтветHTTP.Заголовки Цикл
		СтрокаЗаголовка = ЗаголовкиОтвета.Добавить();
		СтрокаЗаголовка.Имя = ЗаголовокОтвета.Ключ;
		СтрокаЗаголовка.Значение = ЗаголовокОтвета.Значение;
		СтрокаОписания = мЗаголовкиHttp.Найти(ЗаголовокОтвета.Ключ, "Заголовок");
		Если СтрокаОписания <> Неопределено Тогда
			СтрокаЗаголовка.Описание = СтрокаОписания.Описание;
		КонецЕсли; 
	КонецЦикла;
	ЗаголовкиОтвета.Сортировать("Имя");
	#Если Сервер И Не Сервер Тогда
		мКодыСостояний = Новый ТаблицаЗначений;
	#КонецЕсли
	СтрокаКодаСостояния = мКодыСостояний.Найти(КодСостояния, "Код");
	ЭтаФорма.ОписаниеКодаСостояния = "";
	Если СтрокаКодаСостояния <> Неопределено Тогда
		ЭтаФорма.ОписаниеКодаСостояния = СтрокаКодаСостояния.Описание;
	КонецЕсли; 
	ЭтаФорма.ГруппаКодовСостояний = "";
	Для Каждого СтрокаГруппы Из мГруппыСостояний Цикл
		Если Цел(СтрокаГруппы.Код / 100) = Цел(КодСостояния / 100) Тогда
			ЭтаФорма.ГруппаКодовСостояний = СтрокаГруппы.Описание;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

Функция СоединениеHTTP(СерверЗапроса, ПортВременный, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС, ПредставлениеСоединения = "Соединение")
	
	Попытка
		// параметр АутентификацияОС появился в 8.3.7
		СоединениеHTTP = Вычислить("Новый HTTPСоединение(СерверЗапроса, ПортВременный, ПользовательЗапроса, ПарольЗапроса, ИнтернетПрокси, ТаймаутЗапроса, ЗащищенноеСоединение, АутентификацияОС)");
	Исключение
		Сообщить(ПредставлениеСоединения + " не установлено по причине: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	Возврат СоединениеHTTP;

КонецФункции

Функция КонечныйПорт(Порт, ИспользоватьЗащищенноеСоединение = Ложь)
	
	Если ЗначениеЗаполнено(Порт) Тогда
		ПортВременный = Порт;
	Иначе
		Если ИспользоватьЗащищенноеСоединение Тогда
			ПортВременный = 443;
		Иначе
			ПортВременный = 80;
		КонецЕсли; 
	КонецЕсли;
	Возврат ПортВременный;

КонецФункции

Процедура КонечныйЗапросПриИзменении(Элемент)
	
	ЗагрузитьКонечныйЗапрос(КонечныйURL);
	
КонецПроцедуры

Процедура ЗагрузитьКонечныйЗапрос(СтрокаURL)
	
	Если ДекодироватьURL Тогда
		СтрокаURLДекодированная = РаскодироватьСтроку(СтрокаURL, СпособКодированияСтроки.КодировкаURL);
	Иначе
		СтрокаURLДекодированная = СтрокаURL;
	КонецЕсли; 
	СтруктураURI = ирОбщий.СтруктураURIЛкс(СтрокаURLДекодированная);
	ЭтаФорма.СерверЗапроса = СтруктураURI.Хост;
	ЭтаФорма.ПортЗапроса = СтруктураURI.Порт;
	Если ЗначениеЗаполнено(СтруктураURI.Логин) Тогда
		ЭтаФорма.ПользовательЗапроса = СтруктураURI.Логин;
		ЭтаФорма.ПарольЗапроса = СтруктураURI.Пароль;
	КонецЕсли; 
	ЭтаФорма.ИспользоватьЗащищенноеСоединение = СтруктураURI.ИспользоватьHTTPS;
	ЭтаФорма.АдресРесурса = СтруктураURI.ПутьНаСервере;
	ПараметрыЗапроса.Очистить();
	Фрагменты = ирОбщий.ПолучитьМассивИзСтрокиСРазделителемЛкс(АдресРесурса, "?");
	Если Фрагменты.Количество() > 1 Тогда
		ЭтаФорма.АдресРесурса = Фрагменты[0];
		Фрагменты = ирОбщий.ПолучитьМассивИзСтрокиСРазделителемЛкс(Фрагменты[1], "?");
		Для Каждого Фрагмент Из Фрагменты Цикл
			СтрокаПараметра = ПараметрыЗапроса.Добавить();
			СтрокаПараметра.Имя = ирОбщий.ПолучитьПервыйФрагментЛкс(Фрагмент, "=");
			СтрокаПараметра.Значение = ирОбщий.ПолучитьПоследнийФрагментЛкс(Фрагмент, "=");
		КонецЦикла;
	КонецЕсли;
	ОбновитьКонечныйURL();
	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

Процедура ДействияФормыНастройкиПрокси(Кнопка)
	
	ФормаПрокси = ПолучитьФорму("Прокси");
	ФормаПрокси.ПараметрПротокол = ПротоколЗапроса();
	ФормаПрокси.Открыть();
	
КонецПроцедуры

Процедура КПТелоОтветаJSON(Кнопка)
	
	ОткрытьОтветЧерезВременныйФайл("json");
	
КонецПроцедуры

Процедура ОткрытьОтветЧерезВременныйФайл(Знач РасширениеФайла)
	
	Если ТелоОтветаДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	ТелоОтветаДвоичныеДанные.Записать(ИмяВременногоФайла);
	ЗапуститьПриложение(ИмяВременногоФайла);

КонецПроцедуры

Процедура КПТелоОтветаXML(Кнопка)
	
	ОткрытьОтветЧерезВременныйФайл("xml");

КонецПроцедуры

Процедура КПТелоОтветаHTML(Кнопка)

	ОткрытьОтветЧерезВременныйФайл("html");
	
КонецПроцедуры

Процедура ЗаголовкиОтветаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ТелоЗапросаПриИзменении(Элемент)
	
	ЭтаФорма.ТелоЗапросаДвоичныеДанные = Неопределено;
	
КонецПроцедуры

Процедура КПТелоЗагрузитьТекстИзФайла(Кнопка)
	
	ИмяФайла = ирОбщий.ВыбратьФайлЛкс();
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли; 
	ЭтаФорма.ТелоЗапросаДвоичныеДанные = Неопределено;
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	ЭтаФорма.ТелоЗапросаСтрока = ТекстовыйДокумент.ПолучитьТекст();
	
КонецПроцедуры

Процедура КПТелоЗагрузитьДвоичныеДанныеИзФайла(Кнопка)
	
	ИмяФайла = ирОбщий.ВыбратьФайлЛкс();
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли; 
	ЭтаФорма.ТелоЗапросаДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла);
	ЭтаФорма.ТелоЗапросаСтрока = ТекстовыйДокумент.ПолучитьТекст();

КонецПроцедуры

Процедура КПТелоОтветаОткрытьФайлВПапке(Кнопка)
	
	Если ТелоОтветаДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dat");
	ТелоОтветаДвоичныеДанные.Записать(ИмяВременногоФайла);
	ирОбщий.ОткрытьФайлВПроводникеЛкс(ИмяВременногоФайла);

КонецПроцедуры

Процедура ОписаниеКодаСостоянияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ОткрытьЗначениеЛкс(мКодыСостояний, Ложь);
	
КонецПроцедуры

Процедура ГруппаКодовСостоянийНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ОткрытьЗначениеЛкс(мГруппыСостояний, Ложь);
	
КонецПроцедуры

Процедура ЗаголовкиЗапросаИмяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	#Если Сервер И Не Сервер Тогда
		мЗаголовкиHttp = Новый ТаблицаЗначений;
	#КонецЕсли
	ЗаголовкиОсновные = мЗаголовкиHttp.НайтиСтроки(Новый Структура("Основной", Истина));
	ЗаголовкиЗапросаЦелого = мЗаголовкиHttp.НайтиСтроки(Новый Структура("ЗапросЦелый", Истина));
	ЗаголовкиЗапросаПорции = мЗаголовкиHttp.НайтиСтроки(Новый Структура("ЗапросПорция", Истина));
	ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(ЗаголовкиЗапросаЦелого, ЗаголовкиОсновные);
	ирОбщий.СкопироватьУниверсальнуюКоллекциюЛкс(ЗаголовкиЗапросаПорции, ЗаголовкиОсновные);
	ДоступныеЗаголовкиЗапроса = мЗаголовкиHttp.Скопировать(ЗаголовкиОсновные);
	ДоступныеЗаголовкиЗапроса.Сортировать("Заголовок");
	НачальнаяСтрока = ДоступныеЗаголовкиЗапроса.Найти(ЭлементыФормы.ЗаголовкиЗапроса.ТекущиеДанные.Имя, "Заголовок");
	Если НачальнаяСтрока = Неопределено Тогда
		НачальнаяСтрока = ДоступныеЗаголовкиЗапроса[0];
	КонецЕсли; 
	ВыбраннаяСтрока = ДоступныеЗаголовкиЗапроса.ВыбратьСтроку("Выберите заголовок запроса", НачальнаяСтрока);
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ЭлементыФормы.ЗаголовкиЗапроса.ТекущиеДанные.Имя = ВыбраннаяСтрока.Заголовок;
		ЭлементыФормы.ЗаголовкиЗапроса.ТекущиеДанные.Описание = ВыбраннаяСтрока.Описание;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КП_ЗаголовкиЗапросаОписание(Кнопка)
	
	ЗапуститьПриложение("https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_%D0%B7%D0%B0%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BA%D0%BE%D0%B2_HTTP");
	
КонецПроцедуры

Процедура ЗаголовкиОтветаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ЗаголовкиОтвета.Колонки.Описание Тогда
		ПоказатьСтрокуОписанияЗаголовка(ВыбраннаяСтрока);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПоказатьСтрокуОписанияЗаголовка(Знач ВыбраннаяСтрока)
	
	СтрокаОписания = мЗаголовкиHttp.Найти(ВыбраннаяСтрока.Имя, "Заголовок");
	Если СтрокаОписания <> Неопределено Тогда
		мЗаголовкиHttp.ВыбратьСтроку(, СтрокаОписания);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаголовкиЗапросаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ЗаголовкиЗапроса.Колонки.Описание Тогда
		ПоказатьСтрокуОписанияЗаголовка(ВыбраннаяСтрока);
	КонецЕсли; 

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ирКэш.НомерРежимаСовместимостиЛкс() < 803007 Тогда
		Сообщить("Инструмент доступен только в режиме совместимости 8.3.7 и выше");
		Отказ = Истина;
	КонецЕсли; 

КонецПроцедуры

Процедура КП_ЗаголовкиОтветаПрименитьПеренаправлениеКЗапросу(Кнопка)
	
	ЗаголовокПеренаправления = ЗаголовкиОтвета.Найти("Location", "Имя");
	Если ЗаголовокПеренаправления = Неопределено Тогда
		Сообщить("Заголовок ""Location"" не найден");
		Возврат;
	КонецЕсли; 
	ЗагрузитьКонечныйЗапрос(ЗаголовокПеренаправления.Значение);
	
КонецПроцедуры

Процедура ТипАвторизацииПриИзменении(Элемент)
	
	ОбновитьДоступностьПанелиЗапроса();
	
КонецПроцедуры

Процедура КПТелоОткрытьФайлЗапросаВПапке(Кнопка)
	
	Если ТелоЗапросаДвоичныеДанные <> Неопределено Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dat");
		ТелоЗапросаДвоичныеДанные.Записать(ИмяВременногоФайла);
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТелоЗапросаСтрока);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
	КонецЕсли; 
	ирОбщий.ОткрытьФайлВПроводникеЛкс(ИмяВременногоФайла);
	
КонецПроцедуры

Процедура ОткрытьЗапросЧерезВременныйФайл(Знач РасширениеФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Если ТелоЗапросаДвоичныеДанные <> Неопределено Тогда
		ТелоЗапросаДвоичныеДанные.Записать(ИмяВременногоФайла);
	Иначе
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТелоЗапросаСтрока);
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);
	КонецЕсли; 
	ЗапуститьПриложение(ИмяВременногоФайла);

КонецПроцедуры

Процедура КПТелоЗапросаJSON(Кнопка)
	
	ОткрытьЗапросЧерезВременныйФайл("json");
	
КонецПроцедуры

Процедура КПТелоЗапросаXML(Кнопка)
	
	ОткрытьЗапросЧерезВременныйФайл("xml");
	
КонецПроцедуры

Процедура КПТелоЗапросаПросмотрДереваJSON(Кнопка)
	
	ирОбщий.ОткрытьПросмотрДереваJSONЛкс(ТелоЗапросаСтрока, мТекущаяСтрокаДереваЗапросов.Наименование + " - Запрос");
	
КонецПроцедуры

Процедура КПТелоОтветаПросмотрДереваJSON(Кнопка)
	
	ирОбщий.ОткрытьПросмотрДереваJSONЛкс(ТелоОтветаСтрока, мТекущаяСтрокаДереваЗапросов.Наименование + " - Ответ");
	
КонецПроцедуры

Процедура ПараметрыЗапросаЗначениеПриИзменении(Элемент)
	
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура ПараметрыЗапросаПослеУдаления(Элемент)
	
	ОбновитьКонечныйURL();

КонецПроцедуры

Процедура ПараметрыЗапросаИмяПриИзменении(Элемент)
	
	ОбновитьКонечныйURL();
	
КонецПроцедуры

Процедура ДекодироватьПриИзменении(Элемент)
	
	ЗагрузитьКонечныйЗапрос(КонечныйURL);
	
КонецПроцедуры

Процедура КП_ЗаголовкиЗапросаЗагрузитьЗаголовкиОтвета(Кнопка)
	
	ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(ЗаголовкиОтвета, ЗаголовкиЗапроса);

КонецПроцедуры

мПлатформа = ирКэш.Получить();
мСтрокаЗагруженаВКонсоль = Ложь;
//Параметры.Колонки.Добавить("НИмя");
мСтруктураВосстановления = ирОбщий.ПолучитьСтруктуруВосстановленияКонсолиЛкс("irHttpConsole");
мИменаПростыхСвойствЗапроса = "МетодЗапроса, СерверЗапроса, ПортЗапроса, АдресРесурса, ПользовательЗапроса, ИспользоватьЗащищенноеСоединение, ТипАвторизации, АутентификацияОС, ТаймаутЗапроса, СобственныйПрокси,
|ДекодироватьURL, ХранитьПароль, Автоперенаправление, МаксимальныйРазмерОтвета, КодировкаЗапроса, ИспользоватьBOM, ТелоЗапросаСтрока, ТелоЗапросаДвоичныеДанные";
ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирКонсольHTTPЗапросов.Форма.Форма");
