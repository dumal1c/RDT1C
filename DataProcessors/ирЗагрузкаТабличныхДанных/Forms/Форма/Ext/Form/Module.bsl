Перем РежимРедактора Экспорт;
Перем ПараметрОтбор Экспорт;
Перем ПараметрТабличныйДокумент Экспорт;

Функция СохраняемаяНастройкаФормы(выхНаименование, выхИменаСвойств) Экспорт 
	СинхронизироватьРеквизитыОбъекта();
	Результат = мПолучитьНастройку();
	Возврат Результат;
КонецФункции

Процедура ЗагрузитьНастройкуВФорме(Настройка, ДопПараметры = Неопределено, ИзФайла = Ложь) Экспорт 
	
	ЗаменитьДанныеТДиТЗ = Ложь;
	Если ДопПараметры = Неопределено Или ДопПараметры.РазрешитьЗаменуДанныхТДиТЗ Тогда
		ЗаменитьДанныеТДиТЗ = Истина;
		СтруктураПозицийТД = СтруктураПозицийТабличногоДокумента();
		Если Ложь
			Или ТаблицаЗначений.Колонки.Количество() > 1 
			Или ЗначениеЗаполнено(ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиЗаголовков, 1).Текст) 
		Тогда
			Ответ = Вопрос("Хотите заменить табличный документ и таблицу значений на сохраненные ранее для выбранной таблицы БД?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			ЗаменитьДанныеТДиТЗ = Ответ = КодВозвратаДиалога.Да;
		КонецЕсли; 
	КонецЕсли; 
	мЗагрузитьНастройку(Настройка, ЗаменитьДанныеТДиТЗ);
	СинхронизироватьРеквизитыОбъекта(Ложь);
	ОбновитьФлагиСохраненияТДиТЗ(ЗаменитьДанныеТДиТЗ, ИзФайла);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыСохранитьЗначения(Кнопка)
	
	СинхронизироватьРеквизитыОбъекта();
	ирОбщий.ВыбратьИСохранитьНастройкуФормыЛкс(ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельФормыВосстановитьЗначения(Кнопка)
	
    ирОбщий.ВыбратьИЗагрузитьНастройкуФормыЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура УстановитьИсточникВФорме(РазрешитьЗаменуДанныхТДиТЗ = Истина)
	
	ОчиститьСопоставлениеКолонокБД();
	УстановитьИсточник();
	мТекущееПолноеИмяТаблицы = ПолноеИмяТаблицы;
	ОбновитьФлагиСохраненияТДиТЗ(Ложь);
	ирОбщий.СоздатьМенеджерСохраненияНастроекФормыЛкс(ЭтаФорма, ПолноеИмяТаблицы, Не РежимРедактора, Новый Структура("РазрешитьЗаменуДанныхТДиТЗ", РазрешитьЗаменуДанныхТДиТЗ));
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	ВыявитьНеуникальныеКлючи();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	//ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ПолеПоиска.Видимость = мЭтоСсылочныйОбъект;
	//ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ПолеПоиска.ИзменятьВидимость = мЭтоСсылочныйОбъект;
	ирОбщий.ОбновитьЗаголовкиСтраницПанелейЛкс(ЭтаФорма);
	ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭтаФорма.Заголовок,, ПолноеИмяТаблицы, ": ");
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	СинхронизироватьРеквизитыОбъекта();
	Если Ложь
		Или ПараметрТабличныйДокумент <> Неопределено 
		Или ТаблицаЗначений.Колонки.Количество() <= 1
	Тогда
		ЭлементыФормы.ТабличныйДокумент.Очистить();
	КонецЕсли; 
	ПолученТабличныйДокумент = Ложь;
	Если ПараметрТабличныйДокумент <> Неопределено Тогда
		ЭлементыФормы.ТабличныйДокумент.ВставитьОбласть(ПараметрТабличныйДокумент.Область(),,, Ложь);
		ПолученТабличныйДокумент = Истина;
	КонецЕсли;
	ПолученаТаблицаЗначений = ТаблицаЗначений.Колонки.Количество() > 1 Или ТаблицаЗначений.Количество() > 0;
	Если Истина
		И ТаблицаЗначений.Количество() > 0
		И ТабличныйДокумент.ВысотаТаблицы = 0
	Тогда
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаЗначений;
	КонецЕсли;
	УстановитьИсточникВФорме(Не ПолученТабличныйДокумент И Не ПолученаТаблицаЗначений);
	Если ПараметрОтбор <> Неопределено Тогда
		#Если Сервер И Не Сервер Тогда
			ПараметрОтбор = Новый Структура;
		#КонецЕсли
		Для Каждого КлючИЗначение Из ПараметрОтбор Цикл
			СтрокаПоля = СопоставлениеКолонокБД.Найти(КлючИЗначение.Ключ, "ИмяКолонкиПриемника");
			СтрокаПоля.Значение = КлючИЗначение.Значение;
		КонецЦикла;
	КонецЕсли;
	НастроитьЭлементыФормы();
	Если Не РежимРедактора Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Применить);
	КонецЕсли; 
	ирОбщий.УстановитьДоступностьВыполненияНаСервереЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если мКонсольЗапросов <> Неопределено Тогда
		мКонсольЗапросов.УничтожитьКомпоненты();
	КонецЕсли; 
	ирОбщий.Форма_ПриЗакрытииЛкс(ЭтаФорма, Не РежимРедактора);
	
КонецПроцедуры

Процедура ПолноеИмяТаблицыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ОткрытьОбъектМетаданныхЛкс(ПолучитьМетаданныеИсточника());
	
КонецПроцедуры

Процедура КоманднаяПанельЗагружаемыеРеквизитыУстановитьФлажки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхИлиОтобранныхСтрокЛкс(ЭлементыФормы.СопоставлениеКолонокТЗ, , Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельЗагружаемыеРеквизитыСнятьФлажки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхИлиОтобранныхСтрокЛкс(ЭлементыФормы.СопоставлениеКолонокТЗ, , Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаКонтрольЗаполнения(Кнопка)
	
	//СформироватьСтруктуруКолонок();
	КонтрольЗаполнения();
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаОбновить(Кнопка)
	
	ОбновитьДанныеТабличногоДокумента();
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаПредыдущееПримечание(Кнопка)
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево - 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка > 0 Цикл
		
		Пока Не Нашли и Колонка > 0 Цикл
			
			Область = ТабличныйДокумент.Область(Строка, Колонка);
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка - 1;
		КонецЦикла;
		Строка = Строка - 1;
		Колонка = ТабличныйДокумент.ШиринаТаблицы;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнуто начало документа");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаСледующееПримечание(Кнопка)
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	Нашли = Ложь;
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево + 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	Пока Не Нашли и Строка <= ТабличныйДокумент.ВысотаТаблицы Цикл
		Пока Не Нашли и Колонка <=  ТабличныйДокумент.ШиринаТаблицы Цикл
			Область = ТабличныйДокумент.Область(Строка, Колонка);
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			Колонка = Колонка + 1;
		КонецЦикла;
		Строка = Строка + 1;
		Колонка = 1;
	КонецЦикла;
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнут конец документа");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаСохранить(Кнопка)
	
	ирОбщий.СохранитьТабличныйДокументИнтерактивноЛкс(ЭлементыФормы.ТабличныйДокумент);
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаОткрыть(Кнопка)
	
	Результат = ирОбщий.ЗагрузитьТабличныйДокументИнтерактивноЛкс(ЭлементыФормы.ТабличныйДокумент);
	Если Результат <> Неопределено Тогда
		ОбновитьФиксациюШапкиТабличногоДокумента();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельВыбратьЗначениеВыбратьЗначение(Кнопка)
	
	ВыбратьЗначениеВЯчейке();
	
КонецПроцедуры

Процедура ОбновитьФлагиСохраненияТДиТЗ(Знач ЗаменитьДанныеТДиТЗ, Знач ИзФайла = Ложь)
	
	ЭтотОбъект.СохранятьДанныеТД = Ложь;
	ЭтотОбъект.СохранятьДанныеТЗ = Ложь;
	Если Не ИзФайла И ЗаменитьДанныеТДиТЗ Тогда
		СтруктураПозицийТД = СтруктураПозицийТабличногоДокумента();
		ЭтотОбъект.СохранятьДанныеТД = ТабличныйДокумент.ВысотаТаблицы >= СтруктураПозицийТД.НомерСтрокиДанных;
		ЭтотОбъект.СохранятьДанныеТЗ = ТаблицаЗначений.Количество() > 0;
	КонецЕсли; 

КонецПроцедуры

Процедура КоманднаяПанельФормыСохранитьЗначенияВФайл(Кнопка)
	
	СинхронизироватьРеквизитыОбъекта();
	Настройки = мПолучитьНастройку(Истина);
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирОбщий.СохранитьЗначениеВФайлИнтерактивноЛкс(Настройки, "sxl", "Настройка загрузки табличных данных", Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВосстановитьЗначенияИзФайла(Кнопка)
	
	Настройка = ирОбщий.ЗагрузитьЗначениеИзФайлаИнтерактивноЛкс("sxl", "Настройка загрузки табличных данных");
	Если Настройка <> Неопределено Тогда
		ЗагрузитьНастройкуВФорме(Настройка,, Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыКонвертировать(Кнопка = Неопределено)
	
	Для Каждого СтрокаКолонки Из СопоставлениеКолонокТЗ Цикл
		Если СтрокаКолонки.РежимКонвертации = "Вычислять" Тогда
			Если Не ЗначениеЗаполнено(СтрокаКолонки.Алгоритм) Тогда
				ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока = СтрокаКолонки;
				ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяКолонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Алгоритм;
				ирОбщий.СообщитьЛкс("Необходимо задать алгоритм конвертации значения", СтатусСообщения.Внимание);
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Если ТаблицаЗначений.Колонки.Количество() <= 1 Тогда
		КоманднаяПанельТаблицаЗначенийЗаполнитьИзТабличногоДокумента();
	КонецЕсли; 
	ЗагрузитьВТаблицуЗначенийИзТабличногоДокумента();
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	ВыполнитьЗапросДополнения();
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	РежимЗагрузкиИскать = ТекущиеДанные.РежимКонвертации = "Искать";
	
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекущиеДанные);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоВладельцу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоВладельцу) = Неопределено Тогда
		СписокВыбора.Вставить(0, ТекущиеДанные.СвязьПоВладельцу, ТекущиеДанные.СвязьПоВладельцу);
	КонецЕсли;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	СписокВыбора = ПолучитьСписокСвязейПоТипу(ТекущиеДанные);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоТипу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоТипу) = Неопределено Тогда
		СписокВыбора.Вставить(0,ТекущиеДанные.СвязьПоТипу,ТекущиеДанные.СвязьПоТипу);
	КонецЕсли;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ЭлементСвязиПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Значение.ЭлементУправления.КнопкаВыбора = ТипЗНЧ(ТекущиеДанные.Значение) <> Тип("Строка");
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, , "Значение");
	РежимЗагрузкиВычислять = ДанныеСтроки.РежимКонвертации = "Вычислять";
	Если РежимЗагрузкиВычислять Тогда
		ОформлениеСтроки.Ячейки.ИскатьПо.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СвязьПоВладельцу.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СвязьПоТипу.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЭлементСвязиПоТипу.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.Алгоритм.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ДанныеСтроки.Алгоритм);
	Иначе
		ОформлениеСтроки.Ячейки.Алгоритм.Видимость = Ложь;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.ОбрезатьКрайниеПробелы.Видимость = ДанныеСтроки.ОписаниеТипов.СодержитТип(Тип("Строка"));
	Если ДанныеСтроки.Пометка Тогда
		Если ДанныеСтроки.РежимКонвертации <> "Искать" Тогда
			ЦветРежимЗагрузкиИскать = ирОбщий.ЦветТекстаНеактивностиЛкс();
			ОформлениеСтроки.Ячейки.ИскатьПо.ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.СвязьПоВладельцу.ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.СвязьПоТипу.ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.ЭлементСвязиПоТипу.ЦветТекста = ЦветРежимЗагрузкиИскать;
		КонецЕсли;
	Иначе
		ОформлениеСтроки.ЦветТекста = ирОбщий.ЦветТекстаНеактивностиЛкс();
	КонецЕсли;
	ОформлениеСтроки.Ячейки.КолонкаИсточника.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.КолонкаПриемника.Видимость = Ложь;
	ирОбщий.ОформитьЯчейкуАлгоритмаВТабличномПолеЛкс(ОформлениеСтроки);
	ирОбщий.ОформитьЯчейкуСРасширеннымЗначениемЛкс(ОформлениеСтроки.Ячейки.ОписаниеТипов,,, Ложь);

КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	
	Описание = ТекущиеДанные.ДоступноеОписаниеТипов;
	МассивТипов = Новый Массив;
	Для Каждого Тип Из Описание.Типы() Цикл
		МассивТипов.Добавить(Тип);
	КонецЦикла;
	
	Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов, Описание.КвалификаторыЧисла, Описание.КвалификаторыСтроки, Описание.КвалификаторыДаты);
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ТекущиеДанные.ОписаниеТипов = ТекущиеДанные.ДоступноеОписаниеТипов;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	
	ТекущиеДанные.Значение = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.Значение);
	
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекущиеДанные);
	ТекущиеДанные.ИскатьПо = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные);
	ТекущиеДанные.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	СписокВыбора = ПолучитьСписокСвязейПоТипу(ТекущиеДанные);
	ТекущиеДанные.СвязьПоТипу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.Значение.ЭлементУправления.КнопкаВыбора = Не ТипЗНЧ(ТекущиеДанные.Значение) = Тип("Строка");
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТабличноеПоле = ЭлементыФормы.СопоставлениеКолонокТЗ;
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	СвязьПоВладельцу = ТекущиеДанные.СвязьПоВладельцу;
	Если ТекущиеДанные.РежимКонвертации = "Искать" И ТипЗнч(СвязьПоВладельцу) = Тип("Строка") Тогда
		ЗначениеВладельца = Неопределено;
		Если ЗначениеЗаполнено(СвязьПоВладельцу) Тогда 
			СтрокаСвязиПоВладельцу = ТабличноеПоле.Значение.Найти(СвязьПоВладельцу, "ИмяКолонкиПриемника");
			Если СтрокаСвязиПоВладельцу <> Неопределено Тогда
				ЗначениеВладельца = СтрокаСвязиПоВладельцу.Значение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеВладельца = СвязьПоВладельцу;
	КонецЕсли;
	Элемент.ВыборПоВладельцу = ЗначениеВладельца;
	ирОбщий.ПолеВвода_НачалоВыбораЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ТекущиеДанные.Значение = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкиТабличногоДокумента = ПолучитьКолонкиТабличногоДокумента();
	КолонкаИсточника = КолонкиТабличногоДокумента[Элемент.Значение];
	СопоставитьКолонкуТЗ(ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока, КолонкаИсточника);
	ОбновитьСопоставлениеКолонокТЗ();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкиТабличногоДокумента = ПолучитьКолонкиТабличногоДокумента();
	КолонкаИсточника = КолонкиТабличногоДокумента[Элемент.Значение];
	СопоставитьКолонкуТЗ(ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока, КолонкаИсточника);
	Если КолонкаИсточника <> Неопределено Тогда
		Элемент.Значение = КолонкаИсточника.Заголовок;
	КонецЕсли; 
	ОбновитьСопоставлениеКолонокТЗ();
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.РежимКонвертации) Тогда
		ТекущиеДанные.РежимКонвертации = "Устанавливать";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИмяКолонкиИсточника) И ТекущиеДанные.РежимКонвертации = "Искать" Тогда
		Предупреждение("Не выбран номер колонки табличного документа");
		ТекущиеДанные.РежимКонвертации = "Устанавливать"
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовИскатьПоПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) И Не Элемент.СписокВыбора.Количество() = 0 Тогда
		Элемент.Значение = Элемент.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовСвязьПоВладельцуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			ФормаВыбора = ирОбщий.ПолучитьФормуСпискаЛкс(Тип(ВыбранноеЗначение),, Истина, Элемент, Истина,, Элемент.Значение,, ЭтаФорма);
			НовоеЗначение = ФормаВыбора.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0, НовоеЗначение, НовоеЗначение);
				КонецЕсли;
				Элемент.Значение = НовоеЗначение;
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовСвязьПоТипуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			ФормаВыбора = ирОбщий.ПолучитьФормуСпискаЛкс(Тип(ВыбранноеЗначение),, Истина, Элемент, Истина,, Элемент.Значение,, ЭтаФорма);
			НовоеЗначение = ФормаВыбора.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0,НовоеЗначение,НовоеЗначение);
				КонецЕсли;
				Элемент.Значение = НовоеЗначение;
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыАлгоритма = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет("АлгоритмКонвертацииЗначения"),,,, Истина);
	ПараметрыАлгоритма.Колонки.Добавить("ТаблицаСтруктурТипов");
	#Если Сервер И Не Сервер Тогда
	    мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	Для Каждого СтрокаПараметра Из ПараметрыАлгоритма Цикл
		Если ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "ТекущиеДанные") Тогда
			ТекущиеДанные = Новый Структура;
			Для Каждого СтрокаСопоставления Из СопоставлениеКолонокТЗ Цикл
				ТекущиеДанные.Вставить(СтрокаСопоставления.ИмяКолонкиПриемника, СтрокаСопоставления.Значение);
			КонецЦикла;
			СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ПолучитьТаблицуСтруктурТиповИзЗначения(ТекущиеДанные);
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.РедактироватьАлгоритмЧерезСтрокуXMLЛкс(Элемент.Значение, ПараметрыАлгоритма);

КонецПроцедуры

Процедура ОсновныеДействияФормыОПодсистеме(Кнопка)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ирОбщий.ФормаОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура ПолноеИмяТаблицыПриИзменении(Элемент)
	
	Если Не РежимРедактора Тогда
		ирОбщий.СохранитьНастройкиФормыЛкс(ЭтаФорма);
	КонецЕсли; 
	УстановитьИсточникВФорме();
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);

КонецПроцедуры

Функция ПараметрыВыбораОбъектаМетаданных()
	Возврат ирОбщий.ПараметрыВыбораОбъектаМетаданныхЛкс(Истина,, Истина,,, Истина);
КонецФункции

Процедура ПолноеИмяТаблицыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ОбъектМетаданныхНачалоВыбораЛкс(Элемент, ПараметрыВыбораОбъектаМетаданных(), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолноеИмяТаблицыОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ОбъектМетаданныхОкончаниеВводаТекстаЛкс(Элемент, ПараметрыВыбораОбъектаМетаданных(), Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолноеИмяТаблицыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельЗагружаемыеРеквизитыВТаблицуЗначений(Кнопка)
	
	
КонецПроцедуры

Процедура ТаблицаЗначенийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.КоманднаяПанельТаблицаЗначений.Кнопки.Идентификаторы);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийИдентификаторы(Кнопка)
	
	ирОбщий.КнопкаОтображатьПустыеИИдентификаторыНажатиеЛкс(Кнопка);
	ЭлементыФормы.ТаблицаЗначений.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийСжатьКолонки(Кнопка)
	
	ирОбщий.СжатьКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийШиринаКолонок(Кнопка)
	
	ирОбщий.РасширитьКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийМенеджерТабличногоПоля(Кнопка)
	
	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийРазличныеЗначенияКолонки(Кнопка)
	
	ирОбщий.ОткрытьРазличныеЗначенияКолонкиЛкс(ЭлементыФормы.ТаблицаЗначений);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийРедакторОбъектаБД(Кнопка)
	
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.ТаблицаЗначений);

КонецПроцедуры

Функция ОбщиеПараметрыОбработки() 
	
	Результат = Новый Структура;
	Для Каждого МетаРеквизит Из Метаданные().Реквизиты Цикл
		Если Ложь
			Или МетаРеквизит.Имя = "ТабличныйДокумент" 
			Или МетаРеквизит.Имя = "ТаблицаБД"
		Тогда
			Продолжить;
		КонецЕсли; 
		Результат.Вставить(МетаРеквизит.Имя, ЭтотОбъект[МетаРеквизит.Имя]);
	КонецЦикла;
	// Для защиты от несериализуемых типов
	КопияСобытияОбработкиОбъектов = СобытияОбработкиОбъектов.Скопировать();
	КопияСобытияОбработкиОбъектов.ЗаполнитьЗначения(, "АлгоритмОбъект");
	Для Каждого СтрокаСобытия Из КопияСобытияОбработкиОбъектов Цикл
		СтрокаСобытия.Параметры.ЗаполнитьЗначения(, "ТаблицаСтруктурТипов");
	КонецЦикла;
	Результат.Вставить("СобытияОбработкиОбъектов", КопияСобытияОбработкиОбъектов);
	Возврат Результат;
	
КонецФункции

Процедура ОсновныеДействияФормыЗагрузить(Кнопка)
	
	Если ТаблицаЗначений.Количество() > 0 Тогда 
		ТекстВопросаИсточника = " строк в таблице БД " + ПолноеИмяТаблицы;
		Если Вопрос("Загрузить " + ТаблицаЗначений.Количество() + ТекстВопросаИсточника, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	ОчиститьСообщения();
	РезультатОбработки = ирОбщий.ЗагрузкаТабличныхДанных_ЗагрузитьЛкс(ОбщиеПараметрыОбработки(), Истина,, ЭтаФорма);
	Если РезультатОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатОбработки); 
	СинхронизироватьРеквизитыОбъекта();
	ЭлементыФормы.ТаблицаБД.СоздатьКолонки();
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаБД,, ирОбщий.ПолучитьПоляТаблицыМДЛкс(ПолноеИмяТаблицы),, Истина);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаБД;
	
КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.СопоставлениеКолонокТЗ Тогда
		ОбновитьСопоставлениеКолонокТЗВФорме();
	ИначеЕсли Ложь
		Или ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.СопоставлениеКолонокБД 
		Или ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаБД
	Тогда
		ОбновитьСопоставлениеКолонокБД();
	//ИначеЕсли ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаБД Тогда
	//	ОбновитьКолонкиТаблицыБД();
	КонецЕсли; 
	СинхронизироватьРеквизитыОбъекта();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

Процедура ОбновитьСопоставлениеКолонокТЗВФорме()
	
	ТекущаяСтрока = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущееИмяКолонкиПриемника = ТекущаяСтрока.ИмяКолонкиПриемника;
	КонецЕсли; 
	ОбновитьСопоставлениеКолонокТЗ();
	Если ТекущееИмяКолонкиПриемника <> Неопределено Тогда
		НоваяТекущаяСтрока = СопоставлениеКолонокТЗ.Найти(ТекущееИмяКолонкиПриемника, "ИмяКолонкиПриемника");
		Если НоваяТекущаяСтрока <> Неопределено Тогда
			ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока = НоваяТекущаяСтрока;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Процедура НастроитьЭлементыФормы()
	
	ЭлементыФормы.ПанельОсновная.Страницы.СопоставлениеКолонокБД.Доступность = ЗначениеЗаполнено(ПолноеИмяТаблицы);
	ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаБД.Доступность = ЗначениеЗаполнено(ПолноеИмяТаблицы);
	ЭлементыФормы.СопоставлениеКолонокБД.Колонки.Принадлежность.Видимость = Истина
		И СопоставлениеКолонокБД.Количество() > 0
		И ЗначениеЗаполнено(СопоставлениеКолонокБД[0].Принадлежность);
	ЭлементыФормы.НадписьНеуникальные.Гиперссылка = КоличествоНеуникально > 0;
	ЭлементыФормы.ДополнениеЗапросом.Доступность = ДополнятьЗапросом;

КонецПроцедуры

Процедура ОсновныеДействияФормыСтруктураФормы(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруФормыЛкс(ЭтаФорма);
	
КонецПроцедуры

Функция ПолучитьОписаниеТиповКлючейРезультатов()

	МассивТипов = Новый Массив();
	ТипКлюча = ирОбщий.ТипКлючаЗаписиТаблицыЛкс(ПолноеИмяТаблицы);
	МассивТипов.Добавить(ТипКлюча);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Возврат ОписаниеТипов;

КонецФункции

Процедура КоманднаяПанельТаблицаБДВСписок(Кнопка)
	
	Если Не ирОбщий.ЛиКорневойТипСсылочногоОбъектаБДЛкс(ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	Список = Новый СписокЗначений;
	Список.ТипЗначения = ПолучитьОписаниеТиповКлючейРезультатов();
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ТаблицаБД.ВыделенныеСтроки Цикл
		Список.Добавить(ВыделеннаяСтрока.Ссылка);
	КонецЦикла;
	ирОбщий.ОткрытьЗначениеЛкс(Список,,,, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийОткрытьТаблицу(Кнопка)
	
	Если ирОбщий.ОткрытьЗначениеЛкс(ТаблицаЗначений, Истина,,,,, ЭлементыФормы.ТаблицаЗначений) Тогда 
		Для Каждого КолонкаТаблицы Из ТаблицаЗначений.Колонки Цикл
			Если Не ЗначениеЗаполнено(КолонкаТаблицы.Заголовок) Тогда
				КолонкаТаблицы.Заголовок = КолонкаТаблицы.Имя;
			КонецЕсли; 
		КонецЦикла;
		СинхронизироватьРеквизитыОбъекта();
		ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьКолонкиТабличногоПоляТаблицыЗначений()
	
	ПроверитьДобавитьКолонкуИдентификатораСтроки(ТаблицаЗначений);
	ОбновитьСопоставлениеКолонокТЗВФорме();
	ЭлементыФормы.ТаблицаЗначений.СоздатьКолонки();
	Если ЗначениеЗаполнено(ПолноеИмяТаблицы) Тогда
		ПоляТаблицыБД = ирОбщий.ПолучитьПоляТаблицыМДЛкс(ПолноеИмяТаблицы);
	КонецЕсли; 
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений,, ПоляТаблицыБД);
	Если ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = Неопределено И ТаблицаЗначений.Количество() > 0 Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = ТаблицаЗначений[0];
	КонецЕсли; 
	ЭлементыФормы.ТаблицаЗначений.Колонки[мИмяКолонкиНомерСтроки].ТолькоПросмотр = Истина;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийРедакторОбъектаБДСтроки(Кнопка)
	
	Если ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьТекущуюСтрокуТабличногоПоляТаблицыБДВРедактореОбъектаБДЛкс(ЭлементыФормы.ТаблицаБД, ПолноеИмяТаблицы,,,,, Ложь);
	
КонецПроцедуры

Процедура УстановитьПервуюСтрокуДанныхНажатие(Элемент)
	
	ЭтаФорма.ПерваяСтрокаДанныхТабличногоДокумента = ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	ПерваяСтрокаДанныхТабличногоДокументаПриИзменении();
	ОбновитьФиксациюШапкиТабличногоДокумента();
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура ОбновитьФиксациюШапкиТабличногоДокумента()
	
	СтруктураПозицийТД = СтруктураПозицийТабличногоДокумента();
	ЭлементыФормы.ТабличныйДокумент.ФиксацияСверху = СтруктураПозицийТД.НомерСтрокиДанных - 1;

КонецПроцедуры

Процедура УстановитьСтрокуЗаголовковНажатие(Элемент)
	
	ЭтаФорма.СтрокаЗаголовковТабличногоДокумента = ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	СтрокаЗаголовковТабличногоДокументаПриИзменении();
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	Ответ = Вопрос("Хотите сразу перезаполнить структуру таблицы значений?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаЗначений.Колонки.Очистить();
		КоманднаяПанельТаблицаЗначенийЗаполнитьИзТабличногоДокумента();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерваяСтрокаДанныхТабличногоДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтруктураПозицийТД = СтруктураПозицийТабличногоДокумента();
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиДанных, 1,
		СтруктураПозицийТД.НомерСтрокиДанных, ЭлементыФормы.ТабличныйДокумент.ШиринаТаблицы);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СтрокаЗаголовковТабличногоДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтруктураПозицийТД = СтруктураПозицийТабличногоДокумента();
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиЗаголовков, 1,
		СтруктураПозицийТД.НомерСтрокиЗаголовков, ЭлементыФормы.ТабличныйДокумент.ШиринаТаблицы);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПерваяСтрокаДанныхТабличногоДокументаПриИзменении(Элемент = Неопределено)
	
	Если ПерваяСтрокаДанныхТабличногоДокумента > 0 И СтрокаЗаголовковТабличногоДокумента >= ПерваяСтрокаДанныхТабличногоДокумента Тогда
		СтрокаЗаголовковТабличногоДокумента = ПерваяСтрокаДанныхТабличногоДокумента - 1;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СтрокаЗаголовковТабличногоДокументаПриИзменении(Элемент = Неопределено)
	
	Если СтрокаЗаголовковТабличногоДокумента > 0 И СтрокаЗаголовковТабличногоДокумента >= ПерваяСтрокаДанныхТабличногоДокумента Тогда
		ПерваяСтрокаДанныхТабличногоДокумента = СтрокаЗаголовковТабличногоДокумента + 1;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДЗаполнитьПоИменам(Кнопка)
	
	СопоставлениеКолонокБДЗаполнитьПоИменамСинонимам();
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДОчистить(Кнопка)
	
	ОчиститьСопоставлениеКолонокБД();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДИмяКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкаИсточника = ТаблицаЗначений.Колонки.Найти(Элемент.Значение);
	СопоставитьКолонкуБД(ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока, КолонкаИсточника);
	ОбновитьСопоставлениеКолонокБД();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДСинонимКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкаИсточника = ТаблицаЗначений.Колонки[Элемент.Значение];
	СопоставитьКолонкуБД(ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока, КолонкаИсточника);
	Элемент.Значение = КолонкаИсточника.Заголовок;
	ОбновитьСопоставлениеКолонокБД();

КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДИмяКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ИмяКолонкиИсточника.ЭлементУправления.СписокВыбора;
	#Если Сервер И Не Сервер Тогда
	    СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	Для Каждого СтрокаНесопоставленнойКолонки Из КолонкиТЗ Цикл
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки.ИмяКолонки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДСинонимКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.СинонимКолонкиИсточника.ЭлементУправления.СписокВыбора;
	#Если Сервер И Не Сервер Тогда
	    СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	Для Каждого СтрокаНесопоставленнойКолонки Из КолонкиТЗ Цикл
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки.СинонимКолонки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();

КонецПроцедуры

Процедура СопоставлениеКолонокБДПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ТабличноеПолеПриИзмененииФлажкаЛкс(Элемент, Колонка);

КонецПроцедуры

Процедура СопоставлениеКолонокБДПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, , "Значение");
	Если ДанныеСтроки.Ключевое Тогда
		//ОформлениеСтроки.Ячейки.ПолеПоиска.ТолькоПросмотр = Истина; // так по ссылке в ссылочной таблице нельзя было включить поиск
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.Пометка.Видимость = ДанныеСтроки.ДоступноИзменение;
	ОформлениеСтроки.Ячейки.КолонкаИсточника.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.КолонкаПриемника.Видимость = Ложь;

	Если ДанныеСтроки.Пометка Или ДанныеСтроки.ПолеПоиска Тогда
		ЦветТекстаНеактивности = ирОбщий.ЦветТекстаНеактивностиЛкс();
		Если ДанныеСтроки.ИзИсточника Тогда
			ОформлениеСтроки.Ячейки.Значение.ЦветТекста = ЦветТекстаНеактивности;
		Иначе
			ОформлениеСтроки.Ячейки.СинонимКолонкиИсточника.ЦветТекста = ЦветТекстаНеактивности;
			ОформлениеСтроки.Ячейки.ИмяКолонкиИсточника.ЦветТекста = ЦветТекстаНеактивности;
			ОформлениеСтроки.Ячейки.ОписаниеТиповИсточника.ЦветТекста = ЦветТекстаНеактивности;
		КонецЕсли;
	Иначе
		ОформлениеСтроки.ЦветТекста = ирОбщий.ЦветТекстаНеактивностиЛкс();
	КонецЕсли;
	ОформлениеСтроки.Ячейки.КолонкаИсточника.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.КолонкаПриемника.Видимость = Ложь;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийЗаполнитьИзТаблицыБД(Кнопка)
	
	Если Не ЗначениеЗаполнено(ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	Если ТаблицаЗначений.Колонки.Количество() > 1 Тогда
		Ответ = Вопрос("Очистить существующие колонки и строки?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			ОчиститьСуществующие = Ответ = КодВозвратаДиалога.Да;
		КонецЕсли;
	Иначе
		ОчиститьСуществующие = Истина;
	КонецЕсли; 
	ОбновитьКолонкиТаблицыЗначений(ОчиститьСуществующие, Истина);
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	Если ОчиститьСуществующие Тогда
		СопоставлениеКолонокБДЗаполнитьПоИменамСинонимам();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийЗаполнитьИзТабличногоДокумента(Кнопка = Неопределено)
	
	Если ТаблицаЗначений.Колонки.Количество() > 2 Тогда
		Ответ = Вопрос("Очистить существующие колонки и строки?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			ОчиститьСуществующие = Ответ = КодВозвратаДиалога.Да;
		КонецЕсли;
	Иначе
		ОчиститьСуществующие = Истина;
	КонецЕсли; 
	ОбновитьКолонкиТаблицыЗначений(ОчиститьСуществующие, Ложь);
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	Если ОчиститьСуществующие Тогда
		СопоставлениеКолонокТЗЗаполнить();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗОчистить(Кнопка)
	
	ОчиститьСопоставлениеКолонокТЗ();

КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТабличноеПоле = ЭлементыФормы.СопоставлениеКолонокТЗ;
	СписокВыбора = ТабличноеПоле.Колонки.СинонимКолонкиИсточника.ЭлементУправления.СписокВыбора;
	#Если Сервер И Не Сервер Тогда
	    СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.ИмяКолонкиИсточника) Тогда
		СписокВыбора.Добавить(ТабличноеПоле.ТекущиеДанные.ИмяКолонкиИсточника, ТабличноеПоле.ТекущиеДанные.СинонимКолонкиИсточника);
	КонецЕсли; 
	Для Каждого СтрокаНесопоставленнойКолонки Из НесопоставленныеКолонкиТД Цикл
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки.СинонимКолонки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТабличноеПоле = ЭлементыФормы.СопоставлениеКолонокТЗ;
	СписокВыбора = ТабличноеПоле.Колонки.ИмяКолонкиИсточника.ЭлементУправления.СписокВыбора;
	#Если Сервер И Не Сервер Тогда
	    СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.ИмяКолонкиИсточника) Тогда
		СписокВыбора.Добавить(ТабличноеПоле.ТекущиеДанные.ИмяКолонкиИсточника, ТабличноеПоле.ТекущиеДанные.ИмяКолонкиИсточника);
	КонецЕсли; 
	Для Каждого СтрокаНесопоставленнойКолонки Из НесопоставленныеКолонкиТД Цикл
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки.ИмяКолонки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();
		
КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗЗаполнитьПоСинонимам(Кнопка)
	
	СопоставлениеКолонокТЗЗаполнить();
	
КонецПроцедуры

// Такой странный прием позволил обойти проблему не создания колонок в таблицах значений реквизитов этой обработки при системной инициализации формы (она сломана)
Процедура СинхронизироватьРеквизитыОбъекта(ИзФормыВОбъект = Истина) Экспорт 
	
	Если ИзФормыВОбъект Тогда
		ЭтотОбъект.СопоставлениеКолонокБД = ЭтаФорма.СопоставлениеКолонокБД;
		ЭтотОбъект.СопоставлениеКолонокТЗ = ЭтаФорма.СопоставлениеКолонокТЗ;
		ЭтотОбъект.КолонкиТЗ = ЭтаФорма.КолонкиТЗ;
		ЭтотОбъект.НесопоставленныеКолонкиТД = ЭтаФорма.НесопоставленныеКолонкиТД;
		ЭтотОбъект.ТаблицаЗначений = ЭтаФорма.ТаблицаЗначений;
		ЭтотОбъект.СобытияОбработкиОбъектов = ЭтаФорма.СобытияОбработкиОбъектов;
		ЭтотОбъект.ТаблицаБД = ЭтаФорма.ТаблицаБД;
		ЭтотОбъект.ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	Иначе
		ЭтаФорма.СопоставлениеКолонокБД = ЭтотОбъект.СопоставлениеКолонокБД;
		ЭтаФорма.СопоставлениеКолонокТЗ = ЭтотОбъект.СопоставлениеКолонокТЗ;
		ЭтаФорма.КолонкиТЗ = ЭтотОбъект.КолонкиТЗ;
		ЭтаФорма.НесопоставленныеКолонкиТД = ЭтотОбъект.НесопоставленныеКолонкиТД;
		ЭтаФорма.ТаблицаЗначений = ЭтотОбъект.ТаблицаЗначений;
		ЭтаФорма.СобытияОбработкиОбъектов = ЭтотОбъект.СобытияОбработкиОбъектов;
		ЭтаФорма.ТаблицаБД = ЭтотОбъект.ТаблицаБД;
		ЭлементыФормы.ТабличныйДокумент.ВставитьОбласть(ЭтотОбъект.ТабличныйДокумент.Область(),,, Ложь);
	КонецЕсли; 

КонецПроцедуры

Процедура КолонкиТЗВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ЭлементыФормы.ТаблицаЗначений.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗначений.Колонки[ВыбраннаяСтрока.ИмяКолонки];
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьКолонкуТабличногоДокументаИзСтрокиКонвертации();
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьКолонкуТабличногоДокументаИзСтрокиКонвертации();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОткрытьКолонкуТабличногоДокументаИзСтрокиКонвертации()
	
	ИмяКолонкиИсточника = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные.ИмяКолонкиИсточника;
	Попытка
		НомерКолонки = Число(ИмяКолонкиИсточника);
	Исключение
		Возврат;
	КонецПопытки; 
	СтруктураПозицийТД = СтруктураПозицийТабличногоДокумента();
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиДанных, НомерКолонки, СтруктураПозицийТД.НомерСтрокиДанных, НомерКолонки);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;

КонецПроцедуры

Процедура НесопоставленныеКолонкиТДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	НомерКолонки = Число(ЭлементыФормы.НесопоставленныеКолонкиТД.ТекущиеДанные.ИмяКолонки);
	СтруктураПозицийТД = СтруктураПозицийТабличногоДокумента();
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтруктураПозицийТД.НомерСтрокиДанных, НомерКолонки, СтруктураПозицийТД.НомерСтрокиДанных, НомерКолонки);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТабличныйДокумент; // Антибаг платформы 8.3.13

КонецПроцедуры

Процедура СопоставлениеКолонокТЗВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Ложь
		Или Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИмяКолонкиПриемника
		Или Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СинонимКолонкиПриемника
	Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗначений.Колонки[ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные.ИмяКолонкиПриемника];
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	ИначеЕсли Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ПримерДанных Тогда
		ОткрытьКолонкуТабличногоДокументаИзСтрокиКонвертации();
	Иначе
		//ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСозданныеОбъектыКонсольОбработки(Кнопка)
	
	ирОбщий.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.ТаблицаБД,, ЭтаФорма, ПолноеИмяТаблицы);

КонецПроцедуры

Процедура ТаблицаЗначенийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	//Если Колонка = ЭлементыФормы.ТаблицаЗначений.Колонки[мИмяКолонкиНомерСтроки] Тогда
	//	ПерейтиКСтрокеТабличногоДокументаИзСтрокиТаблицыЗначений();
	//КонецЕсли; 
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


Процедура КоманднаяПанельТаблицаЗначенийПерейтиКБД(Кнопка)
	
	Если ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Ложь
		Или ТаблицаЗначений.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено 
		Или ТаблицаБД.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено
	Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыБД = ТаблицаБД.Найти(ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока[мИмяКолонкиНомерСтроки], мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыБД <> Неопределено Тогда
		ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = СтрокаТаблицыБД;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаБД;
		// Антибаг платформы 8.3.12-8.3.14 https://partners.v8.1c.ru/forum/message/1767153
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаБД;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийПерейтиКТД(Кнопка)
	
	Если ТаблицаЗначений.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ВыбраннаяСтрока = ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(ВыбраннаяСтрока[мИмяКолонкиНомерСтроки], 1, ВыбраннаяСтрока[мИмяКолонкиНомерСтроки], 1);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	// Антибаг платформы 8.3.12-8.3.14 https://partners.v8.1c.ru/forum/message/1767153
	ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаПерейтиКТЗ(Кнопка)
	
	Если ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыЗначений = ТаблицаЗначений.Найти(ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх, мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыЗначений <> Неопределено Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = СтрокаТаблицыЗначений;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
		// Антибаг платформы 8.3.12-8.3.14 https://partners.v8.1c.ru/forum/message/1767153
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаЗначений;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаБДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ТаблицаБД.Колонки[мИмяКолонкиНомерСтроки] Тогда
		ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД();
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);
	//ОткрытьЗначение(ирОбщий.КлючСтрокиТаблицыБДИзСтрокиТаблицыЗначенийЛкс(ПолноеИмяТаблицы, ВыбраннаяСтрока));
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДПерейти(Кнопка)
	
	ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД();
	
КонецПроцедуры

Процедура ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД()
	
	Если ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Ложь
		Или ТаблицаЗначений.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено 
		Или ТаблицаБД.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено
	Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыЗначений = ТаблицаЗначений.Найти(ЭлементыФормы.ТаблицаБД.ТекущаяСтрока[мИмяКолонкиНомерСтроки], мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыЗначений <> Неопределено Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = СтрокаТаблицыЗначений;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
		// Антибаг платформы 8.3.12-8.3.14 https://partners.v8.1c.ru/forum/message/1767153
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТаблицаЗначений;
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийКонсольОбработки(Кнопка)
	
	ирОбщий.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.ТаблицаЗначений,, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДЗагрузитьБезЗаписи(Кнопка)
	
	ОчиститьСообщения();
	РезультатОбработки = ирОбщий.ЗагрузкаТабличныхДанных_ЗагрузитьЛкс(ОбщиеПараметрыОбработки(), Ложь,, ЭтаФорма);
	Если РезультатОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатОбработки); 
	СинхронизироватьРеквизитыОбъекта();
	ЭлементыФормы.ТаблицаБД.СоздатьКолонки();
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаБД,, ирОбщий.ПолучитьПоляТаблицыМДЛкс(ПолноеИмяТаблицы),, Истина);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаБД;
	
КонецПроцедуры

Процедура СопоставлениеКолонокБДЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_НачалоВыбораЛкс(Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура СопоставлениеКолонокБДЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокБД.ТекущиеДанные;
	ТекущиеДанные.Значение = ТекущиеДанные.ОписаниеТиповПриемника.ПривестиЗначение(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДУстановитьФлажки(Кнопка)
	
	СопоставлениеКолонокБДУстановитьСнятьФлажки(Истина);
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДСнятьФлажки(Кнопка)
	
	СопоставлениеКолонокБДУстановитьСнятьФлажки(Ложь);

КонецПроцедуры

Процедура СопоставлениеКолонокБДУстановитьСнятьФлажки(НовоеЗначениеПометки)
	
	Если Ложь
		Или ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяКолонка = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.Пометка
		Или ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяКолонка = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ИзИсточника
		Или ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяКолонка = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ПолеПоиска
	Тогда
		ирОбщий.ИзменитьПометкиВыделенныхИлиОтобранныхСтрокЛкс(ЭлементыФормы.СопоставлениеКолонокБД, ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяКолонка.Имя, НовоеЗначениеПометки);
	КонецЕсли;

КонецПроцедуры

Процедура СопоставлениеКолонокБДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДРедакторОбъектаБДЯчейки(Кнопка)
	
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.СопоставлениеКолонокБД);

КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗРедакторОбъектаБДЯчейки(Кнопка)
	
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.СопоставлениеКолонокТЗ);

КонецПроцедуры

Процедура СобытияОбработкиОбъектовАлгоритмНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	#Если Сервер И Не Сервер Тогда
	    мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ТекущаяСтрока = ЭлементыФормы.СобытияОбработкиОбъектов.ТекущаяСтрока;
	мОписаниеТиповСтрокиОбъектаБД = ирОбщий.ОписаниеТиповОбъектаИлиСтрокиБДПоИменамТаблицЛкс(ПолноеИмяТаблицы, Ложь);
	мОписаниеТиповОбъектаБД = ирОбщий.ОписаниеТиповОбъектаИлиСтрокиБДПоИменамТаблицЛкс(ПолноеИмяТаблицы, Истина);
	Для Каждого СтрокаПараметра Из ТекущаяСтрока.Параметры Цикл
		Если ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "ОбъектБД") Или ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "ОбъектБДМетоды") Тогда
			СтрокаПараметра.ТипЗначения = мОписаниеТиповОбъектаБД;
			СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ПолучитьТаблицуСтруктурТиповИзОписанияТипов(мОписаниеТиповОбъектаБД);
		ИначеЕсли ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "СтрокаОбъектаБД") Тогда
			СтрокаПараметра.ТипЗначения = мОписаниеТиповСтрокиОбъектаБД;
			СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ПолучитьТаблицуСтруктурТиповИзОписанияТипов(мОписаниеТиповСтрокиОбъектаБД);
		ИначеЕсли ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "СтрокаТаблицыЗначений") Тогда
			СтрокаПараметра.ТипЗначения = Тип("СтрокаТаблицыЗначений");
			СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ПолучитьТаблицуСтруктурТиповИзЗначения(ТаблицаЗначений);
		//ИначеЕсли ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "СтрокаНайдена") Тогда
		//	СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ПолучитьТаблицуСтруктурТиповИзОписанияТипов(СтрокаПараметра.ТипЗначения);
		//	//СтрокаПараметра.ТипЗначения = "" + СтрокаПараметра.ТипЗначения;
		//ИначеЕсли ирОбщий.СтрокиРавныЛкс(СтрокаПараметра.Имя, "Отказ") Тогда
		//	СтрокаПараметра.ТаблицаСтруктурТипов = мПлатформа.ПолучитьТаблицуСтруктурТиповИзОписанияТипов(СтрокаПараметра.ТипЗначения);
		//	//СтрокаПараметра.ТипЗначения = "" + СтрокаПараметра.ТипЗначения;
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.СтрокаСобытияАлгоритмНачалоВыбораЛкс(ТекущаяСтрока, ВыполнятьНаСервере);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНовоеОкно(Кнопка)
	
	ирОбщий.ОткрытьНовоеОкноОбработкиЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура СобытияОбработкиОбъектовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ОформитьЯчейкуАлгоритмаВТабличномПолеЛкс(ОформлениеСтроки);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПрименить(Кнопка)
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		ОсновныеДействияФормыКонвертировать();
	КонецЕсли; 
	Закрыть(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаОткрытьВОтдельномОкне(Кнопка)
	
	ирОбщий.ОткрытьРедакторИзПоляТабличногоДокументаЛкс(ТабличныйДокумент);
	
КонецПроцедуры

Процедура ТаблицаБДПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаАвтоширина(Кнопка)
	
	ирОбщий.УстановитьАвтоширинуКолонокТабличногоДокументаЛкс(ЭлементыФормы.ТабличныйДокумент);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДСжатьКолонки(Кнопка)
	
	ирОбщий.СжатьКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаБД);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДШиринаКолонок(Кнопка)
	
	ирОбщий.РасширитьКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаБД);

КонецПроцедуры

Процедура НадписьНеуникальныеНажатие(Элемент)
	
	СтрокаКлючаИсточника = "";
	КлючиНеуникальные = ВыявитьНеуникальныеКлючи(СтрокаКлючаИсточника);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	ирОбщий.ОткрытьГруппировкуТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений,, СтрокаКлючаИсточника);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДУдалитьУспешныеИзИсточника(Кнопка)
	
	Если ТаблицаБД.Колонки.Найти(мИмяКолонкиРезультатЗаписи) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	УспешныеСтрокиБД = ТаблицаБД.НайтиСтроки(Новый Структура(мИмяКолонкиРезультатЗаписи, "Успех"));
	ирОбщий.ДобавитьИндексВТаблицуЛкс(ТаблицаЗначений, мИмяКолонкиНомерСтроки);
	Для Каждого СтрокаТаблицыБД Из УспешныеСтрокиБД Цикл
		СтрокаТаблицы = ТаблицаЗначений.Найти(СтрокаТаблицыБД[мИмяКолонкиНомерСтроки], мИмяКолонкиНомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			ТаблицаЗначений.Удалить(СтрокаТаблицы);
		КонецЕсли;
		ТаблицаБД.Удалить(СтрокаТаблицыБД);
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗМенеджерТабличногоПоля(Кнопка)
	
	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.СопоставлениеКолонокТЗ, ЭтаФорма);

КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДМенеджерТабличногоПоля(Кнопка)

	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.СопоставлениеКолонокБД, ЭтаФорма);
	
КонецПроцедуры

Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ОткрытьЗначениеЛкс(Расшифровка, , СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаРедактирование(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.ТабличныйДокумент.ТолькоПросмотр = Не Кнопка.Пометка;
		
КонецПроцедуры

Процедура СопоставлениеКолонокТЗПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ирОбщий.ПриПолученииДанныхТабличногоПоляКолонокЛкс(ОформленияСтрок, "ОписаниеТипов");
	
КонецПроцедуры

Процедура СопоставлениеКолонокБДПриПолученииДанных(Элемент, ОформленияСтрок)

	ирОбщий.ПриПолученииДанныхТабличногоПоляКолонокЛкс(ОформленияСтрок, "ОписаниеТиповПриемника");
	ирОбщий.ПриПолученииДанныхТабличногоПоляКолонокЛкс(ОформленияСтрок, "ОписаниеТиповИсточника");
	
КонецПроцедуры

Процедура КолонкиТЗПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ирОбщий.ПриПолученииДанныхТабличногоПоляКолонокЛкс(ОформленияСтрок, "ОписаниеТипов");
	
КонецПроцедуры

Процедура НадписьОбщиеПараметрыЗаписиНажатие(Элемент)
	
	ирОбщий.ОткрытьОбщиеПараметрыЗаписиЛкс();
	
КонецПроцедуры

Процедура ОбработчикОжиданияСПараметрамиЛкс() Экспорт 
	
	ирОбщий.ОбработчикОжиданияСПараметрамиЛкс();

КонецПроцедуры

Процедура СопоставлениеКолонокТЗПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ТабличноеПолеПриИзмененииФлажкаЛкс(Элемент, Колонка);
	
КонецПроцедуры

Процедура ТаблицаЗначенийПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ТабличноеПолеПриИзмененииФлажкаЛкс(Элемент, Колонка);

КонецПроцедуры

Процедура СопоставлениеКолонокБДПолеПоискаПриИзменении(Элемент)
	
	ВыявитьНеуникальныеКлючи();
	НастроитьЭлементыФормы();

КонецПроцедуры

Процедура СопоставлениеКолонокТЗПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура НесопоставленныеКолонкиТДПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура НесопоставленныеКолонкиТДПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ТаблицаЗначенийПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура СопоставлениеКолонокБДПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КолонкиТЗПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КолонкиТЗПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ТаблицаБДПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДИдентификаторы(Кнопка)
	
	ирОбщий.КнопкаОтображатьПустыеИИдентификаторыНажатиеЛкс(Кнопка);
	ЭлементыФормы.ТаблицаБД.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийСортироватьПоВозрастанию(Кнопка)
	
	ирОбщий.ТабличноеПолеСортироватьЛкс(ЭтаФорма, ЭлементыФормы.ТаблицаЗначений, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийСортироватьПоУбыванию(Кнопка)
	
	ирОбщий.ТабличноеПолеСортироватьЛкс(ЭтаФорма, ЭлементыФормы.ТаблицаЗначений, Ложь);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДРазличныеЗначенияКолонки(Кнопка)
	
	ирОбщий.ОткрытьРазличныеЗначенияКолонкиЛкс(ЭлементыФормы.ТаблицаБД);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийДополнениеЗапросом(Кнопка)
	
	ВыполнитьЗапросДополнения(Истина);

КонецПроцедуры

Процедура ВыполнитьЗапросДополнения(Знач Интерактивно = Ложь)
	
	Если Не ДополнятьЗапросом Тогда
		Возврат;
	КонецЕсли; 
	Если мКонсольЗапросов = Неопределено Тогда
		мКонсольЗапросов = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКонсольЗапросов").ПолучитьФорму();
		#Если Сервер И Не Сервер Тогда
			мКонсольЗапросов = Обработки.ирКонсольЗапросов.Создать();
		#КонецЕсли
	КонецЕсли;
	мКонсольЗапросов.мФормаБудетОткрыватьсяПовторно = Истина;
	ИменаСконвертированныхКолонок = ирОбщий.СтрСоединитьЛкс(СопоставлениеКолонокТЗ.Скопировать(Новый Структура("Пометка", Истина)).ВыгрузитьКолонку("ИмяКолонкиПриемника"));
	мКонсольЗапросов.мКоллекцияДляЗаполнения = ТаблицаЗначений.Скопировать(, ИменаСконвертированныхКолонок);
	Если мДополнениеЗапросом <> Неопределено Тогда
		мКонсольЗапросов.ЗагрузитьЗапросыИзОбъекта(мДополнениеЗапросом,, Истина);
		мДополнениеЗапросом = Неопределено;
	КонецЕсли; 
	Если Интерактивно Тогда
		мКонсольЗапросов.ОткрытьМодально();
	КонецЕсли; 
	СтрокаПараметраТЗ = мКонсольЗапросов.Параметры.Найти("ТЗ", "ИмяПараметра");
	Если СтрокаПараметраТЗ = Неопределено Тогда
		ирОбщий.СообщитьЛкс("Ошибка дополнения запросом: Не найден параметр запроса с именем ""ТЗ""", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	СтрокаПараметраТЗ.Значение = мКонсольЗапросов.мКоллекцияДляЗаполнения;
	Попытка
		УспехЗапроса = мКонсольЗапросов.ВыполнитьЗапрос();
	Исключение
		УспехЗапроса = Ложь;
		ирОбщий.СообщитьЛкс(ОписаниеОшибки());
	КонецПопытки;
	Если Не УспехЗапроса Тогда
		ирОбщий.СообщитьЛкс("Ошибка дополнения запросом", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	КоллекцияИсточник = мКонсольЗапросов.ЭлементыФормы.РезультатКоллекция.Значение;
	#Если Сервер И Не Сервер Тогда
	    КоллекцияИсточник = Новый ТаблицаЗначений;
	#КонецЕсли
	Для Каждого Колонка Из КоллекцияИсточник.Колонки Цикл
		Если ТаблицаЗначений.Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ТаблицаЗначений.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок, Колонка.Ширина);
		КолонкаТП = ЭлементыФормы.ТаблицаЗначений.Колонки.Добавить(Колонка.Имя);
		КолонкаТП.Данные = Колонка.Имя;
	КонецЦикла;
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений);
	ОбновитьСопоставлениеКолонокТЗ(, Ложь);
	Если КоллекцияИсточник.Количество() > 0 Тогда
		ТабличноеПоле = ЭлементыФормы.ТаблицаЗначений;
		СтарыйИндекс = ирОбщий.ТабличноеПолеПозицияТекущейСтрокиЛкс(ТабличноеПоле);
		ТаблицаЗначений.Очистить();
		ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(КоллекцияИсточник, ТаблицаЗначений);
		ирОбщий.ТабличноеПолеВосстановитьТекущуюСтрокуЛкс(ТабличноеПоле, СтарыйИндекс);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнятьЗапросомПриИзменении(Элемент)
	
	ВыполнитьЗапросДополнения(Истина);
	НастроитьЭлементыФормы();
	
КонецПроцедуры

Процедура КлсУниверсальнаяКомандаНажатие(Кнопка) Экспорт 
	
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирЗагрузкаТабличныхДанных.Форма.Форма");

СинхронизироватьРеквизитыОбъекта();
СобытияОбработкиОбъектов.Колонки.Добавить("Параметры");
СобытияОбработкиОбъектов.Колонки.Добавить("АлгоритмОбъект");
МассивИменСобытий = Новый Массив;
МассивИменСобытий.Добавить("АлгоритмПередОбработкойОбъекта");
МассивИменСобытий.Добавить("АлгоритмПослеЗагрузкиСтроки");
МассивИменСобытий.Добавить("АлгоритмПередЗаписьюОбъекта");
МассивИменСобытий.Добавить("АлгоритмПриЗаписиОбъекта");
Для Каждого ИмяСобытия Из МассивИменСобытий Цикл
	СтрокаСобытия = СобытияОбработкиОбъектов.Добавить();
	СтрокаСобытия.ИмяСобытия = ИмяСобытия;
	СтрокаСобытия.СинонимСобытия = Метаданные().Макеты[ИмяСобытия].Представление();
	СтрокаСобытия.Параметры = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет(ИмяСобытия),,,, Истина);
	СтрокаСобытия.Параметры.Колонки.Добавить("ТаблицаСтруктурТипов");
КонецЦикла;
мАлгоритмКонвертацииЗначенияПараметры = ирОбщий.ТаблицаЗначенийИзТабличногоДокументаЛкс(ПолучитьМакет("АлгоритмКонвертацииЗначения"),,,, Истина);
мАлгоритмКонвертацииЗначенияПараметры.Колонки.Добавить("ТаблицаСтруктурТипов");
РежимРедактора = Ложь;
//
