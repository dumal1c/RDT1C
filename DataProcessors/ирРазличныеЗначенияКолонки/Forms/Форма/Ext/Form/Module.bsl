Перем мОписаниеТиповКолонки;
Перем ТипИсточникаДанных;

Функция ОбновитьДанные(РежимОтладки = Ложь, ИзменятьФлагУчитыватьОтбор = Ложь)
	
	мПлатформа = ирКэш.Получить();
	#Если Сервер И Не Сервер Тогда
		мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ИсточникДействий = ЭтаФорма.ВладелецФормы;
	#Если Сервер И Не Сервер Тогда
		ИсточникДействий = Новый ТабличноеПоле;
	#КонецЕсли
	ОсновнойЭУ = ЭтаФорма.ЭлементыФормы.Значения;
	ПутьКДаннымКолонки = ирОбщий.ПутьКДаннымКолонкиТабличногоПоляЛкс(ИсточникДействий);
	ИмяКолонки = СтрЗаменить(ПутьКДаннымКолонки, ".", "_");
	ПолноеИмяТаблицыБД = "";
	ДанныеТабличногоПоля = Неопределено;
	ТипИсточникаДанных = ирОбщий.ОбщийТипДанныхТабличногоПоляЛкс(ИсточникДействий,,, ПолноеИмяТаблицыБД, ДанныеТабличногоПоля);
	ЭтаФорма.Отбор = Неопределено;
	ЭтаФорма.ОтборПользовательский = Неопределено;
	ВыгрузкаРезультата = Неопределено;
	Если ТипИсточникаДанных = "ТаблицаЗначений" Тогда 
		Если Истина
			И НастройкиСписка = Неопределено
			И Форма <> Неопределено 
			И ТипЗнч(ИсточникДействий) = Тип("ТабличноеПоле")
		Тогда
			КомпонуемаяТаблицаЗначений = ирОбщий.КомпонуемаяТаблицаЗначенийТабличногоПоляЛкс(Форма, ИсточникДействий);
			Если КомпонуемаяТаблицаЗначений <> Неопределено Тогда
				ВыгрузкаРезультата = КомпонуемаяТаблицаЗначений.ПолнаяКоллекция.Скопировать();
				НастройкиСписка = КомпонуемаяТаблицаЗначений.Компоновщик.Настройки;
				Если ИзменятьФлагУчитыватьОтбор Тогда
					УчитываяОтбор = КомпонуемаяТаблицаЗначений.ИспользоватьОтбор;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		Если НастройкиСписка <> Неопределено Тогда
			ЭтаФорма.Отбор = НастройкиСписка.Отбор;
			ЭтаФорма.ОтборПользовательский = ЭтаФорма.Отбор;
		КонецЕсли; 
	ИначеЕсли ТипИсточникаДанных = "ДеревоЗначений" Тогда 
		//
	Иначе
		Если ТипИсточникаДанных = "ТабличнаяЧасть" Тогда 
			ЭтаФорма.Отбор = ИсточникДействий.ОтборСтрок;
			ЭтаФорма.ОтборПользовательский = ЭтаФорма.Отбор;
			НастройкаОтбораТабличногоПоля = ИсточникДействий.НастройкаОтбораСтрок;
		ИначеЕсли ТипИсточникаДанных = "НаборЗаписей" Тогда 
			ЭтаФорма.Отбор = ИсточникДействий.ОтборСтрок;
			ЭтаФорма.ОтборПользовательский = ЭтаФорма.Отбор;
			НастройкаОтбораТабличногоПоля = ИсточникДействий.НастройкаОтбораСтрок;
		ИначеЕсли ТипИсточникаДанных = "Список" Тогда 
			Если Не ЗначениеЗаполнено(ПолноеИмяТаблицыБД) Тогда
				Возврат Ложь;
			КонецЕсли; 
			Если ТипЗнч(ИсточникДействий) = Тип("ТабличноеПоле") Тогда
				НастройкаОтбораТабличногоПоля = ИсточникДействий.НастройкаОтбора;
				НастройкаПорядкаТабличногоПоля = ИсточникДействий.НастройкаПорядка;
			КонецЕсли; 
			Если ДанныеТабличногоПоля <> Неопределено Тогда
				Если НастройкиСписка = Неопределено Тогда
					НастройкиСписка = ирОбщий.НастройкиДинамическогоСпискаЛкс(ДанныеТабличногоПоля);
				КонецЕсли; 
				НастройкиСпискаПользовательские = ирОбщий.НастройкиДинамическогоСпискаЛкс(ДанныеТабличногоПоля, "Пользовательские");
				ЭтаФорма.Отбор = НастройкиСписка.Отбор;
				ЭтаФорма.ОтборПользовательский = НастройкиСпискаПользовательские.Отбор;
			Иначе
				ВыгрузкаРезультата = ирОбщий.ДанныеСтрокДинамическогоСпискаЛкс(ИсточникДействий, ИсточникДействий.ВыделенныеСтроки, ИмяКолонки);
			КонецЕсли; 
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если ВыгрузкаРезультата = Неопределено Тогда
		ВыгрузкаРезультата = ирОбщий.ТаблицаИлиДеревоЗначенийИзТаблицыФормыСКоллекциейЛкс(ИсточникДействий);
		#Если Сервер И Не Сервер Тогда
			ВыгрузкаРезультата = Новый ТаблицаЗначений;
		#КонецЕсли
	КонецЕсли; 
	Если Отбор <> Неопределено Тогда
		Если ТипЗнч(Отбор) = Тип("Отбор") Тогда
			ЭлементОтбора = Отбор[ИмяКолонки];
			ДоступноеПоле = ЭлементОтбора;
			ВыражениеПоляКолонки = ЭлементОтбора.ПутьКДанным;
		Иначе
			#Если Сервер И Не Сервер Тогда
				Пустышка = Новый НастройкиКомпоновкиДанных;
				Отбор = Пустышка.Отбор;
			#КонецЕсли
			ЭлементОтбора = ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(ОтборПользовательский, ПутьКДаннымКолонки,,,,, Ложь);
			ДоступноеПоле = ирОбщий.НайтиДоступноеПолеКомпоновкиПоИмениКолонкиЛкс(Отбор.ДоступныеПоляОтбора, ИмяКолонки);
			Если ДоступноеПоле = Неопределено Тогда
				// Недоступно по функциональным опциям или правом Просмотр
				Возврат Ложь;
			КонецЕсли; 
			ВыражениеПоляКолонки = "" + ДоступноеПоле.Поле;
		КонецЕсли; 
		мОписаниеТиповКолонки = ДоступноеПоле.ТипЗначения;
		ЭтаФорма.ВидСравненияТекущий = ЭлементОтбора.ВидСравнения;
		//СписокВыбора = ЭтаФорма.ЭлементыФормы.ВидСравненияНовый.СписокВыбора;
		//СписокВыбора.Очистить();
		//СписокВыбора.Добавить(ВидСравнения.ВСписке);
		//СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии);
		//СписокВыбора.Добавить(ВидСравнения.НеВСписке);
		//СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии);
		////СтароеИспользование = ЭлементОтбора.Использование;
		////СтарыйВидСравнения = ЭлементОтбора.ВидСравнения;
		////ЭлементОтбора.Использование = Ложь;
		////Для Счетчик = 1 По СписокВыбора.Количество() Цикл
		////    Попытка
		////        ЭлементОтбора.ВидСравнения = ЭлементСписка.Значение;
		////    Исключение
		////        ЭлементСписка
		////    КонецПопытки;
		////КонецЦикла;
		////ЭлементОтбора.Использование = СтароеИспользование;
		////ЭлементОтбора.ВидСравнения = СтарыйВидСравнения;
	Иначе 
		ВыражениеПоляКолонки = ПутьКДаннымКолонки;
		мОписаниеТиповКолонки = ВыгрузкаРезультата.Колонки[ИмяКолонки].ТипЗначения;
	КонецЕсли; 
	ЭлементыФормы.ВидСравненияНовый.Доступность = Отбор <> Неопределено;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность = Отбор <> Неопределено;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Применить.Доступность = Отбор <> Неопределено;
	ЭлементыФормы.ЗакрыватьПриВыборе.Доступность = Отбор <> Неопределено;
	ЭлементыФормы.Значения.Колонки.Пометка.ТолькоПросмотр = Отбор = Неопределено;
	ЭлементыФормы.Значения.Колонки.Пометка.Видимость = Отбор <> Неопределено;
	ЭлементыФормы.УчитываяОтбор.Доступность = Отбор <> Неопределено;
	//ЭлементыФормы.НадписьВыбрано.Видимость = Не ЭлементыФормы.Значения.Колонки.Пометка.ТолькоПросмотр;
	//ЭлементыФормы.КоличествоВыбранных.Видимость = Не ЭлементыФормы.Значения.Колонки.Пометка.ТолькоПросмотр;
	//ЭлементыФормы.НадписьИз.Видимость = Не ЭлементыФормы.Значения.Колонки.Пометка.ТолькоПросмотр;
	//ЭлементыФормы.КоличествоВсего.Видимость = Не ЭлементыФормы.Значения.Колонки.Пометка.ТолькоПросмотр;
	ЭтоМоноТип = мОписаниеТиповКолонки.Типы().Количество() = 1;
	Если ЭтоМоноТип Тогда
		ЭтаФорма.ИмяТипаЗначения = ирОбщий.ПредставлениеТипаЛкс(мОписаниеТиповКолонки.Типы()[0], мОписаниеТиповКолонки, Истина);
	КонецЕсли; 
	УстановитьТекущуюСтроку = Ложь;
	Если ОсновнойЭУ.ТекущаяСтрока <> Неопределено Тогда
		ТекущееЗначение = ОсновнойЭУ.ТекущаяСтрока.Значение;
		УстановитьТекущуюСтроку = Истина;
	КонецЕсли;
	МассивПомеченных = ОсновнойЭУ.Значение.Выгрузить(Новый Структура("Пометка", Истина)).ВыгрузитьКолонку("Значение");
	Если Истина
		И МассивПомеченных.Количество() = 0 
		И ЭлементОтбора <> Неопределено
		И ЭлементОтбора.Использование 
	Тогда
		Если Ложь
			Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
			Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		Тогда 
			МассивПомеченных = ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения();
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
			МассивПомеченных.Добавить(ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли Ложь
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке 
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии
		Тогда 
			МассивПомеченных = ЭлементОтбора.Значение.ВыгрузитьЗначения();
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда 
			МассивПомеченных.Добавить(ЭлементОтбора.Значение);
		КонецЕсли; 
	КонецЕсли; 
	Если Не РежимОтладки Тогда
		ОсновнойЭУ.Значение.Очистить();
	КонецЕсли; 
	
	ЧисловойСуффикс = "473991";
	ИмяПоляГруппировки = "_Поле" + ЧисловойСуффикс;
	ИмяПоляКоличества = "_ИмяПоляКоличества"  + ЧисловойСуффикс;
	ИмяПоляЗначениеПредставление = "_ЗначениеПредставление" + ЧисловойСуффикс;
	КолонкиТЧ = ОсновнойЭУ.Значение.ВыгрузитьКолонки().Колонки;
	Если Ложь
		Или ВыгрузкаРезультата <> Неопределено
		//Или ТипИсточникаДанных = "НаборЗаписей"
		//Или ТипИсточникаДанных = "ТабличнаяЧасть"
		//Или ТипИсточникаДанных = "ТаблицаЗначений"
		//Или ТипИсточникаДанных = "ДеревоЗначений"
	Тогда
		КэшТипов = Новый Соответствие;
		ВыгрузкаРезультата.Колонки.Добавить(ИмяПоляКоличества);
		ВыгрузкаРезультата.Колонки.Добавить(ИмяПоляЗначениеПредставление);
		
		ВнешниеНаборыДанных = Новый Структура("Таблица", ВыгрузкаРезультата);
		СхемаКомпоновки = ирОбщий.СоздатьСхемуПоТаблицамЗначенийЛкс(ВнешниеНаборыДанных);
		#Если Сервер И Не Сервер Тогда
			СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
		#КонецЕсли
		ПолеИтога = СхемаКомпоновки.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоляКоличества;
		ПолеИтога.Выражение = "Сумма(1)";
		ПолеИтога = СхемаКомпоновки.ПоляИтога.Добавить();
		ПолеИтога.ПутьКДанным = ИмяПоляЗначениеПредставление;
		ПолеИтога.Выражение = "Представление(" + ИмяКолонки + ")";
		НастройкаКомпоновки = Новый НастройкиКомпоновкиДанных;
		ирОбщий.НайтиДобавитьЭлементСтруктурыГруппировкаКомпоновкиЛкс(НастройкаКомпоновки.Структура, ИмяКолонки);
		ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкаКомпоновки.Выбор, ИмяПоляКоличества);
		ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкаКомпоновки.Выбор, ИмяПоляЗначениеПредставление);
		Если ирОбщий.ЭтоОписаниеТиповПростогоСсылочногоТипаЛкс(мОписаниеТиповКолонки) Тогда
			ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкаКомпоновки.Порядок, ИмяПоляЗначениеПредставление);
		//Иначе
		//	ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкаКомпоновки.Порядок, ДанныеКолонки); // Это сортировка по Тип+ИД ссылки
		КонецЕсли; 
		Если Отбор <> Неопределено Тогда
			ирОбщий.СкопироватьОтборЛюбойЛкс(НастройкаКомпоновки.Отбор, Отбор);
			ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(НастройкаКомпоновки.Отбор, ИмяКолонки).Использование = Ложь;
		КонецЕсли; 
		ЭтаФорма.ОтборИсточникаБезТекущейКолонки = ирОбщий.ПредставлениеОтбораЛкс(НастройкаКомпоновки.Отбор);
		Если Не УчитываяОтбор Тогда
			НастройкаКомпоновки.Отбор.Элементы.Очистить();
		КонецЕсли;
		ТаблицаРезультата = ирОбщий.СкомпоноватьВКоллекциюЗначенийПоСхемеЛкс(СхемаКомпоновки, НастройкаКомпоновки,, ВнешниеНаборыДанных,,,,, РежимОтладки);
		//
		//ИсточникДанных = Новый ОписаниеИсточникаДанных(ВыгрузкаРезультата);
		//ИсточникДанных.Колонки[ИмяКолонки].Измерение = Истина;
		////ИсточникДанных.Колонки[ДанныеКолонки].Отбор = Истина;
		//ИсточникДанных.Колонки[ИмяПоляКоличества].Итог = "Количество(*)";
		//ИсточникДанных.Колонки[ИмяПоляЗначениеПредставление].Итог = "Представление(" + ИмяКолонки + ")";
		//Построитель = Новый ПостроительЗапроса;
		//Построитель.ИсточникДанных = ИсточникДанных;
		//Если Не Построитель.ДоступныеПоля[ИмяКолонки].Измерение Тогда 
		//	Возврат Ложь;
		//КонецЕсли; 
		//Построитель.ВыбранныеПоля.Добавить(ИмяПоляКоличества);
		//Построитель.ВыбранныеПоля.Добавить(ПутьКДаннымКолонки);
		//Построитель.ВыбранныеПоля.Добавить(ИмяПоляЗначениеПредставление);
		//Если ирОбщий.ЭтоОписаниеТиповПростогоСсылочногоТипаЛкс(мОписаниеТиповКолонки) Тогда
		//	Построитель.Порядок.Установить(ИмяПоляЗначениеПредставление);
		////Иначе
		////	Построитель.Порядок.Установить(ДанныеКолонки); // Это сортировка по Тип+ИД ссылки
		//КонецЕсли; 
		//Если Отбор <> Неопределено Тогда
		//	ирОбщий.СкопироватьОтборПостроителяЛкс(Построитель.Отбор, ИсточникДействий.ОтборСтрок);
		//	Построитель.Отбор[ИмяКолонки].Использование = Ложь;
		//КонецЕсли; 
		//ЭтаФорма.ОтборИсточникаБезТекущейКолонки = ирОбщий.ПредставлениеОтбораЛкс(Построитель.Отбор);
		//Если Не УчитываяОтбор Тогда
		//	Построитель.Отбор.Сбросить();
		//КонецЕсли;
		//ТаблицаРезультата = Построитель.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИмяКолонки);
		
		Если РежимОтладки Тогда
			Возврат Ложь;
		КонецЕсли; 
		Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
			ЗначениеКолонки = СтрокаРезультата[ИмяКолонки];
			СтрокаТЧ = ОсновнойЭУ.Значение.Добавить();
			СтрокаТЧ.Количество = СтрокаРезультата[ИмяПоляКоличества];
			СтрокаТЧ.Значение = ЗначениеКолонки;
			СтрокаТЧ.ЗначениеПредставление = СтрокаРезультата[ИмяПоляЗначениеПредставление];
			Если Не ЭтоМоноТип Тогда
				ТипЗначения = ТипЗнч(ЗначениеКолонки);
				СтрокаСТипомЗначения = КэшТипов[ТипЗначения];
				Если СтрокаСТипомЗначения = Неопределено Тогда
					ирОбщий.ОбновитьТипЗначенияВСтрокеТаблицыЛкс(СтрокаТЧ, "", мОписаниеТиповКолонки,,, КолонкиТЧ, ЗначениеКолонки);
					КэшТипов[ТипЗначения] = СтрокаТЧ;
				Иначе
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаСТипомЗначения, "ИмяТипаЗначения, ТипЗначения"); 
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Если КэшТипов.Количество() = 1 Тогда
			ЭтоМоноТип = Истина;
			ЭтаФорма.ИмяТипаЗначения = ОсновнойЭУ.Значение[0].ИмяТипаЗначения;
		КонецЕсли; 
		КэшТипов = Неопределено;
		Если Не ирОбщий.ЭтоОписаниеТиповПростогоСсылочногоТипаЛкс(мОписаниеТиповКолонки) Тогда
			Если ирОбщий.ПредупреждениеПередСортировкойПоСсылочнымКолонкамЛкс("Значение", ОсновнойЭУ) Тогда 
				ОсновнойЭУ.Значение.Сортировать("Значение");
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		КоличествоЗагружаем = 500000;
		// https://www.hostedredmine.com/issues/880651
		//Если ЗначениеЗаполнено(АдресСхемыКомпоновки) Тогда
		//	СхемаКомпоновкиСписка = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки);
		//	#Если Сервер И Не Сервер Тогда
		//		СхемаКомпоновкиСписка = Новый СхемаКомпоновкиДанных;
		//	#КонецЕсли
		//КонецЕсли; 
		ТекстГДЕ = "";
		КорневоеПолеКолонки = ирОбщий.ПервыйФрагментЛкс(ВыражениеПоляКолонки);
		Если Истина
			И мОписаниеТиповКолонки.СодержитТип(Тип("Строка"))
			И мОписаниеТиповКолонки.КвалификаторыСтроки.Длина = 0
		Тогда
			ВыражениеПоляКолонки = "ВЫРАЗИТЬ(Т." + ВыражениеПоляКолонки + " КАК СТРОКА(100))";    
		Иначе
			ВыражениеПоляКолонки = "Т." + ВыражениеПоляКолонки;
		КонецЕсли;
		Если ЭтоМоноТип Тогда
			ТекстДопПолей = "";
			ТекстДопГруппировок = "";
		Иначе
			ТекстДопПолей = ", ТипЗначения(" + ВыражениеПоляКолонки + ") КАК ТипЗначения";
			ТекстДопГруппировок = ", ТипЗначения(" + ВыражениеПоляКолонки + ")";
		КонецЕсли;
		ТекстГДЕ = ТекстГДЕ + ВыражениеПоляКолонки + ".*";
		ПоляТаблицыБД = ирОбщий.ПоляТаблицыБДЛкс(ПолноеИмяТаблицыБД);
		#Если Сервер И Не Сервер Тогда
			ПоляТаблицыБД = НайтиПоСсылкам().Колонки;
		#КонецЕсли
		Для Каждого ПолеТаблицыБД Из ПоляТаблицыБД Цикл
			Если ПолеТаблицыБД.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
				Продолжить;
			КонецЕсли;
			Если ТекстГДЕ <> "" Тогда
				ТекстГДЕ = ТекстГДЕ + ", ";
			КонецЕсли;
			Если ирОбщий.СтрокиРавныЛкс(ПолеТаблицыБД.Имя, КорневоеПолеКолонки) Тогда
				ВыражениеГруппировки = ВыражениеПоляКолонки;
				ТипЗначенияГруппировки = ПолеТаблицыБД.ТипЗначения;
			КонецЕсли; 
			ВыражениеПоля = "Т." + ПолеТаблицыБД.Имя;
			//ТекстГДЕ = ТекстГДЕ + ВыражениеПоля + ".* КАК " + ПолеТаблицыБД.Имя; // запрещенные имена например "Соединение" так вызывают ошибку
			ТекстГДЕ = ТекстГДЕ + ВыражениеПоля + ".*";
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ВыражениеГруппировки) Тогда
			// Например ИдентификаторСсылкиЛкс
			Возврат Ложь;
		КонецЕсли;
		ИмяСлужебногоПоляКоличество = "Количество62849";
		Если Не ЗначениеЗаполнено(ТекстДопПолей) Тогда
			ТекстДопПолей = ", 1 КАК ТипЗначения";
		КонецЕсли; 
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    " + ВыражениеГруппировки + " КАК Значение,
		|    ПРЕДСТАВЛЕНИЕ(" + ВыражениеГруппировки + ") КАК ЗначениеПредставление,
		|    КОЛИЧЕСТВО(*) КАК " + ИмяСлужебногоПоляКоличество + ТекстДопПолей + "
		|{ВЫБРАТЬ
		|    Значение,
		|    ЗначениеПредставление,
		|    " + ИмяСлужебногоПоляКоличество + ",
		|    ТипЗначения}
		|ИЗ
		|    " + ПолноеИмяТаблицыБД + " КАК Т
		|{ГДЕ " + ТекстГДЕ + "}
		|СГРУППИРОВАТЬ ПО
		|    " + ВыражениеГруппировки + ", ПРЕДСТАВЛЕНИЕ(" + ВыражениеГруппировки + ")" + ТекстДопГруппировок + "
		|УПОРЯДОЧИТЬ ПО
		|    Значение";
		Если ТипЗначенияГруппировки.СодержитТип(Тип("УникальныйИдентификатор")) Тогда
			// http://www.hostedredmine.com/issues/879270
			ТекстЗапроса = ирОбщий.СтрЗаменитьЛкс(ТекстЗапроса, "ПРЕДСТАВЛЕНИЕ(" + ВыражениеГруппировки + ")", ВыражениеГруппировки);
		КонецЕсли; 
		СхемаКомпоновки = ирОбщий.СоздатьСхемуКомпоновкиПоЗапросу(ТекстЗапроса,,, Ложь);
		НастройкаКомпоновки = Новый НастройкиКомпоновкиДанных;
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
		Для Каждого ДоступноеПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если Не ДоступноеПоле.Папка Тогда
				ирОбщий.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкаКомпоновки.Выбор, ДоступноеПоле.Поле);
			КонецЕсли; 
		КонецЦикла;
		ирОбщий.СкопироватьОтборЛюбойЛкс(НастройкаКомпоновки.Отбор, Отбор);
		ЭлементОтбораКолонки = ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(НастройкаКомпоновки.Отбор, ПутьКДаннымКолонки);
		Если ЭлементОтбораКолонки <> Неопределено Тогда
			ЭлементОтбораКолонки.Использование = Ложь;
		КонецЕсли; 
		ЭтаФорма.ОтборИсточникаБезТекущейКолонки = ирОбщий.ПредставлениеОтбораЛкс(НастройкаКомпоновки.Отбор);
		Если Не УчитываяОтбор Тогда
			НастройкаКомпоновки.Отбор.Элементы.Очистить();
		КонецЕсли;
		//Отладить(Запрос);
		Запрос = ирОбщий.ПолучитьЗапросИзКомпоновкиЛкс(СхемаКомпоновки, НастройкаКомпоновки);
		Запрос.Текст = Запрос.Текст + "
		|АВТОУПОРЯДОЧИВАНИЕ";
		Если РежимОтладки Тогда
			ирОбщий.ПредложитьЗакрытьМодальнуюФормуЛкс(ЭтаФорма);
			ирОбщий.ОтладитьЛкс(Запрос);
			Возврат Истина;
		КонецЕсли; 
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаЗначений = РезультатЗапроса.Выбрать();
		КоличествоВсего = ВыборкаЗначений.Количество();
		Если КоличествоВсего > КоличествоЗагружаем Тогда
			ТекстИнтерфейса = "Количество различных значений составляет " + XMLСтрока(КоличествоВсего) + ", но отображены будут только " + XMLСтрока(КоличествоЗагружаем);
			Предупреждение(ТекстИнтерфейса);
			Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(КоличествоЗагружаем);
			Счетчик = 0;
			Пока ВыборкаЗначений.Следующий() Цикл
				Если Счетчик = КоличествоЗагружаем Тогда
					Прервать;
				КонецЕсли;
				ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
				НоваяСтрока = ОсновнойЭУ.Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗначений);
				НоваяСтрока.Количество = ВыборкаЗначений[ИмяСлужебногоПоляКоличество];
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
		Иначе
			ВыгрузкаРезультата = РезультатЗапроса.Выгрузить();
			ВыгрузкаРезультата.Колонки[ИмяСлужебногоПоляКоличество].Имя = "Количество";
			ОсновнойЭУ.Значение.Загрузить(ВыгрузкаРезультата);
			Если Истина
				И Не ЭтоМоноТип 
				И ВыгрузкаРезультата.Свернуть("ТипЗначения").Количество() > 1
			Тогда
				ЭтоМоноТип = Истина;
				ЭтаФорма.ИмяТипаЗначения = ирОбщий.ПредставлениеТипаЛкс(ВыгрузкаРезультата[0].ТипЗначения, мОписаниеТиповКолонки, Истина);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.НадписьТип.Видимость = ЭтоМоноТип;
	ЭлементыФормы.ИмяТипаЗначения.Видимость = ЭтоМоноТип;
	ОсновнойЭУ.Колонки.ТипЗначения.Видимость = Не ЭтоМоноТип;
	ОсновнойЭУ.Колонки.ИмяТипаЗначения.Видимость = Не ЭтоМоноТип;
	ЭлементыФормы.ДействияФормы.Кнопки.РазличныеТипЗначений.Доступность = Не ЭтоМоноТип;
	ЭлементыФормы.ИмяТипаЗначения.КнопкаОткрытия = Найти(ИмяТипаЗначения, ".") > 0;
	ЭтаФорма.ИмяТипаЗначения = СтрЗаменить(ИмяТипаЗначения, ирОбщий.ПеревестиСтроку("Ссылка") + ".", ".");
	Если Отбор <> Неопределено Тогда
		Если Ложь
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно 
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке 
		Тогда
			Если ЭтоБулеваКолонка() Тогда
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.НеРавно;
			ИначеЕсли ЭтоНеограниченнаяСтроковаяКолонка() Тогда
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.НеСодержит;
			Иначе
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.НеВСписке;
			КонецЕсли; 
		ИначеЕсли Ложь
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.Равно 
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке 
		Тогда
			Если ЭтоБулеваКолонка() Тогда
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.Равно;
			ИначеЕсли ЭтоНеограниченнаяСтроковаяКолонка() Тогда
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.Содержит;
			Иначе
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.ВСписке;
			КонецЕсли; 
		ИначеЕсли Ложь
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии 
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии 
		Тогда
			ЭтаФорма.ВидСравненияНовый = ВидСравнения.НеВСпискеПоИерархии;
		ИначеЕсли Ложь
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии 
			Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии 
		Тогда
			ЭтаФорма.ВидСравненияНовый = ВидСравнения.ВСпискеПоИерархии;
		Иначе
			Если ЭтоБулеваКолонка() Тогда
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.Равно;
			ИначеЕсли ЭтоНеограниченнаяСтроковаяКолонка() Тогда
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.Содержит;
			Иначе
				ЭтаФорма.ВидСравненияНовый = ВидСравнения.ВСписке;
			КонецЕсли; 
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбора") Тогда
			ЗначениеОтбора = ЭлементОтбора.Значение;
		Иначе
			ЗначениеОтбора = ЭлементОтбора.ПравоеЗначение;
		КонецЕсли; 
		Если Истина
			И МассивПомеченных.Количество() = 0
			И ЭлементОтбора.Использование 
		Тогда
			МассивПомеченных = Новый Массив;
			Если Ложь
				Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно 
				Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеВИерархии 
				Тогда
				МассивПомеченных.Добавить(ЗначениеОтбора);
			ИначеЕсли Ложь
				Или ЭлементОтбора.ВидСравнения = ВидСравнения.Равно 
				Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии 
			Тогда
				МассивПомеченных.Добавить(ЗначениеОтбора);
			ИначеЕсли Ложь
				Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке 
				Или ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии 
			Тогда
				Для Каждого ЭлементСписка Из ЗначениеОтбора Цикл
					МассивПомеченных.Добавить(ЭлементСписка.Значение);
				КонецЦикла;
			ИначеЕсли Ложь
				Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке 
				Или ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии 
			Тогда
				Для Каждого ЭлементСписка Из ЗначениеОтбора Цикл
					МассивПомеченных.Добавить(ЭлементСписка.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Для Каждого Значение Из МассивПомеченных Цикл
			СтрокаЗначения = ОсновнойЭУ.Значение.Найти(Значение, "Значение");
			Если СтрокаЗначения = Неопределено Тогда
				СтрокаЗначения = ОсновнойЭУ.Значение.Добавить();
				СтрокаЗначения.Значение = Значение;
			КонецЕсли;
			СтрокаЗначения.Пометка = Истина;
		КонецЦикла;
	КонецЕсли; 
	Если Не УстановитьТекущуюСтроку Тогда 
		Если ИсточникДействий.ТекущиеДанные <> Неопределено Тогда
			Попытка
				ТекущееЗначение = ИсточникДействий.ТекущиеДанные[ИмяКолонки];
				УстановитьТекущуюСтроку = Истина;
			Исключение
				// Например ДатаИзменения в форме списка архива. Не смог понять, почему ее нет 
				ТекущееЗначение = Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если УстановитьТекущуюСтроку Тогда 
		ТекущееЗначениеЛ = КолонкиТЧ.Значение.ТипЗначения.ПривестиЗначение(ТекущееЗначение);
		КлючПоиска = Новый Структура("Значение", ТекущееЗначениеЛ);
		Если Не ЭтоМоноТип Тогда
			КлючПоиска.Вставить("ТипЗначения", ирОбщий.ПредставлениеТипаЛкс(ТипЗнч(ТекущееЗначение), мОписаниеТиповКолонки, Ложь));
		КонецЕсли; 
		СтрокаЗначения = ОсновнойЭУ.Значение.НайтиСтроки(КлючПоиска);
		Если СтрокаЗначения.Количество() = 0 Тогда
			СтрокаЗначения = ОсновнойЭУ.Значение.Добавить();
			СтрокаЗначения.Значение = ТекущееЗначение;
		Иначе
			СтрокаЗначения = СтрокаЗначения[0];
		КонецЕсли;
		ОсновнойЭУ.ТекущаяСтрока = СтрокаЗначения;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура УчитываяОтборПриИзменении(Элемент)
	
	ОбновитьДанные(, Ложь);
	
КонецПроцедуры

Процедура ДействияФормыТолькоПомеченные(Кнопка)

	Кнопка = ЭлементыФормы.ДействияФормы.Кнопки.ТолькоПомеченные;
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементОтбора = ЭтаФорма.ЭлементыФормы.Значения.ОтборСтрок.Пометка;
	Если Кнопка.Пометка = Истина Тогда
		ЭлементОтбора.Установить(Истина);
	Иначе
		ЭлементОтбора.Использование = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка = Неопределено)
	
	ОсновныеДействияФормыПрименить();
	Закрыть();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПрименить(Кнопка = Неопределено)
	
	ДанныеКолонки = ирОбщий.ПутьКДаннымКолонкиТабличногоПоляЛкс(ЭтаФорма.ВладелецФормы);
	ИмяКолонки = СтрЗаменить(ДанныеКолонки, ".", "_");
	Если Не ЗначениеЗаполнено(ДанныеКолонки) Тогда   //Наименование колонки
		Возврат;
	КонецЕсли;
	СписокЭлементовДляОтбора = Новый СписокЗначений;
	Для Каждого ЭлементСписка Из ЭтаФорма.Значения Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокЭлементовДляОтбора.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ОтборПользовательский = Неопределено Тогда
		Если Найти(ДанныеКолонки, ".") > 0 Тогда
			// Для колонок реквизитов через точку управлямых форм пока делаем ничего
			Возврат;
		КонецЕсли; 
		Если ТипИсточникаДанных = "Список" Тогда
			// Таблица динамического списка без доступа данным
			Возврат;
		КонецЕсли; 
		ИсточникДействий = ЭтаФорма.ВладелецФормы;
		// Так выделенные строки не видно из-за отсутствия фокуса у той формы
		//СтрокиЗначения = ИсточникДействий.Значение.НайтиСтроки(Новый Структура(ДанныеКолонки, ЭлементыФормы.Значения.ТекущаяСтрока.Значение));
		//ИсточникДействий.ВыделенныеСтроки.Очистить();
		//Для Каждого СтрокаЗначения Из СтрокиЗначения Цикл
		//	ИсточникДействий.ВыделенныеСтроки.Добавить(СтрокаЗначения);
		//КонецЦикла;
		ЗначениеТабличногоПоля = ирОбщий.ДанныеЭлементаФормыЛкс(ИсточникДействий);
		Если ТипЗнч(ЗначениеТабличногоПоля) = Тип("ДанныеФормыДерево") Тогда
			ДеревоЗначений = ДанныеФормыВЗначение(ЗначениеТабличногоПоля, Тип("ДеревоЗначений"));
			#Если Сервер И Не Сервер Тогда
				ДеревоЗначений = Новый ДеревоЗначений;
			#КонецЕсли
			ТекущаяСтрока = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура(ИмяКолонки, ЭлементыФормы.Значения.ТекущаяСтрока.Значение), Истина);
			Если ТекущаяСтрока.Количество() > 0 Тогда
				СтрокаПути = ирОбщий.Дерево_ПутьСтрокойЛкс(ТекущаяСтрока[0], "");
				ТекущаяСтрока = ирОбщий.Дерево_НайтиПоПутиСтрокойЛкс(ЗначениеТабличногоПоля, "", СтрокаПути);
				Если ТипЗнч(ИсточникДействий) = Тип("ТаблицаФормы") Тогда
					ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
				КонецЕсли; 
				ИсточникДействий.ТекущаяСтрока = ТекущаяСтрока;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(ЗначениеТабличногоПоля) = Тип("ДеревоЗначений") Тогда
			#Если Сервер И Не Сервер Тогда
				ДеревоЗначений = Новый ДеревоЗначений;
			#КонецЕсли
			ТекущаяСтрока = ЗначениеТабличногоПоля.Строки.НайтиСтроки(Новый Структура(ИмяКолонки, ЭлементыФормы.Значения.ТекущаяСтрока.Значение), Истина);
			Если ТекущаяСтрока.Количество() > 0 Тогда
				ИсточникДействий.ТекущаяСтрока = ТекущаяСтрока[0];
			КонецЕсли; 
		Иначе
			ТекущаяСтрока = ЗначениеТабличногоПоля.НайтиСтроки(Новый Структура(ИмяКолонки, ЭлементыФормы.Значения.ТекущаяСтрока.Значение));
			Если ТекущаяСтрока.Количество() > 0 Тогда
				ТекущаяСтрока = ТекущаяСтрока[0];
				Если ТипЗнч(ИсточникДействий) = Тип("ТаблицаФормы") Тогда
					ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
				КонецЕсли; 
				ИсточникДействий.ТекущаяСтрока = ТекущаяСтрока;
			КонецЕсли; 
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	Если ТипЗнч(ОтборПользовательский) = Тип("Отбор") Тогда
		ЭлементОтбора = ОтборПользовательский[ИмяКолонки];
		ДоступноеПоле = ЭлементОтбора;
	Иначе
		#Если Сервер И Не Сервер Тогда
		    Пустышка = Новый НастройкиКомпоновкиДанных;
			ОтборПользовательский = Пустышка.Отбор;
		#КонецЕсли
		ДоступноеПоле = ОтборПользовательский.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ДанныеКолонки));
		Если ДоступноеПоле = Неопределено Тогда
			ДоступноеПоле = ОтборПользовательский.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СтрЗаменить(ДанныеКолонки, "_", ".")));
		КонецЕсли; 
		ЭлементОтбора = ирОбщий.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(ОтборПользовательский, ДоступноеПоле.Поле,,,,, Ложь);
	КонецЕсли; 
	Если СписокЭлементовДляОтбора.Количество() = 0 Тогда
		Ответ = Вопрос("Не выбрано ни одного элемента списка. Хотите отключить отбор по колонке?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли; 
	Если ЭтоБулеваНеограниченнаяСтроковаяКолонка() И СписокЭлементовДляОтбора.Количество() > 0 Тогда
		СписокЭлементовДляОтбора = СписокЭлементовДляОтбора[0].Значение;
		Если ЭтоБулеваКолонка() И ТипЗнч(СписокЭлементовДляОтбора) <> Тип("Булево") Тогда
			Сообщить("Установка такого отбора недопустима для булево типа");
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбора") Тогда
		ЭлементОтбора.ВидСравнения = ЭтаФорма.ВидСравненияНовый;
		ЭлементОтбора.Значение = СписокЭлементовДляОтбора;
	Иначе
		мПлатформа = ирКэш.Получить();
		#Если Сервер И Не Сервер Тогда
			мПлатформа = Обработки.ирПлатформа.Создать()
		#КонецЕсли
		СтрокаВидаСравнения = мПлатформа.СоответствиеВидовСравнения.Найти(ЭтаФорма.ВидСравненияНовый, "Построитель");
		лВидСравнения = СтрокаВидаСравнения.Компоновка;
		ЭлементОтбора.ВидСравнения = лВидСравнения;
		ЭлементОтбора.ПравоеЗначение = СписокЭлементовДляОтбора;
	КонецЕсли; 
	ЭлементОтбора.Использование = Ложь; 
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

Процедура ЗначенияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Отбор <> Неопределено Тогда
		Если ЭтоБулеваНеограниченнаяСтроковаяКолонка() Тогда
			Для Каждого СтрокаЗначения Из Значения Цикл
				СтрокаЗначения.Пометка = Ложь;
			КонецЦикла;
		КонецЕсли; 
		ЭлементыФормы.Значения.ТекущаяСтрока.Пометка = Истина;
	КонецЕсли;
	Если ЭлементыФормы.ЗакрыватьПриВыборе.Доступность И ЗакрыватьПриВыбореР Тогда
		ОсновныеДействияФормыОК();
	Иначе
		ОсновныеДействияФормыПрименить();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.ДействияФормы.Кнопки.Идентификаторы);

КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Строки = ЭтаФорма.Значения.НайтиСтроки(Новый Структура("Пометка", Истина));
	//Текст = "";
	//МаксимальноеЧисло = 5;
	//Счетчик = 0;
	//Для Каждого СтрокаЗначения Из Строки Цикл
	//	Если Текст <> "" Тогда
	//		Текст = Текст + ",";
	//	КонецЕсли;
	//	Текст = Текст + СтрокаЗначения.Значение;
	//	Счетчик = Счетчик + 1;
	//	Если МаксимальноеЧисло = Счетчик Тогда
	//		Текст = Текст + ",...";
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//ЭтаФорма.ЭлементыФормы.ПредставлениеВыбранных.Заголовок = Текст;
	ЭтаФорма.КоличествоВсего = ЭтаФорма.Значения.Количество();
	ЭтаФорма.КоличествоВыбранных = Строки.Количество();

КонецПроцедуры

Процедура ДействияФормыСнятьПометки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхИлиОтобранныхСтрокЛкс(ЭлементыФормы.Значения, , Ложь,,, Ложь);
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ИсточникДействий = ЭтаФорма.ВладелецФормы;
	Если ИсточникДействий = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	ДанныеКолонки = ирОбщий.ПутьКДаннымКолонкиТабличногоПоляЛкс(ИсточникДействий);
	Если Не ЗначениеЗаполнено(ДанныеКолонки) Тогда   //Наименование колонки
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ЭтаФорма.Значения.Очистить();
	ЭтаФорма.УчитываяОтбор = Истина;
	Если Не ОбновитьДанные(, Истина) Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	СписокВыбора = ЭтаФорма.ЭлементыФормы.ВидСравненияНовый.СписокВыбора;
	СписокВыбора.Очистить();
	#Если Сервер И Не Сервер Тогда
	    мОписаниеТиповКолонки = Новый ОписаниеТипов;
	#КонецЕсли
	Если ЭтоБулеваНеограниченнаяСтроковаяКолонка() Тогда
		СписокВыбора.Добавить(ВидСравнения.Равно);
		СписокВыбора.Добавить(ВидСравнения.НеРавно);
		ЭлементыФормы.Значения.Колонки.Пометка.ТолькоПросмотр = Истина;
	Иначе
		СписокВыбора.Добавить(ВидСравнения.ВСписке);
		СписокВыбора.Добавить(ВидСравнения.ВСпискеПоИерархии);
		СписокВыбора.Добавить(ВидСравнения.НеВСписке);
		СписокВыбора.Добавить(ВидСравнения.НеВСпискеПоИерархии);
	КонецЕсли; 
	ПрименитьФильтрПоПодстрокеБезСохранения();
	Если ТипЗнч(ИсточникДействий) = Тип("ТабличноеПоле") Тогда
		ПредставлениеКолонки = ИсточникДействий.ТекущаяКолонка.ТекстШапки;
	Иначе
		ПредставлениеКолонки = ИсточникДействий.ТекущийЭлемент.Заголовок;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПредставлениеКолонки) Тогда
		ПредставлениеКолонки = ДанныеКолонки;
	КонецЕсли;
	ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭтаФорма.Заголовок,, ПредставлениеКолонки, ": ");

КонецПроцедуры

Функция ЭтоБулеваНеограниченнаяСтроковаяКолонка()
	Возврат Ложь
		Или ЭтоБулеваКолонка()
		Или ЭтоНеограниченнаяСтроковаяКолонка();
КонецФункции

Функция ЭтоБулеваКолонка()
	
	#Если Сервер И Не Сервер Тогда
		мОписаниеТиповКолонки = Новый ОписаниеТипов;
	#КонецЕсли
	Возврат Истина
		И мОписаниеТиповКолонки.Типы().Количество() = 1
		И мОписаниеТиповКолонки.СодержитТип(Тип("Булево"));

КонецФункции
	
Функция ЭтоНеограниченнаяСтроковаяКолонка()
	
	#Если Сервер И Не Сервер Тогда
		мОписаниеТиповКолонки = Новый ОписаниеТипов;
	#КонецЕсли
	Возврат Истина
		И мОписаниеТиповКолонки.Типы().Количество() = 1
		И мОписаниеТиповКолонки.СодержитТип(Тип("Строка"))
		И мОписаниеТиповКолонки.КвалификаторыСтроки.Длина = 0;

КонецФункции

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДействияФормыРазличныеТипЗначений(Кнопка)
	
	ТабличноеПоле = ЭлементыФормы.Значения;
	ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ТипЗначения;
	ирОбщий.ОткрытьРазличныеЗначенияКолонкиЛкс(ТабличноеПоле);
	
КонецПроцедуры

Процедура ДействияФормыОбработатьОбъекты(Кнопка)
	
	ирОбщий.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.Значения, "Значение", ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыВСписок(Кнопка)
	
	ирОбщий.ПредложитьЗакрытьМодальнуюФормуЛкс(ЭтаФорма);
	Список = Новый СписокЗначений;
	Список.ТипЗначения = мОписаниеТиповКолонки;
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.Значения.ВыделенныеСтроки Цикл
		Список.Добавить(ВыделеннаяСтрока.Значение,, ВыделеннаяСтрока.Пометка);
	КонецЦикла;
	ирОбщий.ОткрытьЗначениеЛкс(Список,,,, Ложь);
	
КонецПроцедуры

Процедура ДействияФормыОткрытьТип(Кнопка)
	
	Если ЭлементыФормы.Значения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ЭлементыФормы.Значения.ТекущаяСтрока.ИмяТипаЗначения) Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьЗначениеЛкс(Тип(ЭлементыФормы.Значения.ТекущаяСтрока.ИмяТипаЗначения), Ложь);
	
КонецПроцедуры

Процедура ДействияФормыОткрытьЗначение(Кнопка)
	
	Если ЭлементыФормы.Значения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьЗначениеЛкс(ЭлементыФормы.Значения.ТекущаяСтрока.Значение, Ложь);
	
КонецПроцедуры

Процедура ФильтрПоПодстрокеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ирОбщий.ПромежуточноеОбновлениеСтроковогоЗначенияПоляВводаЛкс(Элемент, Текст);
	ПрименитьФильтрПоПодстрокеБезСохранения();
	
КонецПроцедуры

Процедура ФильтрПоПодстрокеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ФильтрПоПодстрокеПриИзменении(Элемент)
	
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	ПрименитьФильтрПоПодстрокеБезСохранения();

КонецПроцедуры

Процедура ПрименитьФильтрПоПодстрокеБезСохранения()
	
	ЭлементыФормы.Значения.ОтборСтрок.ЗначениеПредставление.ВидСравнения = ВидСравнения.Содержит;
	ЭлементыФормы.Значения.ОтборСтрок.ЗначениеПредставление.Использование = ЗначениеЗаполнено(ЭлементыФормы.Значения.ОтборСтрок.ЗначениеПредставление.Значение);

КонецПроцедуры

Процедура ФильтрПоПодстрокеОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Значение = ""; // Меняем Неопределено на пустую строку
	ПрименитьФильтрПоПодстрокеБезСохранения();

КонецПроцедуры

Процедура ДействияФормыУстановитьПометки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхИлиОтобранныхСтрокЛкс(ЭлементыФормы.Значения, , Истина,,, Ложь);
	
КонецПроцедуры

Процедура ДействияФормыОбновить(Кнопка)
	
	ОбновитьДанные();
	
КонецПроцедуры

Процедура ДействияФормыИсполняемыйЗапрос(Кнопка)
	
	ОбновитьДанные(Истина);
	
КонецПроцедуры

Процедура ЗначенияПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ТабличноеПолеПриИзмененииФлажкаЛкс(Элемент, Колонка);

КонецПроцедуры

Процедура ЗначенияПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура ДействияФормыРедакторОбъектаБД(Кнопка)
	
	Если ЭлементыФормы.Значения.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗначениеСсылки = ЭлементыФормы.Значения.ТекущаяСтрока.Значение;
	Если ирОбщий.ЛиСсылкаНаОбъектБДЛкс(ЗначениеСсылки, Ложь) Тогда
		ирОбщий.ОткрытьСсылкуВРедактореОбъектаБДЛкс(ЗначениеСсылки);
	КонецЕсли; 

КонецПроцедуры

Процедура ПриОткрытии()
	ирОбщий.Форма_ПриОткрытииЛкс(ЭтаФорма);
КонецПроцедуры

Процедура ПриЗакрытии()
	Форма = Неопределено;
	ирОбщий.Форма_ПриЗакрытииЛкс(ЭтаФорма);
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	ирОбщий.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка)
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт 
	
	ирОбщий.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

Процедура ИмяТипаЗначенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ПредложитьЗакрытьМодальнуюФормуЛкс(ЭтаФорма);
	ирОбщий.ОткрытьОбъектМетаданныхЛкс(Метаданные.НайтиПоТипу(Тип(ирОбщий.ИмяТипаИзПолногоИмениМДЛкс(ИмяТипаЗначения))));
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирРазличныеЗначенияКолонки.Форма.Форма");
// Антибаг платформы. Очищаются свойство данные, если оно указывает на отбор табличной части
ЭлементыФормы.ФильтрПоПодстроке.Данные = "ЭлементыФормы.Значения.Отбор.ЗначениеПредставление.Значение";
ЭлементыФормы.ФильтрПоПодстроке.КнопкаВыбора = Ложь;
ЭлементыФормы.ФильтрПоПодстроке.КнопкаСпискаВыбора = Истина;
ЗакрыватьПриВыбореР = Истина;
