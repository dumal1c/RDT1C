Перем стНастройки;
Перем КомандыПоиска;
Перем дзВсеОбъекты Экспорт;
Перем ДеревоПодсистем Экспорт;
Перем мСписокПолнотекстовогоПоиска; // Глобальный поиск
Перем СтатическиеВетки Экспорт;
Перем мПлатформа Экспорт;
Перем МассивСтатическихВеток Экспорт;
Перем ВеткиМетаданных;
Перем RegExp Экспорт; // Для поиска с помощью регулярных выражений
Перем ИмяКорневойПодсистемы;
Перем ЕстьСправочникВнешнихОбработок Экспорт;
Перем мТекущийПользователь Экспорт;
Перем ПутьФайлаНастроек;
Перем ЕстьУниверсальныйОтчет Экспорт;
Перем Есть_РС_СохраненныеНастройки Экспорт;
//Перем Есть_СправочникОрганизаций;
Перем мСловаСтрокиУмногоПоиска Экспорт;
Перем СтрокаУмногоПоискаБезСуффикса Экспорт;
Перем СтрокаСуффиксаУмногоПоиска Экспорт;
Перем флПробоватьУмныйПоиск Экспорт;
Перем ЧислоСуффиксаУмногоПоиска;
Перем ДлинаСуффиксаУмногоПоиска;
Перем мВременныйФильтрИмен Экспорт;
Перем ПредыдущаяСтрока; // Нужна для обработки ожидания при генерации контекстного меню

Перем мКоличествоСтатическихКнопокКоманднойПанели;
//Перем мСписокВыбораПодсистем;
Перем мСвязанныйДинамическийСписок;
Перем мХранимыеТипыМетаобъектов;

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

// Открывает заданный отчет с заданной настройкой
//
// Параметры
//  ИмяОтчета
//  ИмяНастройки
//
// Возвращаемое значение:
//   Форма отчета, готовая к выполнению
//
Функция ОткрытьНастройкуОтчета(ИмяОтчета, ИмяНастройки)
	Отчет = Отчеты[ИмяОтчета].Создать();
	Объект = ?(ИмяОтчета = "УниверсальныйОтчет", Отчет, Отчет.УниверсальныйОтчет);
	ФормаОтчета = Отчет.ПолучитьФорму();
	
	глТекущийПользователь = (Вычислить("глЗначениеПеременной(""глТекущийПользователь""))"));
	Если НЕ ЗначениеЗаполнено(глТекущийПользователь) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНач) Тогда
		
		Объект.ДатаНач = Вычислить("УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяДатаНачалаОтчетов"")");
		
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глТекущийПользователь);
	СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект."+ИмяОтчета);
	СтруктураНастройки.Вставить("НаименованиеНастройки", ИмяНастройки);
	
	Если Вычислить("УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки)")=Истина Тогда
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		Отчет.ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
		Объект.ВосстановитьПараметрыПечати(Объект, Отчет, ФормаОтчета, СтруктураНастройки.СохраненнаяНастройка);
		
	КонецЕсли;
	
	Объект.ВосстановитьДополнительныеНастройки(Объект, Отчет, ИмяОтчета);
	
	
	//Объект.ВосстановитьНастройки(Объект, Отчет, ФормаОтчета, ИмяОтчета);
	Объект.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	
	Возврат ФормаОтчета;
КонецФункции // ОткрытьНастройкуОтчета()

// Открывает консоль отчетов (из конфигурации или из макета) и открывает переданную настройку
//
// Параметры
//  ИмяФайлаНастроек - полное имя файла с настройками
//
// Возвращаемое значение:
//   Форма консоли отчетов
//
Функция ОткрытьНастройкуКонсолиЗапросовПостроителейКомпоновок(ИмяФайлаНастроек)
	Расширение = ВРЕГ(Прав(ИмяФайлаНастроек,3));
	Если Расширение = "RCF" Тогда
		ИмяОбъекта = "КонсольОтчетов";
		ИмяОбъекта1 = "ирКонсольПостроителейОтчетов";
	ИначеЕсли Расширение = "SEL" Тогда
		ИмяОбъекта = "КонсольЗапросов";
		ИмяОбъекта1 = "ирКонсольЗапросов";
	ИначеЕсли Расширение = "DCF" Тогда
		ИмяОбъекта = "КонсольКомпоновокДанных";
		ИмяОбъекта1 = "ирКонсольКомпоновокДанных";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Если Ложь
		Или Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено 
		Или Метаданные.Отчеты.Найти(ИмяОбъекта) <> Неопределено
	Тогда
		Форма = Обработки[ИмяОбъекта].ПолучитьФорму();
	ИначеЕсли Ложь
		Или Метаданные.Обработки.Найти(ИмяОбъекта1) <> Неопределено 
		Или Метаданные.Отчеты.Найти(ИмяОбъекта1) <> Неопределено
	Тогда
		Форма = Обработки[ИмяОбъекта1].ПолучитьФорму();
	Иначе
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = ПолучитьМакет(ИмяОбъекта);
			ДвоичныеДанные.Записать(ИмяФайла);
			Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
			Если Форма = Неопределено Тогда
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
			КонецЕсли;
			УдалитьФайлы(ИмяФайла);
		Исключение
			Предупреждение("Не удалось создать обработку для открытия данной настройки");
			ирОбщий.СообщитьЛкс(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки; 
	КонецЕсли;
	Если СтрДлина(ИмяФайлаНастроек)>4 Тогда
		Файл = Новый Файл(ИмяФайлаНастроек);
		Если Файл.Существует() Тогда
			ирОбщий.СохранитьЗначениеЛкс(ИмяОбъекта+"_ИмяФайла", ИмяФайлаНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Форма;
КонецФункции // ОткрытьНастройкуКонсолиОтчетов()

// Возвращает форму обработки, из элемента справочника внешних обработок, найденного по переданному коду
//
// Параметры
//  Код
// Возвращаемое значение:
//   Форма обработки, содержащейся в указанном элементе справочника
//
Функция ОткрытьОбработкуИзСправочникаВнешнихОбработок(Код)
	
	ВыбраннаяОбработка = Справочники.ВнешниеОбработки.НайтиПоКоду(Код);
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные = ВыбраннаяОбработка.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
	Если ТипЗнч(Форма) <> Тип("Форма") Тогда
		Форма = ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
	КонецЕсли;
	УдалитьФайлы(ИмяФайла);
	Возврат Форма;
	
КонецФункции // ОткрытьОбработкуИзСправочникаВнешнихОбработок()

// Добавляет кнопку действия на командную панель
//
// Параметры
// КП - кнопки командной панели
// Имя - имя кнопки
// Синоним - синоним объекта. текст кнопки
// Команда - команда, выполняемая кнопкой. Хранится в тексте подсказки
// Действие - обработчик кнопки. Для простоты будет один. Команда выполняется по содержимому подсказки
//
Процедура ДобавитьКнопку(КП, Имя, Синоним = "", Команда, Действие, Картинка = Неопределено)
	
	Кнопка = КП.Добавить(Имя, ТипКнопкиКоманднойПанели.Действие, ?(Синоним = "", Имя, Синоним), Действие);
	Кнопка.Подсказка = Команда; // Затем она отсюда читается
	Если Картинка <> Неопределено Тогда
		Кнопка.Картинка = Картинка;
	КонецЕсли; 
	Если КП.Количество() = мКоличествоСтатическихКнопокКоманднойПанели + 1 Тогда
		Кнопка.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьКнопку()

// В зависимости от выбранного объекта, генерирует команды контекстного меню
Процедура СгенерироватьКомандыКонтекстногоМеню()
	ТекущаяСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	Если ТекущаяСтрока = ПредыдущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	ПредыдущаяСтрока = ТекущаяСтрока; 
		
	УдалитьКонтекстныеКнопкиКоманднойПанели();
	КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки;
	
	Если ТекущаяСтрока.Вид = "" ИЛИ ТекущаяСтрока.Имя = "" Тогда
		Возврат;	
	КонецЕсли;
		
	ВидОбъекта = ТекущаяСтрока.Вид;
	ИмяОбъекта = ТекущаяСтрока.Имя;
	ДействиеОткрытиеФормы = Новый Действие("ОткрытиеФормы");
	Если ВидОбъекта = "ОбщиеФормы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Форма"));
	ИначеЕсли ВидОбъекта = "Интерфейсы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Переключить", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ИнвертироватьФлажки"));
	ИначеЕсли ВидОбъекта = "Внешние обработки" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Обработка"));
	ИначеЕсли ВидОбъекта = "Внешние отчеты" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Отчет"));
	ИначеЕсли ВидОбъекта = "Табличные документы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ТабличныйДокумент"));
	ИначеЕсли ВидОбъекта = "Текстовые документы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("РедактироватьДокумент"));
	ИначеЕсли Найти(ВидОбъекта, "Настройки консоли") > 0 Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("СформироватьОтчет"));
	ИначеЕсли Истина
		И ЕстьУниверсальныйОтчет 
		И Есть_РС_СохраненныеНастройки 
		И Лев(ТекущаяСтрока.Вид, 11) = "ОтчетОбъект" 
		И Метаданные.Отчеты.Найти(Сред(ТекущаяСтрока.Вид, Найти(ТекущаяСтрока.Вид, ".") + 1)) <> Неопределено
	Тогда
		// Восстановление сохраненной настройки
		ДобавитьКнопку(КнопкиКоманднойПанели, "УниверсальныйОтчетПоРегиструНакопления", "Открыть", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Отчет"));
	ИначеЕсли ЕстьСправочникВнешнихОбработок И ВидОбъекта = "СправочникВнешниеОбработки" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", "Открыть", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Обработка"));
		ДобавитьКнопку(КнопкиКоманднойПанели, "НайтиВСправочникеВнешнихОбработок", "Найти в справочнике внешних обработок", , ДействиеОткрытиеФормы,
			ирПолучитьКартинкуЕслиЕсть("Поиск"));
	ИначеЕсли ирОбщий.ЛиСсылкаНаОбъектБДЛкс(ИмяОбъекта) Тогда	
		// Полнотекстовый поиск
		СсылкаОбъекта = ИмяОбъекта;
		Если СсылкаОбъекта <> Неопределено Тогда
			// В первую очередь нужны исследователь объектов  и редактор реквизитов - у них нет ограничений на открытие формы и тп
			ДобавитьКнопку(КнопкиКоманднойПанели, "ирРедакторОбъектаБД", "Редактор объекта БД", , ДействиеОткрытиеФормы,
				ирПолучитьКартинкуЕслиЕсть("ирРедактироватьОбъектБД"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "ирИсследоватьОбъект", "Исследовать объект", , ДействиеОткрытиеФормы,
				ирПолучитьКартинкуЕслиЕсть("ирИсследовать"));
			ОбъектМД = СсылкаОбъекта.Метаданные();
			ДобавитьПодменюФорм(ДействиеОткрытиеФормы, КнопкиКоманднойПанели, ОбъектМД);
		КонецЕсли;
		Если мСвязанныйДинамическийСписок <> Неопределено И мСвязанныйДинамическийСписок.Открыта() Тогда
			мСвязанныйДинамическийСписок.УстановитьОбъектМетаданных(ТекущаяСтрока.ПолноеИмяОбъекта);
		КонецЕсли; 
	ИначеЕсли ВидОбъекта = "Константы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "РедакторКонстант", "Редактор констант", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Константа"));
		ДобавитьКнопку(КнопкиКоманднойПанели, "ИсследоватьМетаданные", "Исследовать метаданные", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирИсследовать"));
	ИначеЕсли ЗначениеЗаполнено(ВидОбъекта) И ЗначениеЗаполнено(ИмяОбъекта) Тогда
		// Объект ИБ или метаданные
		ДобавитьКнопку(КнопкиКоманднойПанели, "ИсследоватьМетаданные", "Исследовать метаданные", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирИсследовать"));
		Если ЕстьУниверсальныйОтчет И ВидОбъекта = "РегистрыНакопления" Тогда
			ДобавитьКнопку(КнопкиКоманднойПанели, "УниверсальныйОтчетПоРегиструНакопления", "Универсальный отчет", , ДействиеОткрытиеФормы,
				ирПолучитьКартинкуЕслиЕсть("Отчет"));
		КонецЕсли;
		ОбъектМД = ОбъектМДВетви(ТекущаяСтрока);
		КорневойТип = ирОбщий.ПолучитьКорневойТипКонфигурацииЛкс(ОбъектМД);
		Если стНастройки.ПриАвтозапускеОткрыватьФормуСписка Тогда
			Если ирОбщий.ЛиКорневойТипТаблицыБДЛкс(КорневойТип) Тогда
				ИмяОсновнойФормы = ?(ОбъектМД.ОсновнаяФормаСписка = Неопределено, "ФормаСписка", ОбъектМД.ОсновнаяФормаСписка.Имя);
				ДобавитьКнопку(КнопкиКоманднойПанели, ИмяОсновнойФормы, "Форма списка (основная)", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирСписокЗначений"));
			КонецЕсли; 
		КонецЕсли;
		ДобавитьПодменюФорм(ДействиеОткрытиеФормы, КнопкиКоманднойПанели, ОбъектМД);
		ПодменюМодули = КнопкиКоманднойПанели.Добавить("ПодменюМодули", ТипКнопкиКоманднойПанели.Подменю, "Модули");
		ПодменюМодули.Картинка = ирПолучитьКартинкуЕслиЕсть("ирАлгоритм");
		ДобавитьКнопку(ПодменюМодули.Кнопки, "МодульОбъекта", "Модуль объекта", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирКонфигуратор1С8"));
		ДобавитьКнопку(ПодменюМодули.Кнопки, "МодульМенеджера", "Модуль менеджера", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирКонфигуратор1С8"));
		Если ирОбщий.ЛиКорневойТипТаблицыБДЛкс(КорневойТип) Тогда
			//Если ирКэш.НомерРежимаСовместимостиЛкс() >= 803011 Тогда
			//	ДобавитьКнопку(КнопкиКоманднойПанели, "ИсторияДанных", "История данных", , ДействиеОткрытиеФормы, 
			//		ирПолучитьКартинкуЕслиЕсть("ИсторияДанных"));
			//КонецЕсли; 
			ДобавитьКнопку(КнопкиКоманднойПанели, "ДинамическийСписок", "Динамический список", , ДействиеОткрытиеФормы, ирКэш.КартинкаИнструментаЛкс("Обработка.ирДинамическийСписок"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "СвязанныйДинамическийСписок", "Связанный динамический список", , ДействиеОткрытиеФормы, ирКэш.КартинкаИнструментаЛкс("Обработка.ирДинамическийСписок"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "РедакторОбъектаБД", "Редактор объекта БД", , ДействиеОткрытиеФормы, ирКэш.КартинкаИнструментаЛкс("Обработка.ирРедакторОбъектаБД"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "АнализПравДоступа", "Анализ прав доступа", , ДействиеОткрытиеФормы, ирКэш.КартинкаИнструментаЛкс("Отчет.ирАнализПравДоступа"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "КонсольЗапросов", "Консоль запросов", , ДействиеОткрытиеФормы, ирКэш.КартинкаИнструментаЛкс("Обработка.ирКонсольЗапросов"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "КонсольКомпоновки", "Консоль компоновки", , ДействиеОткрытиеФормы, ирКэш.КартинкаИнструментаЛкс("Обработка.ирКонсольКомпоновокДанных"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "ПодборИОбработкаОбъектов", "Подбор и обработка объектов", , ДействиеОткрытиеФормы, ирКэш.КартинкаИнструментаЛкс("Обработка.ирПодборИОбработкаОбъектов"));
		КонецЕсли; 
		ДобавитьКнопку(КнопкиКоманднойПанели, "ЖурналРегистрации", "Журнал регистрации", , ДействиеОткрытиеФормы, ирКэш.КартинкаИнструментаЛкс("Обработка.ирАнализЖурналаРегистрации"));
		Если мСвязанныйДинамическийСписок <> Неопределено И мСвязанныйДинамическийСписок.Открыта() Тогда
			мСвязанныйДинамическийСписок.УстановитьОбъектМетаданных(ТекущаяСтрока.ПолноеИмяОбъекта);
		КонецЕсли; 
	ИначеЕсли ТекущаяСтрока.Вид = Неопределено И ТекущаяСтрока.Имя = "Избранное" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "ВыгрузитьСсылки", "Выгрузить ссылки", , Новый Действие("Избранное_ВыгрузитьСсылки"));
	КонецЕсли;
	ДобавитьКнопку(КнопкиКоманднойПанели, "Подсистемы", "Подсистемы объекта", , Новый Действие("ФильтрПодсистем_НачалоВыбора"), ЭлементыФормы.ФильтрИмен.Картинка);
	ДобавитьКнопку(КнопкиКоманднойПанели, "ФункциональныеОпции", "Функциональные опции", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирФункциональнаяОпция"));
	ДобавитьКнопку(КнопкиКоманднойПанели, "СправкаМетаданного", "Справка объекта", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирСправкаМетаданного"));
	ДобавитьКнопку(КнопкиКоманднойПанели, "ОткрытьВКонфигураторе", "Открыть в конфигураторе", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирКонфигуратор1С8"));
	
КонецПроцедуры

Процедура ДобавитьПодменюФорм(ДействиеОткрытиеФормы, Знач КнопкиКоманднойПанели, Знач ОбъектМД)
	
	МДФормы = ОбъектМД.Формы;
	ПодменюФормы = КнопкиКоманднойПанели.Добавить("ПодменюФормы", ТипКнопкиКоманднойПанели.Подменю, "Формы");
	ПодменюФормы.Картинка = ирПолучитьКартинкуЕслиЕсть("Форма");
	Для каждого МДФорма Из МДФормы Цикл
		Попытка
			ОсновнаяФормаСписка = ОбъектМД.ОсновнаяФормаСписка;
		Исключение
			ОсновнаяФормаСписка = Неопределено;
		КонецПопытки;
		Если стНастройки.ПриАвтозапускеОткрыватьФормуСписка И МДФорма = ОсновнаяФормаСписка Тогда
			// Повторно добавлять не нужно
			Продолжить;
		КонецЕсли;
		Суффикс = "";
		Попытка
			ЭтоОсновнаяФорма = ОбъектМД.ОсновнаяФорма = МДФорма;
		Исключение
			ЭтоОсновнаяФорма = Ложь;
		КонецПопытки;
		Если ЭтоОсновнаяФорма Тогда
			Суффикс = " (основная)";
		КонецЕсли; 
		Попытка
			ЭтоОсновнаяФормаСписка = ОбъектМД.ОсновнаяФормаСписка = МДФорма;
		Исключение
			ЭтоОсновнаяФормаСписка = Ложь;
		КонецПопытки; 
		Если ЭтоОсновнаяФормаСписка Тогда
			Суффикс = " (основная списка)";
		КонецЕсли; 
		ДобавитьКнопку(ПодменюФормы.Кнопки, "Форма." + МДФорма.Имя, МДФорма.Синоним + Суффикс, , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Форма"));
	КонецЦикла;

КонецПроцедуры

Функция ОбъектМДВетви(Знач ТекущаяСтрока)
	
	ВидОбъекта = ТекущаяСтрока.Вид;
	ИмяОбъекта = ТекущаяСтрока.Имя;
	Если Найти(ИмяОбъекта, ".") > 0 Тогда
		ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(ИмяОбъекта);
	Иначе
		Если Найти(ВидОбъекта, ".") > 0 Тогда
			ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(ВидОбъекта);
			Если ирОбщий.СтрНачинаетсяСЛкс(ВидОбъекта, "ВнешнийИсточникДанных.") Тогда
				ОбъектМД = ОбъектМД.Таблицы[ИмяОбъекта];
			КонецЕсли;
		Иначе
			КоллекцияМД = Метаданные[ВидОбъекта];
			ОбъектМД = КоллекцияМД[ИмяОбъекта];
		КонецЕсли; 
	КонецЕсли;
	Возврат ОбъектМД;

КонецФункции // СгенерироватьКомандыКонтекстногоМеню()

Процедура Избранное_ВыгрузитьСсылки()
	
	СтрокиИзбранного = стНастройки.СтатистикаИспользования.НайтиСтроки(Новый Структура("Избранное", 1));
	СписокСсылок = Новый СписокЗначений;
	Для Каждого СтрокаИзбранного Из СтрокиИзбранного Цикл
		Если ирОбщий.ЛиСсылкаНаОбъектБДЛкс(СтрокаИзбранного.Имя, Ложь) Тогда
			СписокСсылок.Добавить(СтрокаИзбранного.Имя);
		КонецЕсли; 
	КонецЦикла;
	Если СписокСсылок.Количество() > 0 Тогда
		ирОбщий.ОткрытьЗначениеЛкс(СписокСсылок,,,, Ложь);
	КонецЕсли; 
	
КонецПроцедуры

Процедура УдалитьКонтекстныеКнопкиКоманднойПанели()

	// Очистить динамические кнопки командной панели
	КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки;
	КоличествоКнопок = КнопкиКоманднойПанели.Количество();
	Для Сч = 1 По КоличествоКнопок - мКоличествоСтатическихКнопокКоманднойПанели Цикл
		КнопкиКоманднойПанели.Удалить(КоличествоКнопок - Сч);
	КонецЦикла;

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, стНастройки);
	ЭлементыФормы.КомандыПанели.Кнопки.ИмяСиноним.Пометка = ЭтотОбъект.флИмяСиноним;
	ирОбщий.ТабличноеПолеОбновитьКолонкиИмяСинонимЛкс(ЭлементыФормы.ДеревоИнтерфейса, ЭтотОбъект.флИмяСиноним);
	Если стНастройки.Свойство("флИскатьОтладочнуюВерсию") и стНастройки.флИскатьОтладочнуюВерсию Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Переоткрыть(Истина);
	Иначе
		стНастройки.Вставить("флИскатьОтладочнуюВерсию", Ложь);
	КонецЕсли;
	ЗаполнитьДеревоПодсистем();
	ЗаполнитьДеревоВсехОбъектов();
	
КонецПроцедуры // ПередОткрытием

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Отказ = Истина;
КонецПроцедуры

Процедура ПриОткрытии()
	
	#Если Сервер И Не Сервер Тогда
	    мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	ирОбщий.Форма_ПриОткрытииЛкс(ЭтаФорма);
	мХранимыеТипыМетаобъектов = ирКэш.ТипыМетаОбъектов(Ложь, Ложь, Ложь);
	спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
	Для каждого Фильтр из стНастройки.ИсторияФильтраИмен цикл
		спФильтр.Добавить(Фильтр);
	КонецЦикла;
	ПрименитьПараметрыФормы(Истина);
	ТабличныйДокумент = ПолучитьМакет("Картинки");
	КартинкаСтрок = ТабличныйДокумент.Рисунки[0].Картинка;
	ЭлементыФормы.ДеревоИнтерфейса.Колонки.Имя.КартинкиСтрок = КартинкаСтрок;
	ЭлементыФормы.ДеревоИнтерфейса.Колонки.Представление.КартинкиСтрок = КартинкаСтрок;
	ЭлементыФормы.ДеревоИнтерфейса.Колонки.КоличествоСтрок.Видимость = Ложь;
	// ВосстановитьРазвернутыеВетви(стНастройки.РазвернутыеСтроки);
	////ВосстановитьВыбраннуюСтроку(стНастройки.ВыбраннаяСтрока);
	//ПодключитьОбработчикОжидания("ОчисткаСтрокиФильтра",60);
	Автозапуск();
	Активизировать();
	ирОбщий.УстановитьПрикреплениеФормыВУправляемомПриложенииЛкс(Этаформа);

КонецПроцедуры

Процедура ПрименитьПараметрыФормы(ПриОткрытии = Ложь) Экспорт  
	
	Если Не ПриОткрытии И Не Открыта() Тогда
		Открыть();
		Возврат;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ПараметрИмяОбъектаМетаданных) Тогда
		ЭтаФорма.ФильтрИмен = "";
	КонецЕсли; 
	ПриИзмененииФильтраИмен();
	Если ЗначениеЗаполнено(ПараметрИмяОбъектаМетаданных) Тогда
		НайденнаяСтрока = ДеревоИнтерфейса.Строки.Найти(ПараметрИмяОбъектаМетаданных, "ПолноеИмяОбъекта", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока = НайденнаяСтрока;
		КонецЕсли; 
		ЭтаФорма.ПараметрИмяОбъектаМетаданных = "";
	КонецЕсли;
	Открыть();

КонецПроцедуры // ПриОткрытии

Процедура ПриЗакрытии()

	СохранитьНастройки();
	ирОбщий.Форма_ПриЗакрытииЛкс(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии

// Вызывается регулярно для очистки фильра
//
//
Процедура ОчисткаСтрокиФильтра()
	
	ФильтрИмен = "";
	ФильтрИмен_ПриИзменении();
	ЗаполнитьДеревоИнтерфейса();
	//ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока = ДеревоИнтерфейса.Строки[0];
	 
КонецПроцедуры // ОчисткаСтрокиФильтра()

Процедура КоманднаяПанельПроверитьВерсию(Кнопка)
	
	ирОбщий.СообщитьЛкс("Запрос номеров версий...", СтатусСообщения.Информация);
	
	Попытка
		IE = Новый COMОбъект("InternetExplorer.Application");
	Исключение
	    ирОбщий.СообщитьЛкс(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	IE.Visible = 0;
	IE.Silent = -1;
	IE.Navigate("http://www.infostart.ru/public/15324/blog/");
	ПроверитьВерсию(IE);
	
КонецПроцедуры // КоманднаяПанельПроверитьВерсию()

Процедура ПроверитьВерсию(IE=Неопределено)
	
	Если IE = Неопределено Тогда
		IE = Новый COMОбъект("InternetExplorer.Application");
	КонецЕсли;
	Если IE.readyState < 4 Тогда
		ПодключитьОбработчикОжидания("ПроверитьВерсию", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Описание = IE.Document.title;
	IE.Quit();
	IE = Неопределено;
	
	Описание = Сред(Описание, Найти(Описание, "(") + 1);
	Описание = Лев(Описание, Найти(Описание, ")") - 1);
	ирОбщий.СообщитьЛкс("Текущая версия:   " + Метаданные().Комментарий);
	ирОбщий.СообщитьЛкс("Последняя версия: " + Описание);
	
КонецПроцедуры // КоманднаяПанельПроверитьВерсию()

Процедура ПриИзмененииФильтраПодсистем()

	ЗаполнитьДеревоИнтерфейса();
	
КонецПроцедуры // ПриИзмененииФильтраПодсистем

Процедура ФильтрПодсистем_НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ирКэш.Получить().ПолучитьФорму("ВыборПодсистемы", Элемент);
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.МножественныйВыбор = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = ФильтрПодсистем;
	ЭтоФильтрПодсистемВыбранногоОбъекта = (ТипЗнч(Элемент) = Тип("КнопкаКоманднойПанели"));
	ТекущаяСтрокаОбъекта = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	Если ЭтоФильтрПодсистемВыбранногоОбъекта Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрокаОбъекта) И ТипЗнч(ТекущаяСтрокаОбъекта) = Тип("СтрокаДереваЗначений") Тогда
			ФормаВыбора.МДОбъект = ОбъектМДВетви(ТекущаяСтрокаОбъекта);
		КонецЕсли;
	КонецЕсли; 
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ФильтрПодсистем_НачалоВыбораИзСписка

Процедура ФильтрПодсистем_Очистка(Элемент, СтандартнаяОбработка)

	ФильтрПодсистем_ПриИзменении(Элемент);
	
КонецПроцедуры // ФильтрПодсистем_Очистка

Процедура ФильтрПодсистем_ПриИзменении(Элемент)

	ПриИзмененииФильтраПодсистем();
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	
КонецПроцедуры // ФильтрПодсистем_ПриИзменении

Процедура ЗаполнитьДеревоПодсистем() Экспорт
	
	////мСписокВыбораПодсистем = ДобавитьПодсистему();
	//ДобавитьПодсистему();
	
КонецПроцедуры

Процедура ПриИзмененииФильтраИмен(Знач ТекущийФильтрИмен = Неопределено)
	
	Если ТекущийФильтрИмен <> Неопределено Тогда
		Если ТекущийФильтрИмен = мВременныйФильтрИмен Тогда
			Возврат;
		КонецЕсли; 
		мВременныйФильтрИмен = ТекущийФильтрИмен;
	Иначе
		Если Истина
			И ЗначениеЗаполнено(ФильтрИмен) 
			И ФильтрИмен = мВременныйФильтрИмен 
		Тогда
			Возврат;
		КонецЕсли; 
		мВременныйФильтрИмен = ФильтрИмен;
	КонецЕсли;
	Если ТекущийФильтрИмен = Неопределено тогда
		мВременныйФильтрИмен = СокрЛП(мВременныйФильтрИмен);
		спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
		Если ЗначениеЗаполнено(мВременныйФильтрИмен) Тогда
			спФильтр.Вставить(0, мВременныйФильтрИмен);
			// Удалим записи, аналогичные текущему значению фильтра
			ПоискФильтра = НРег(ФильтрИмен);
			н = спФильтр.Количество() - 1;
			Пока н > 0 цикл
				Если НРег(спФильтр[н].Значение) = ПоискФильтра тогда
					спФильтр.Удалить(н);
				КонецЕсли;
				н = н - 1;
			КонецЦикла;
			// Удалим старые записи из истории, если история > ИсторияКоманд записей
			Если спФильтр.Количество() > стНастройки.ИсторияКоманд тогда
				н = спФильтр.Количество() - 1;
				Пока н >= стНастройки.ИсторияКоманд цикл
					спФильтр.Удалить(н);
					н = н - 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	ЗаполнитьДеревоИнтерфейса();
	//Если НЕ ПустаяСтрока(ФильтрИмен) тогда
	//	Для каждого СтрокаДерева из ДеревоИнтерфейса.Строки цикл
	//		//ЭлементыФормы.ДеревоИнтерфейса.Развернуть(СтрокаДерева, Истина);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФильтраИмен

Процедура ФильтрИмен_ПриИзменении(Элемент="")

	ПриИзмененииФильтраИмен();
	
КонецПроцедуры // ФильтрИмен_ПриИзменении

Процедура ФильтрИменОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриИзмененииФильтраИмен();
	
КонецПроцедуры

Процедура ФильтрИмен_АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	//ПоискФильтра = СокрЛП(Нрег(Текст));
	ПриИзмененииФильтраИмен(Текст); // Автоприменение фильтра
	//ПоискФильтра = СокрЛ(Нрег(Текст));
	//ДлинаФильтра = СтрДлина(ПоискФильтра);
	//спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
	//Для каждого зн из спФильтр цикл
	//	Если НРег(Лев(зн.Значение, ДлинаФильтра)) = ПоискФильтра тогда
	//		ТекстАвтоПодбора = Текст + Сред(зн.Значение, ДлинаФильтра + 1);
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
	
КонецПроцедуры // ФильтрИмен_АвтоПодборТекста

// Предлагает выбор формы и открывает ее для текущей строки дерева
//
// Параметры
//  Команда - строка команды. Если указана, то выбор формы не предлагается, а сразу открывается форма по умолчанию
//
Процедура ОткрытиеФормы(Команда = "")
	
	НоваяФорма = Неопределено;
	Если ТипЗнч(Команда) = Тип("КнопкаКоманднойПанели") Тогда
		Кнопка = Команда;
		ТекущаяСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
		ВидОбъекта = ТекущаяСтрока.Вид;
		ИмяОбъекта = ТекущаяСтрока.Имя;
		Попытка
			Если Истина
				И ЗначениеЗаполнено(ВидОбъекта) 
				И ЗначениеЗаполнено(ИмяОбъекта) 
			Тогда
				ОткрытьФормуПоПолномуИмени = Ложь; 
				Если Истина
					И (Ложь
						Или мХранимыеТипыМетаобъектов.Найти(ВидОбъекта, "Множественное") <> Неопределено 
						Или ВидОбъекта = "Обработки"
						Или ВидОбъекта = "Отчеты"
						Или ирОбщий.СтрНачинаетсяСЛкс(ВидОбъекта, "ВнешнийИсточникДанных."))
					И ВидОбъекта <> "Константы"
				Тогда
					ОбъектМД = ОбъектМДВетви(ТекущаяСтрока);
					СтрокаПолногоИмени = ОбъектМД.ПолноеИмя();
					Если Кнопка.Имя = "УниверсальныйОтчетПоРегиструНакопления" Тогда
						НоваяФорма = УниверсальныйОтчетПоРегиструНакопления(ИмяОбъекта);
					ИначеЕсли Кнопка.Имя = "ОткрытьВКонфигураторе" Тогда
						ирОбщий.ПерейтиКОбъектуМетаданныхВКонфигуратореЛкс(СтрокаПолногоИмени);
					ИначеЕсли Ложь
						Или Кнопка.Имя = "МодульМенеджера" 
						Или Кнопка.Имя = "МодульОбъекта"
					Тогда
						ирОбщий.ПоказатьСсылкуНаМодульКонфигурацииЛкс(СтрокаПолногоИмени + "." + Кнопка.Имя);
					ИначеЕсли Кнопка.Имя = "ДинамическийСписок" Тогда
						НоваяФорма = ирОбщий.ПолучитьФормуЛкс("Обработка.ирДинамическийСписок.Форма",,, ирОбщий.КлючУникальностиДинамическогоСпискаЛкс(СтрокаПолногоИмени));
						НоваяФорма.УстановитьОбъектМетаданных(СтрокаПолногоИмени);
					ИначеЕсли Кнопка.Имя = "РедакторОбъектаБД" Тогда
						НоваяФорма = ирОбщий.ПолучитьФормуЛкс("Обработка.ирРедакторОбъектаБД.Форма",,, ирОбщий.КлючУникальностиДинамическогоСпискаЛкс(СтрокаПолногоИмени));
						Если Не НоваяФорма.УстановитьТаблицуБД(СтрокаПолногоИмени) Тогда 
							НоваяФорма = Неопределено;
						КонецЕсли; 
					ИначеЕсли Кнопка.Имя = "АнализПравДоступа" Тогда
						НоваяФорма = ирОбщий.ПолучитьФормуЛкс("Отчет.ирАнализПравДоступа.Форма",,, СтрокаПолногоИмени);
						НоваяФорма.ОбъектМетаданных = СтрокаПолногоИмени;
						НоваяФорма.ПараметрКлючВарианта = "ПоПользователям";
					//ИначеЕсли Кнопка.Имя = "ИсторияДанных" Тогда
					//	ОткрытьФорму("sysForm:DataHistoryVersions", Новый Структура("Metadata", СтрокаПолногоИмени));
					ИначеЕсли Кнопка.Имя = "СправкаМетаданного" Тогда
						НоваяФорма = Неопределено;
						ОткрытьСправку(ирКэш.ОбъектМДПоПолномуИмениЛкс(СтрокаПолногоИмени));
					ИначеЕсли Кнопка.Имя = "ФункциональныеОпции" Тогда
						ФункциональныеОпцииОбъекта(СтрокаПолногоИмени);
						НоваяФорма = Неопределено;
					ИначеЕсли Кнопка.Имя = "СвязанныйДинамическийСписок" Тогда
						НоваяФорма = ирОбщий.ПолучитьФормуЛкс("Обработка.ирДинамическийСписок.Форма",,, "Связанный");
						НоваяФорма.УстановитьОбъектМетаданных(СтрокаПолногоИмени);
						мСвязанныйДинамическийСписок = НоваяФорма;
					ИначеЕсли Кнопка.Имя = "КонсольЗапросов" Тогда
						КонсольЗапросов = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКонсольЗапросов");
						#Если Сервер И Не Сервер Тогда
							КонсольЗапросов = Обработки.ирКонсольЗапросов.Создать();
						#КонецЕсли
						НоваяФорма = КонсольЗапросов.ОткрытьПоОбъектуМетаданных(ОбъектМД.ПолноеИмя());
					ИначеЕсли Кнопка.Имя = "КонсольКомпоновки" Тогда
						КонсольКомпоновокДанных = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКонсольКомпоновокДанных");
						#Если Сервер И Не Сервер Тогда
							КонсольКомпоновокДанных = Обработки.ирКонсольКомпоновокДанных.Создать();
						#КонецЕсли
						НоваяФорма = КонсольКомпоновокДанных.ОткрытьПоОбъектуМетаданных(ОбъектМД.ПолноеИмя());
					ИначеЕсли Кнопка.Имя = "ПодборИОбработкаОбъектов" Тогда
						НоваяФорма = ирОбщий.ПолучитьФормуЛкс("Обработка.ирПодборИОбработкаОбъектов.Форма",,, ОбъектМД.ПолноеИмя());
					ИначеЕсли Кнопка.Имя = "ЖурналРегистрации" Тогда
						АнализЖурналаРегистрации = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирАнализЖурналаРегистрации");
						#Если Сервер И Не Сервер Тогда
							АнализЖурналаРегистрации = Обработки.ирАнализЖурналаРегистрации.Создать();
						#КонецЕсли
						НоваяФорма = АнализЖурналаРегистрации.ОткрытьСПараметром("Метаданные", СтрокаПолногоИмени);
					ИначеЕсли Кнопка.Имя = "ИсследоватьМетаданные" Тогда
						НоваяФорма = ирОбщий.ИсследоватьЛкс(ОбъектМД);
					Иначе
						ОткрытьФормуПоПолномуИмени = Истина;
					КонецЕсли; 
				Иначе
					Если ВидОбъекта = "ОбщиеФормы" Тогда
						// Баг платформы 8.3.5 общая форма так каждый раз новая получается
						Попытка
							НоваяФорма = ПолучитьОбщуюФорму(ИмяОбъекта);
							Если ТипЗнч(НоваяФорма) <> Тип("Форма") Тогда
								НоваяФорма = Неопределено; // https://partners.v8.1c.ru/forum/t/1948332/m/1948332 , https://www.hostedredmine.com/issues/893536
							КонецЕсли; 
						Исключение
							НоваяФорма = Неопределено;
						КонецПопытки; 
						Если НоваяФорма = Неопределено Тогда
							// https://partners.v8.1c.ru/forum/t/1809753/m/1809753
							НоваяФорма = ирОбщий.ПолучитьФормуЛкс("ОбщаяФорма." + ИмяОбъекта);
						КонецЕсли; 
					ИначеЕсли ВидОбъекта = "Интерфейсы" Тогда
						ГлавныйИнтерфейс.ПереключитьИнтерфейс(ИмяОбъекта);
					ИначеЕсли ВидОбъекта = "Внешние обработки" Тогда
						лОбработка = ВнешниеОбработки.Создать(ИмяОбъекта);
						Если лОбработка.Метаданные().ОсновнаяФорма = Неопределено Тогда
							ирОбщий.СообщитьЛкс("У внешней обработки не назначена основная форма");
						Иначе
							НоваяФорма = лОбработка.ПолучитьФорму();
							Если НоваяФорма = Неопределено Тогда
								ирОбщий.СообщитьЛкс("У внешней обработки не назначена основная форма для текущего режима запуска приложения");
							КонецЕсли; 
						КонецЕсли; 
					ИначеЕсли ВидОбъекта = "Внешние отчеты" Тогда
						НоваяФорма = ВнешниеОтчеты.Создать(ИмяОбъекта).ПолучитьФорму();
					ИначеЕсли ВидОбъекта = "Табличные документы" Тогда
						ТабличныйДокумент = Новый ТабличныйДокумент;
						ТабличныйДокумент.Прочитать(ИмяОбъекта);
						ирОбщий.ОткрытьЗначениеЛкс(ТабличныйДокумент, Ложь,, ИмяОбъекта);
					ИначеЕсли ВидОбъекта = "Текстовые документы" Тогда
						ТекстовыйДокумент = Новый ТекстовыйДокумент;
						ТекстовыйДокумент.Прочитать(ИмяОбъекта);
						ирОбщий.ОткрытьТекстЛкс(ТекстовыйДокумент.ПолучитьТекст(), ИмяОбъекта, "Обычный", Истина);
					ИначеЕсли Найти(ВидОбъекта, "Настройки консоли") > 0 Тогда
						НоваяФорма = ОткрытьНастройкуКонсолиЗапросовПостроителейКомпоновок(ИмяОбъекта);
					ИначеЕсли Истина
						И ЕстьУниверсальныйОтчет 
						И Есть_РС_СохраненныеНастройки
						И Лев(ТекущаяСтрока.Вид, 11) = "ОтчетОбъект" 
						И Метаданные.Отчеты.Найти(Сред(ТекущаяСтрока.Вид, Найти(ТекущаяСтрока.Вид, ".")+1)) <> Неопределено
					Тогда
						// Восстановление сохраненной настройки
						НоваяФорма = ОткрытьНастройкуОтчета(ВидОбъекта, ИмяОбъекта);
					ИначеЕсли ЕстьСправочникВнешнихОбработок И ВидОбъекта = "СправочникВнешниеОбработки" Тогда
						Если Кнопка.Имя = "Открыть" Тогда
							НоваяФорма = ОткрытьОбработкуИзСправочникаВнешнихОбработок(ИмяОбъекта);
						Иначе //НайтиВСправочникеВнешнихОбработок
							СсылкаВнешнейОбработки = Справочники.ВнешниеОбработки.НайтиПоКоду(ИмяОбъекта);
							НоваяФорма = СсылкаВнешнейОбработки.ПолучитьФорму();
						КонецЕсли; 
					ИначеЕсли ирОбщий.ЛиСсылкаНаОбъектБДЛкс(ИмяОбъекта) Тогда
						// Полнотекстовый поиск
						СсылкаОбъекта = ИмяОбъекта;
						Если СсылкаОбъекта <> Неопределено Тогда
							// В первую очередь нужны исследователь объектов  и редактор реквизитов - у них нет ограничений на открытие формы и тп
							Если Кнопка.Имя = "ирРедакторОбъектаБД" Тогда
								НоваяФорма = ирРедакторОбъектаБД(СсылкаОбъекта);
							ИначеЕсли Кнопка.Имя = "ирИсследоватьОбъект" Тогда
								НоваяФорма = ирИсследоватьОбъект(СсылкаОбъекта);
							Иначе
								НоваяФорма = СсылкаОбъекта.ПолучитьФорму(ирОбщий.ПоследнийФрагментЛкс(Кнопка.Имя));
							КонецЕсли; 
						КонецЕсли;
					ИначеЕсли ВидОбъекта = "Константы" Тогда
						Если Кнопка.Имя = "ИсследоватьМетаданные" Тогда
							НоваяФорма = ирОбщий.ИсследоватьЛкс(Метаданные.Константы[ИмяОбъекта]);
						Иначе
							НоваяФорма = ОткрытьРедакторКонстант();
						КонецЕсли; 
					Иначе
						ОткрытьФормуПоПолномуИмени = Истина;
					КонецЕсли; 
				КонецЕсли; 
				Если ОткрытьФормуПоПолномуИмени Тогда 
					НоваяФорма = ирОбщий.ПолучитьФормуЛкс(ОбъектМД.ПолноеИмя() + "." + Кнопка.Имя);
				КонецЕсли; 
			КонецЕсли;
		Исключение
			ирОбщий.СообщитьЛкс(ОписаниеОшибки(), СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки;
	ИначеЕсли Команда = "" Тогда
		// Вызов первой из доступных команд
		СгенерироватьКомандыКонтекстногоМеню();
		КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки;
		Если КнопкиКоманднойПанели.Количество() > мКоличествоСтатическихКнопокКоманднойПанели Тогда
			ОткрытиеФормы(КнопкиКоманднойПанели[мКоличествоСтатическихКнопокКоманднойПанели]);
		КонецЕсли;
		Возврат;
	Иначе
		Если Найти(Команда + "!", ".ФормаСписка!") > 0 Тогда
			ИмяМД = ирОбщий.СтрокаБезКонцаЛкс(Команда, СтрДлина(".ФормаСписка"));
			Попытка
				НоваяФорма = ирОбщий.ПолучитьФормуСпискаЛкс(ИмяМД);
			Исключение
				ирОбщий.СообщитьЛкс(ОписаниеОшибки(), СтатусСообщения.Внимание);
				Возврат;
			КонецПопытки;
		Иначе
			Попытка
				НоваяФорма = ирОбщий.ПолучитьФормуЛкс(Команда);
			Исключение
				ирОбщий.СообщитьЛкс(ОписаниеОшибки(), СтатусСообщения.Внимание);
				Возврат;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;
	Если НоваяФорма = Неопределено тогда
		Возврат;
	// закомментировал для Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1032819#1032819
	//ИначеЕсли НоваяФорма.Открыта() тогда
	//	НоваяФорма.Активизировать();
	Иначе
		НоваяФорма.Открыть();
	КонецЕсли;
	ДобавитьСтрокуВСтатическуюВетку(ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ДеревоИнтерфейса_Выбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если (ВыбраннаяСтрока = Неопределено) или (ПустаяСтрока(ВыбраннаяСтрока.Имя)) тогда
		Возврат;
	КонецЕсли;
	ВидОбъекта = ВыбраннаяСтрока.Вид;
	ИмяОбъекта = ВыбраннаяСтрока.Имя;
	Если Ложь
		ИЛИ ВидОбъекта = "Обработки" 
		ИЛИ ВидОбъекта = "Отчеты" 
	Тогда
		КоллекцияМД = ?(Найти(ВидОбъекта,".")>0, ирКэш.ОбъектМДПоПолномуИмениЛкс(ВидОбъекта), Метаданные[ВидОбъекта]);
		ОбъектМД = КоллекцияМД[ИмяОбъекта];
		ОткрытиеФормы(ОбъектМД.ПолноеИмя() + ".Форма");
	ИначеЕсли Истина
		И (Ложь
			Или мХранимыеТипыМетаобъектов.Найти(ВидОбъекта, "Множественное") <> Неопределено 
			Или ирОбщий.СтрНачинаетсяСЛкс(ВидОбъекта, "ВнешнийИсточникДанных."))
		И ВидОбъекта <> "Константы"
	Тогда
		ОбъектМД = ОбъектМДВетви(ВыбраннаяСтрока);
		ОткрытиеФормы(ОбъектМД.ПолноеИмя() + ".ФормаСписка");
	Иначе
		ОткрытиеФормы();
		//ВызватьИсключение "ДеревоИнтерфейса_Выбор: неподдерживаемое значение вида объекта (""" + ВидОбъекта + """)";
	КонецЕсли;
			
КонецПроцедуры // ДеревоИнтерфейса_Выбор

Процедура ДеревоИнтерфейса_ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	ирОбщий.ТабличноеПолеОформитьЯчейкиИмяСинонимЛкс(Элемент, ОформлениеСтроки);
	Если ирОбщий.ЛиСсылкаНаОбъектБДЛкс(ДанныеСтроки.Имя, Ложь) Тогда
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Имя) Тогда
			ЦветФонаЯчеекПустыхЗначений = ирОбщий.ЦветФонаЯчеекПустыхЗначенийЛкс();
			ПредставлениеЗначения = мПлатформа.мПолучитьПредставлениеПустогоЗначения(ДанныеСтроки.Имя);
			ОформлениеСтроки.Ячейки.Имя.УстановитьТекст(ПредставлениеЗначения);
			ОформлениеСтроки.Ячейки.Имя.ЦветФона = ЦветФонаЯчеекПустыхЗначений;
		КонецЕсли;
		ТипСсылки = ТипЗнч(ДанныеСтроки.Имя);
		ОформлениеСтроки.Ячейки.Имя.УстановитьТекст(ОформлениеСтроки.Ячейки.Имя.Текст + " (" + Метаданные.НайтиПоТипу(ТипСсылки).ПолноеИмя() + ")");
		ОформлениеСтроки.Ячейки.Представление.УстановитьТекст(ОформлениеСтроки.Ячейки.Представление.Текст + " (" + ТипСсылки + ")");
	КонецЕсли;
	Если ДанныеСтроки.КоличествоСтрок = Неопределено Тогда
		ОформлениеСтроки.Ячейки.КоличествоСтрок.УстановитьТекст("?");
	КонецЕсли; 
	
КонецПроцедуры // ДеревоИнтерфейса_ПриВыводеСтроки

Процедура ДеревоИнтерфейсаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Отказ = Истина;
КонецПроцедуры

Процедура ДеревоИнтерфейсаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		УдалитьКонтекстныеКнопкиКоманднойПанели();
		Возврат;
	КонецЕсли; 
	СтрокаКорня = Элемент.ТекущаяСтрока.Родитель;
	Если СтрокаКорня = Неопределено ИЛИ СтрокаКорня.Имя = "Избранное" Тогда
		ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки.ДобавитьВИзбранное.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки.ДобавитьВИзбранное.Доступность = Истина;
	КонецЕсли;
	РодительскаяСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	Если РодительскаяСтрока.Родитель <> Неопределено Тогда
		РодительскаяСтрока = РодительскаяСтрока.Родитель;
	КонецЕсли; 
	ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки.ВставитьИзБуфера.Доступность = Ложь
		Или РодительскаяСтрока.Имя = "Избранное"
		Или РодительскаяСтрока.Имя = "Автозапуск";
	СгенерироватьКомандыКонтекстногоМеню();
	Если Истина
		И ЗначениеЗаполнено(Элемент.ТекущаяСтрока)
		И ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ПолноеИмяОбъекта)
	Тогда
		ирОбщий.ОповеститьФормыПодсистемыЛкс("Исследовать", Новый Структура("Выражение, Значение", "ОбъектМД", Метаданные.НайтиПоПолномуИмени(Элемент.ТекущаяСтрока.ПолноеИмяОбъекта)), ЭтаФорма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДеревоИнтерфейсаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ДеревоИнтерфейсаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	СтрокаДляУдаления = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	СтрокаКорня = СтрокаДляУдаления.Родитель;
	Если СтатическиеВетки[СтрокаКорня] <> Неопределено Тогда
		// Сброс статистик
		КлючПоиска = Новый Структура("Вид,Имя", СтрокаДляУдаления.Вид,СтрокаДляУдаления.Имя);
		СтрокаСтатистики = стНастройки.СтатистикаИспользования.НайтиСтроки(КлючПоиска);
		Если СтрокаСтатистики.Количество() > 0 Тогда 
			Если СтрокаКорня.Имя = "Автозапуск" Тогда
				СтрокаСтатистики[0].Автозапуск = Ложь;
			Иначе
				СтрокаСтатистики[0].Избранное = Ложь;
			КонецЕсли; 
			Если Не СтрокаСтатистики[0].Избранное И Не СтрокаСтатистики[0].Автозапуск Тогда
				стНастройки.СтатистикаИспользования.Удалить(СтрокаСтатистики[0]);
			КонецЕсли; 
		КонецЕсли;
		СтрокаКорня.Строки.Удалить(СтрокаДляУдаления);
		РазвернутыеВетви = СохранитьРазвернутыеВетви();
		ЗаполнитьСтатическиеВеткиДереваИнтерфейса(СтрокаКорня);
		ВосстановитьРазвернутыеВетви(РазвернутыеВетви);
		Возврат;
	КонецЕсли;
	
	// Удаление подкаталога
	ПутьКаталога = (СтрокаДляУдаления.Представление);
	Файл = Новый Файл(ПутьКаталога);
	СтрокаКорня = ?(СтрокаДляУдаления.Родитель = Неопределено, ДеревоИнтерфейса, СтрокаДляУдаления.Родитель);;
	Если Файл.Существует() Тогда
		СтрокаКорня.Строки.Удалить(СтрокаДляУдаления);
		стНастройки.Каталоги.Удалить(ПутьКаталога);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоИнтерфейсаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип ("СтрокаДереваЗначений") И  ПараметрыПеретаскивания.Значение.Родитель = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция ПодготовитьЗначениеПеретаскивания(ЗначениеПеретаскивания)
	
	Результат = ЗначениеПеретаскивания;
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		Если ЗначениеПеретаскивания.Количество() > 0 Тогда
			ЗначениеПеретаскивания = ЗначениеПеретаскивания[0];
			ХмлТип = XMLТипЗнч(ЗначениеПеретаскивания);
			Если ХмлТип <> Неопределено Тогда
				Если Найти(ХмлТип.ИмяТипа, "Ref.") > 0 Тогда
					Результат = Новый Структура();
					Результат.Вставить("Вид", ЗначениеПеретаскивания.Метаданные().ПолноеИмя());
					Результат.Вставить("Имя", ЗначениеПеретаскивания);
					Результат.Вставить("Представление", ЗначениеПеретаскивания);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	Возврат Результат;

КонецФункции

Процедура ДеревоИнтерфейсаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	ЗначениеПеретаскивания = ПодготовитьЗначениеПеретаскивания(ПараметрыПеретаскивания.Значение);
	ИмяРодителя = ?(Строка.Родитель = Неопределено, Строка.Имя, Строка.Родитель.Имя);
	ДобавитьСтрокуВСтатическуюВетку(ЗначениеПеретаскивания, ИмяРодителя, Истина);
	
КонецПроцедуры

Процедура ДеревоИнтерфейсаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Если Строка = Неопределено Тогда
		// Выход за область ячеек табличного поля
		Возврат;
	КонецЕсли;
	СтруктураСтатическойВетки = ?(Строка.Родитель = Неопределено, СтатическиеВетки[Строка], СтатическиеВетки[Строка.Родитель]);
	Если СтруктураСтатическойВетки = Неопределено ИЛИ НЕ СтруктураСтатическойВетки.РазрешитьПеретаскивание Тогда
		Возврат;	
	КонецЕсли;
	тзСтатистикаИспользования = стНастройки.СтатистикаИспользования;
	КлючПоиска = Новый Структура(?(Строка.Родитель = Неопределено, Строка.Имя, Строка.Родитель.Имя)+", Вид, Имя", 1);
	ЗначениеПеретаскивания = ПодготовитьЗначениеПеретаскивания(ПараметрыПеретаскивания.Значение);
	ЗаполнитьЗначенияСвойств(КлючПоиска, ЗначениеПеретаскивания);
	НайденныеСтроки = тзСтатистикаИспользования.НайтиСтроки(КлючПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
КонецПроцедуры

Процедура КоманднаяПанельДереваИнтерфейсаДобавитьВИзбранное(Кнопка)
	ДобавитьСтрокуВСтатическуюВетку(ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока, "Избранное");
КонецПроцедуры

Функция ДобавитьСтрокуВСтатическуюВетку(СтрокаДерева, ИмяВетви = "", Знач УстановитьТекущей = Ложь) Экспорт 
	ИменаПолейОтбора = "Вид, Имя";
	СтруктураОтбора = Новый Структура(ИменаПолейОтбора);
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаДерева, ИменаПолейОтбора); 
	тзСтатистикаИспользования = стНастройки.СтатистикаИспользования;
	#Если Сервер И Не Сервер Тогда
		тзСтатистикаИспользования = Новый ТаблицаЗначений;
	#КонецЕсли
	НайденныеСтроки = тзСтатистикаИспользования.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаСтатическойВетки = НайденныеСтроки[0];
	Иначе
		СтрокаСтатическойВетки = тзСтатистикаИспользования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтатическойВетки, СтруктураОтбора);
	КонецЕсли; 
	СтараяТекущаяСтрока = Неопределено;
	ТекСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		Для каждого СтатическаяВетка Из СтатическиеВетки Цикл
			Если СтатическиеВетки[ТекСтрока.Родитель] <> Неопределено тогда
				СтараяТекущаяСтрока = СохранитьВыбраннуюСтроку();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	Если ЗначениеЗаполнено(ИмяВетви) Тогда
		СтрокаСтатическойВетки[ИмяВетви] = 1;
		Если Не ВводДоступен() Тогда
			УстановитьТекущей = Истина;
		КонецЕсли; 
	Иначе
		Если СтрокаСтатическойВетки.КоличествоИспользований = Неопределено Тогда
			СтрокаСтатическойВетки.КоличествоИспользований = 0;
		КонецЕсли; 
		СтрокаСтатическойВетки.КоличествоИспользований = СтрокаСтатическойВетки.КоличествоИспользований + 1;
		СтрокаСтатическойВетки.ПоследнееИспользование = ТекущаяДата();
	КонецЕсли;
	Если Открыта() Тогда
		РазвернутыеВетви = СохранитьРазвернутыеВетви();
		Если УстановитьТекущей Тогда
			ЗаполнитьСтатическиеВеткиДереваИнтерфейса(СтрокаСтатическойВетки, ИмяВетви);
		Иначе
			ЗаполнитьСтатическиеВеткиДереваИнтерфейса();
			Если СтараяТекущаяСтрока <> Неопределено тогда
				ВосстановитьВыбраннуюСтроку(СтараяТекущаяСтрока);
			КонецЕсли;
		КонецЕсли; 
		ВосстановитьРазвернутыеВетви(РазвернутыеВетви);
	КонецЕсли; 
	СохранитьНастройки();
	Возврат СтрокаСтатическойВетки;
КонецФункции

Функция СохранитьВыбраннуюСтроку(ВыбраннаяСтрока = Неопределено)

	Если ВыбраннаяСтрока = Неопределено Тогда
		ВыбраннаяСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	КонецЕсли; 
	Если ВыбраннаяСтрока = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	стСтрока = Новый Структура("Представление,Уровень,Родитель,Вид,Имя");
	стСтрока.Представление = ВыбраннаяСтрока.Представление;
	стСтрока.Уровень = ВыбраннаяСтрока.Уровень();
	Если стСтрока.Уровень = 1 тогда
		стСтрока.Родитель = ВыбраннаяСтрока.Родитель.Представление;
		стСтрока.Вид = ВыбраннаяСтрока.Вид;
		стСтрока.Имя = ВыбраннаяСтрока.Имя;
	КонецЕсли;
	Возврат стСтрока;
	
КонецФункции

Процедура СохранитьНастройки() Экспорт

	стНастройки.ФильтрПодсистем   = ФильтрПодсистем;
	стНастройки.ФильтрИмен		  = ФильтрИмен;
	стНастройки.РазвернутыеСтроки = СохранитьРазвернутыеВетви();
	стНастройки.ВыбраннаяСтрока   = СохранитьВыбраннуюСтроку();

	мИсторияФильтраИмен	= Новый Массив;
	Для каждого зн из ЭлементыФормы.ФильтрИмен.СписокВыбора цикл
		мИсторияФильтраИмен.Добавить(зн.Значение);
	КонецЦикла;
	стНастройки.ИсторияФильтраИмен = мИсторияФильтраИмен;
	ЗаполнитьЗначенияСвойств(стНастройки, ЭтотОбъект);
	ирОбщий.СохранитьЗначениеЛкс("ирИнтерфейснаяПанель.Настройки", стНастройки);
	
КонецПроцедуры

Процедура ПрочитатьНастройки() Экспорт 
	
	стНастройки = ирОбщий.ВосстановитьЗначениеЛкс("ирИнтерфейснаяПанель.Настройки");
	Если ТипЗнч(стНастройки) <> Тип("Структура") тогда
		стНастройки = Новый Структура;
	КонецЕсли;
	Если НЕ стНастройки.Свойство("ФильтрПодсистем") тогда
		стНастройки.Вставить("ФильтрПодсистем");
	КонецЕсли;
	Если НЕ стНастройки.Свойство("ФильтрИмен") тогда
		стНастройки.Вставить("ФильтрИмен");
	КонецЕсли;
	Если НЕ стНастройки.Свойство("ИсторияФильтраИмен") тогда
		стНастройки.Вставить("ИсторияФильтраИмен");
		стНастройки.ИсторияФильтраИмен = Новый Массив;
	КонецЕсли;
	Если НЕ стНастройки.Свойство("РазвернутыеСтроки") тогда
		стНастройки.Вставить("РазвернутыеСтроки");
		стНастройки.РазвернутыеСтроки = Новый Массив;
	КонецЕсли;
	Если НЕ стНастройки.Свойство("ВыбраннаяСтрока") тогда
		стНастройки.Вставить("ВыбраннаяСтрока");
	КонецЕсли;
	Если НЕ стНастройки.Свойство("СтатистикаИспользования") тогда
		стНастройки.Вставить("СтатистикаИспользования");
		тзСтатистикаИспользования = Новый ТаблицаЗначений;
		тзСтатистикаИспользования.Колонки.Добавить("Вид");
		тзСтатистикаИспользования.Колонки.Добавить("Имя");
		тзСтатистикаИспользования.Колонки.Добавить("КоличествоИспользований");
		тзСтатистикаИспользования.Колонки.Добавить("ПоследнееИспользование");
		стНастройки.СтатистикаИспользования = тзСтатистикаИспользования;
	КонецЕсли;	
	// Для произвольных статических веток
	Для каждого КлючЗначение Из МассивСтатическихВеток Цикл
		ИмяКолонки = КлючЗначение.Имя;
		Если стНастройки.СтатистикаИспользования.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			// Эта колонка была добавлена позже, ее может не быть в сохраненных настройках
			Попытка
				стНастройки.СтатистикаИспользования.Колонки.Добавить(ИмяКолонки);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Если НЕ стНастройки.Свойство("Каталоги") тогда
		стНастройки.Вставить("Каталоги", Новый Соответствие);
	КонецЕсли;
	Если НЕ стНастройки.Свойство("ИсторияКоманд") Тогда
		стНастройки.Вставить("ИсторияКоманд", ИсторияКоманд);
	КонецЕсли;
	Если НЕ стНастройки.Свойство("ИспользоватьРегулярныеВыражения") Тогда
		стНастройки.Вставить("ИспользоватьРегулярныеВыражения", ИспользоватьРегулярныеВыражения);	
	КонецЕсли;
	Если стНастройки.ИспользоватьРегулярныеВыражения Тогда
		RegExp = Новый COMОбъект("VBScript.RegExp");
		RegExp.MultiLine = Ложь;
		RegExp.Global = Истина; 
		RegExp.IgnoreCase = Истина;
	КонецЕсли;
	Если НЕ стНастройки.Свойство("ПриАвтозапускеОткрыватьФормуСписка") Тогда
		стНастройки.Вставить("ПриАвтозапускеОткрыватьФормуСписка", ПриАвтозапускеОткрыватьФормуСписка);
	КонецЕсли;
	Если НЕ стНастройки.Свойство("флИмяСиноним") Тогда
		стНастройки.Вставить("флИмяСиноним", флИмяСиноним);
	КонецЕсли;
	Если НЕ стНастройки.Свойство("флИскатьВПодкаталогах") Тогда
		стНастройки.Вставить("флИскатьВПодкаталогах", Истина);
	КонецЕсли;
	Если НЕ стНастройки.Свойство("флВложенныеПодсистемы") Тогда
		стНастройки.Вставить("флВложенныеПодсистемы", Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтатическиеВеткиДереваИнтерфейса(Знач УстановитьТекущуюСтроку = Неопределено, Знач ИмяРодителяТекущейСтроки = Неопределено) Экспорт
	
	Если УстановитьТекущуюСтроку <> Неопределено Тогда
		ИмяДляУстановкиТекущейСтроки = УстановитьТекущуюСтроку.Имя;
	КонецЕсли; 
	Если СтатическиеВетки = Неопределено ИЛИ ДеревоИнтерфейса.Строки.Количество() = 0 Тогда
		СтатическиеВетки = Новый Соответствие();
		Для каждого ЭлементМассива Из МассивСтатическихВеток Цикл
			Если ЭлементМассива.Использовать = Истина Тогда
				СтрокаКорняСтатическойВетки = ДеревоИнтерфейса.Строки.Добавить();
				СтрокаКорняСтатическойВетки.Имя = ЭлементМассива.Имя;
				СтрокаКорняСтатическойВетки.Представление = ЭлементМассива.Представление;
				СтатическиеВетки.Вставить(СтрокаКорняСтатическойВетки, ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	элДеревоИнтерфейса = ЭлементыФормы.ДеревоИнтерфейса;

	// Для избежания дублей статистику надо свернуть
	тзСтатистикаИспользования = стНастройки.СтатистикаИспользования;
	СтрокаКолонокДляСвертки = "";
	Для каждого СтатическаяВетка Из СтатическиеВетки Цикл
		Если СтатическаяВетка.Значение.РазрешитьПеретаскивание = Истина Тогда
			СтрокаКолонокДляСвертки = СтрокаКолонокДляСвертки + "," + СтатическаяВетка.Значение.Имя;
		КонецЕсли;
	КонецЦикла;
	тзСтатистикаИспользования.Свернуть("Вид,Имя,ПоследнееИспользование", "КоличествоИспользований" + СтрокаКолонокДляСвертки);
	Для Каждого СтрокаСтатистики Из тзСтатистикаИспользования Цикл
		Если СтрокаСтатистики.Избранное > 0 Тогда
			СтрокаСтатистики.Избранное = 1;
		КонецЕсли; 
	КонецЦикла;
	
	стПоиск = Новый Структура("Вид,Имя");
	Для каждого СтатическаяВетка Из СтатическиеВетки Цикл
		Если СтатическаяВетка.Значение.Использовать = Ложь Тогда
			Продолжить;
		КонецЕсли;
		СтрокаСортировки = СтатическаяВетка.Значение.СтрокаСортировки;
		Если ЗначениеЗаполнено(СтатическаяВетка.Значение.СортировкаПриОтображении) Тогда
			СтрокаСортировки = СтрокаСортировки + "," + СтатическаяВетка.Значение.СортировкаПриОтображении;
		КонецЕсли; 
		тзСтатистикаИспользования.Сортировать(СтрокаСортировки);
		СтрокиКорня = СтатическаяВетка.Ключ.Строки; 
		СтрокиКорня.Очистить();
		нВставленоПозиций = 0;
		Для каждого стрСтатистика из тзСтатистикаИспользования цикл
			ЗаполнитьЗначенияСвойств(стПоиск, стрСтатистика);
			Если СтатическаяВетка.Ключ.Строки.НайтиСтроки(стПоиск, Истина).Количество() = 0 Тогда
				Если нВставленоПозиций > СтатическаяВетка.Значение.КоличествоОтображаемыхЭлементов Тогда
					Прервать;
				КонецЕсли;
				ЗначениеСортировки = стрСтатистика[Лев(СтатическаяВетка.Значение.СтрокаСортировки,Найти(СтатическаяВетка.Значение.СтрокаСортировки, " ")-1)];
				Если Ложь
					Или ЗначениеСортировки = Неопределено 
					ИЛИ ЗначениеСортировки = 0 
					ИЛИ ЗначениеСортировки = '00010101'  // Попытка универсального подхода к отсечке пустых значений
				Тогда
					Прервать;
				КонецЕсли;
				
				Если ирОбщий.ЛиСсылкаНаОбъектБДЛкс(стПоиск.Имя, Ложь) Тогда
					СсылкаПоИД = стПоиск.Имя;
					Представление = Строка(СсылкаПоИД);
					Если Истина
						И СтатическаяВетка.Значение.Фильтровать 
						И НЕ ?(стНастройки.ИспользоватьРегулярныеВыражения, 
							ПроверитьУсловие(Представление, мВременныйФильтрИмен),
							Найти(НРег(Представление), НРег(мВременныйФильтрИмен)) > 0)
					Тогда
						Продолжить;
					КонецЕсли;
					стрОбъектИнтерфейса 				= СтрокиКорня.Добавить();
					стрОбъектИнтерфейса.Вид 		   	= стПоиск.Вид;
					стрОбъектИнтерфейса.Имя			   	= стПоиск.Имя;
					//стрОбъектИнтерфейса.Представление = Представление;
					стрОбъектИнтерфейса.Представление  	= стПоиск.Имя;
					стрОбъектИнтерфейса.ИндексКартинки 	= 62;
				Иначе
					// Обработка результатов полнотекстового поиска в случае, если они не видны
					мСтроки = дзВсеОбъекты.Строки.НайтиСтроки(стПоиск, Истина);
					Если мСтроки.Количество() = 0 тогда
						// Попытка поиска среди объектов - не метаданных (работает только с теми элементами, которые видны)
						мСтроки = ДеревоИнтерфейса.Строки.НайтиСтроки(стПоиск, Истина);
						Если мСтроки.Количество() = 0 тогда
							Продолжить;
						Иначе
							стрОбъект = мСтроки[0];
							ИндексКартинки = стрОбъект.ИндексКартинки;
						КонецЕсли;
					Иначе
						стрОбъект = мСтроки[0];
						ИндексКартинки = стрОбъект.ИндексКартинки;
					КонецЕсли;
					Если СтатическаяВетка.Значение.Фильтровать И НЕ ОбъектПроходитФильтры(стрОбъект) тогда
						Продолжить;
					КонецЕсли;
					стрОбъектИнтерфейса = СтрокиКорня.Добавить();
					стрОбъектИнтерфейса.Вид 		   = стрОбъект.Вид;
					стрОбъектИнтерфейса.Имя			   = стрОбъект.Имя;
					стрОбъектИнтерфейса.Представление  = стрОбъект.Представление;
					стрОбъектИнтерфейса.ИндексКартинки = ИндексКартинки;
				КонецЕсли;
				нВставленоПозиций = нВставленоПозиций + 1;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ПустаяСтрока(СтатическаяВетка.Значение.СортировкаПриОтображении) Тогда
			СтрокиКорня.Сортировать(СтатическаяВетка.Значение.СортировкаПриОтображении);
		КонецЕсли;
		РазвернутьВетку = Ложь;
		Если СтатическаяВетка.Значение.Свойство("Развернуть", РазвернутьВетку) И РазвернутьВетку = Истина Тогда
			Если НЕ элДеревоИнтерфейса.Развернут(СтатическаяВетка.Ключ) тогда
				элДеревоИнтерфейса.Развернуть(СтатическаяВетка.Ключ);
			КонецЕсли;
		Иначе
			Если элДеревоИнтерфейса.Развернут(СтатическаяВетка.Ключ) тогда
				элДеревоИнтерфейса.Свернуть(СтатическаяВетка.Ключ);
			КонецЕсли;
		КонецЕсли;
		СтатическаяВетка.Ключ.Представление  = СтатическаяВетка.Значение.Представление;
		Если СтатическаяВетка.Значение.Свойство("ИндексКартинки") Тогда
			СтатическаяВетка.Ключ.ИндексКартинки = СтатическаяВетка.Значение.ИндексКартинки;
		Иначе 
			СтатическаяВетка.Ключ.ИндексКартинки = -1;
		КонецЕсли; 
		СтатическаяВетка.Ключ.Имя  = СтатическаяВетка.Значение.Имя;
	КонецЦикла;
	Если ИмяДляУстановкиТекущейСтроки <> Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяРодителяТекущейСтроки) Тогда
			НоваяТекущаяСтрока = ДеревоИнтерфейса.Строки.Найти(ИмяРодителяТекущейСтроки, "Имя").Строки.Найти(ИмяДляУстановкиТекущейСтроки, "Имя");
		Иначе
			НоваяТекущаяСтрока = ДеревоИнтерфейса.Строки.Найти(ИмяДляУстановкиТекущейСтроки, "Имя");
		КонецЕсли; 
		Если НоваяТекущаяСтрока <> Неопределено Тогда
			элДеревоИнтерфейса.ТекущаяСтрока = НоваяТекущаяСтрока;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьДеревоИнтерфейса() Экспорт

	стСтрока = СохранитьВыбраннуюСтроку();
	мРазвернутыеВетви = СохранитьРазвернутыеВетви();
	ДеревоИнтерфейса.Строки.Очистить();
	ЗаполнитьСтатическиеВеткиДереваИнтерфейса();
	ПоискПоМетаданным();
	элДерево = ЭлементыФормы.ДеревоИнтерфейса;
	ТекущаяСтрокаУстановлена = ВосстановитьВыбраннуюСтроку(стСтрока);
	//Если НЕ (СтатическиеВетки[элДерево.ТекущаяСтрока] = Неопределено) И 
	//	 элДерево.ТекущаяСтрока.Строки.Количество() > 0 
	//Тогда
	//	элДерево.ТекущаяСтрока = элДерево.ТекущаяСтрока.Строки[0];
	//КонецЕсли;
	//ВосстановитьРазвернутыеВетви(мРазвернутыеВетви);
	ИндексНачальнойСтроки = 4;
	ЧислоДинамическихСтрок = 0;
	ТаблицаТиповМетаОбъектов = мПлатформа.ТаблицаТиповМетаОбъектов;
	Счетчик = 1;
	Для Индекс = ИндексНачальнойСтроки По ДеревоИнтерфейса.Строки.Количество() - 1 Цикл
		СтрокаДерева = ДеревоИнтерфейса.Строки[Индекс];
		ВсеСтроки = ирОбщий.ВсеСтрокиДереваЗначенийЛкс(СтрокаДерева);
		Для Каждого ДочерняяСтрокаДерева Из ВсеСтроки Цикл
			Если ирОбщий.ЛиКорневойТипВнешнегоИсточникаДанныхЛкс(ирОбщий.ПервыйФрагментЛкс(ДочерняяСтрокаДерева.Вид)) Тогда
				ДочерняяСтрокаДерева.ПолноеИмяОбъекта = "" + ДочерняяСтрокаДерева.Вид + ".Таблица." + ДочерняяСтрокаДерева.Имя;
			Иначе
				СтрокаТипаМетаОбъектов = ТаблицаТиповМетаОбъектов.Найти(ДочерняяСтрокаДерева.Вид, "Множественное");
				Если Ложь
					Или СтрокаТипаМетаОбъектов = Неопределено
					//Или СтрокаТипаМетаОбъектов.Категория <> 0
				Тогда
					Продолжить;
				КонецЕсли; 
				ДочерняяСтрокаДерева.ПолноеИмяОбъекта = "" + СтрокаТипаМетаОбъектов.Единственное + "." + ДочерняяСтрокаДерева.Имя;
			КонецЕсли; 
			ДочерняяСтрокаДерева.Порядок = Счетчик;
			Счетчик = Счетчик + 1;
			//ОписаниеТаблицы = ирОбщий.ПолучитьОписаниеТаблицыБДИис(ДочерняяСтрокаДерева.ПолноеИмяОбъекта);
			//Если Истина
			//	И ОписаниеТаблицы <> Неопределено 
			//	И ОписаниеТаблицы.КоличествоСтрок <> Неопределено
			//Тогда
			//	ирОбщий.ДобавитьКоличествоСтрокРодителюЛкс(ДочерняяСтрокаДерева, ОписаниеТаблицы.КоличествоСтрок);
			//КонецЕсли; 
		КонецЦикла;
		СтрокаДерева.Порядок = Счетчик;
		Счетчик = Счетчик + 1;
		ЧислоДинамическихСтрок = ЧислоДинамическихСтрок + ВсеСтроки.Количество();
	КонецЦикла; 
	//ТекущаяСтрокаУстановлена = ТекущаяСтрокаУстановлена И элДерево.ТекущаяСтрока <> элДерево.Значение.Строки[ИндексНачальнойСтроки];
	Если ЧислоДинамическихСтрок > 0 Тогда
		Если ЧислоДинамическихСтрок <= 30 Тогда
			ирОбщий.ТабличноеПолеДеревоЗначений_РазвернутьВсеСтрокиЛкс(элДерево, ИндексНачальнойСтроки);
			Если Не ТекущаяСтрокаУстановлена Тогда
				элДерево.ТекущаяСтрока = элДерево.Значение.Строки[ИндексНачальнойСтроки].Строки[0];
			КонецЕсли; 
		Иначе
			Если Не ТекущаяСтрокаУстановлена Тогда
				элДерево.ТекущаяСтрока = элДерево.Значение.Строки[ИндексНачальнойСтроки];
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если Истина
			И Не ТекущаяСтрокаУстановлена
			И НЕ (СтатическиеВетки[элДерево.ТекущаяСтрока] = Неопределено) 
			И элДерево.ТекущаяСтрока.Строки.Количество() > 0 
		Тогда
			элДерево.ТекущаяСтрока = элДерево.ТекущаяСтрока.Строки[0];
		КонецЕсли;
	КонецЕсли; 
	//ирОбщий.ЗаполнитьКоличествоСтрокТаблицВДеревеМетаданныхЛкс(ДеревоИнтерфейса);

КонецПроцедуры

Функция ВосстановитьВыбраннуюСтроку(стСтрока)
	
	ТекСтрока = Неопределено;
	
	Если стСтрока <> Неопределено тогда
		Если стСтрока.Уровень = 0 тогда
			ТекСтрока = ДеревоИнтерфейса.Строки.Найти(стСтрока.Представление, "Представление", Ложь);
		Иначе 
			стрРодитель = ДеревоИнтерфейса.Строки.Найти(стСтрока.Родитель, "Представление", Ложь);
			Если стрРодитель <> Неопределено тогда
				стПоиск = Новый Структура("Вид,Имя", стСтрока.Вид, стСтрока.Имя);
				мСтроки = стрРодитель.Строки.НайтиСтроки(стПоиск, Ложь);
				Если мСтроки.Количество() > 0 тогда
					ТекСтрока = мСтроки[0];
				Иначе
					Если стрРодитель.Строки.Количество() > 0 тогда
						ТекСтрока = стрРодитель.Строки[0];
					Иначе
						ТекСтрока = стрРодитель;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ТекСтрока <> Неопределено Тогда
		ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока = ТекСтрока;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

Функция СохранитьРазвернутыеВетви()

	мВетви = Новый Массив;
	элДеревоИнтерфейса = ЭлементыФормы.ДеревоИнтерфейса;
	Для каждого стрВетвь из ДеревоИнтерфейса.Строки цикл
		//// Пропустим статические
		//Если НЕ СтатическиеВетки[стрВетвь] = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;
		Если элДеревоИнтерфейса.Развернут(стрВетвь) тогда
			мВетви.Добавить(стрВетвь.Представление);
		КонецЕсли;
	КонецЦикла; 
	Возврат мВетви;
	
КонецФункции

Процедура ВосстановитьРазвернутыеВетви(Знач мРазвернутыеВетви) Экспорт 

	элДеревоИнтерфейса     = ЭлементыФормы.ДеревоИнтерфейса;
	СтрокиДереваИнтерфейса = ДеревоИнтерфейса.Строки;
	
	Для каждого ПредставлениеВетви из мРазвернутыеВетви цикл
	
		стрВетвь = СтрокиДереваИнтерфейса.Найти(ПредставлениеВетви, "Представление", Ложь);
		Если стрВетвь <> Неопределено тогда
			элДеревоИнтерфейса.Развернуть(стрВетвь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьРазвернутыеВетви

Процедура ДобавитьОбъект(СтрокиВетви, Знач ОбъектМД, Знач ВидОбъекта, Знач ИндексКартинки, ИспользоватьПолноеИмя = Ложь)

	#Если Сервер И Не Сервер Тогда
		ОбъектМД = Метаданные.Справочники.Валюты;
	#КонецЕсли
	стрСтрока = СтрокиВетви.Добавить();
	Если ИспользоватьПолноеИмя Тогда
		стрСтрока.Вид = ОбъектМД.Родитель().ПолноеИмя();
	Иначе
		стрСтрока.Вид = ВеткиМетаданных.НайтиПоЗначению(ВидОбъекта).Представление;
	КонецЕсли; 
	стрСтрока.Имя = ОбъектМД.Имя;
	стрСтрока.Представление = ОбъектМД.Представление();
	стрСтрока.ИндексКартинки = ИндексКартинки;
	спПодсистемы = Новый СписокЗначений;
	//Для каждого Подсистема из МетаД.Подсистемы цикл
	//	ИмяПодсистемы = Подсистема.Имя;
	//	спПодсистемы.Добавить(ИмяПодсистемы);
	//	
	//	стрПодсистема = дзВсеПодсистемы.Строки.Найти(ИмяПодсистемы, "Имя", Истина);
	//	Пока стрПодсистема.Родитель <> Неопределено цикл
	//		стрПодсистема = стрПодсистема.Родитель;
	//		
	//		Если спПодсистемы.НайтиПоЗначению(стрПодсистема.Имя) = Неопределено тогда
	//			спПодсистемы.Добавить(стрПодсистема.Имя);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	стрСтрока.Подсистемы = спПодсистемы;

КонецПроцедуры

Процедура ДобавитьВетвьМетаданных(КоллекцияМД, Знач ИмяВетви, Знач КартинкаВетви=0, Знач КартинкаОбъекта=0, Знач ИспользоватьПолноеИмя = Ложь)

	стрВетвь = дзВсеОбъекты.Строки.Добавить();
	ПредставлениеВетви = ВеткиМетаданных.НайтиПоЗначению(ИмяВетви);
	Если ПредставлениеВетви <> Неопределено Тогда
		стрВетвь.Представление = ПредставлениеВетви;
	Иначе
		стрВетвь.Представление = ИмяВетви;
	КонецЕсли; 
	стрВетвь.Имя = ИмяВетви;
	стрВетвь.ИндексКартинки = КартинкаВетви;
	СтрокиВетви = стрВетвь.Строки;
	Для каждого ОбъектМД из КоллекцияМД цикл
		//Попытка
		//	ЕстьПраво = ПравоДоступа("Просмотр", ОбъектМД);
		//Исключение
		//	Попытка
		//		ЕстьПраво = ПравоДоступа("Использование", ОбъектМД);
		//	Исключение
		//		ЕстьПраво = Ложь;
		//	КонецПопытки;
		//КонецПопытки;
		//Если ЕстьПраво Тогда
			ДобавитьОбъект(СтрокиВетви, ОбъектМД, ИмяВетви, КартинкаОбъекта, ИспользоватьПолноеИмя);
		//КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДеревоВсехОбъектов() Экспорт
	
	дзВсеОбъекты = Новый ДеревоЗначений;
	дзВсеОбъекты.Колонки.Добавить("Имя");
	дзВсеОбъекты.Колонки.Добавить("Вид");
	дзВсеОбъекты.Колонки.Добавить("Представление");
	дзВсеОбъекты.Колонки.Добавить("ИндексКартинки"); 
	дзВсеОбъекты.Колонки.Добавить("Подсистемы"); 
	ДобавитьВетвьМетаданных(Метаданные.ОбщиеФормы, "Общие формы", 6, 7);
	ДобавитьВетвьМетаданных(Метаданные.Интерфейсы, "Интерфейсы", 54, 55);
	ДобавитьВетвьМетаданных(Метаданные.Константы, "Константы", 20, 0);
	ДобавитьВетвьМетаданных(Метаданные.Справочники, "Справочники", 2, 3);
	стрКорень = дзВсеОбъекты.Строки.Добавить();
	стрКорень.Представление = "Документы";
	стрКорень.Имя = стрКорень.Представление;
	стрКорень.ИндексКартинки = 12;
	СтрокиКорня = стрКорень.Строки;
	Для каждого МетаД из Метаданные.ЖурналыДокументов цикл
		Если ПравоДоступа("Просмотр", МетаД) тогда
			ДобавитьОбъект(СтрокиКорня, МетаД, "Журналы документов", 15);
		КонецЕсли;
	КонецЦикла;
	Для каждого МетаД из Метаданные.Документы цикл
		Если ПравоДоступа("Просмотр", МетаД) тогда
			ДобавитьОбъект(СтрокиКорня, МетаД, "Документы", 13);
		КонецЕсли;
	КонецЦикла;	
	ДобавитьВетвьМетаданных(Метаданные.ПланыВидовХарактеристик, "Планы видов характеристик", 37, 38);
	ДобавитьВетвьМетаданных(Метаданные.ПланыСчетов, "Планы счетов", 39, 40);
	ДобавитьВетвьМетаданных(Метаданные.ПланыВидовРасчета, "Планы видов расчета", 47, 48);
	ДобавитьВетвьМетаданных(Метаданные.Отчеты, "Отчеты", 23, 24);
	ДобавитьВетвьМетаданных(Метаданные.Обработки, "Обработки", 18, 19);
	ДобавитьВетвьМетаданных(Метаданные.РегистрыСведений, "Регистры сведений", 33, 34);
	ДобавитьВетвьМетаданных(Метаданные.РегистрыНакопления, "Регистры накопления", 31, 32);
	ДобавитьВетвьМетаданных(Метаданные.РегистрыБухгалтерии, "Регистры бухгалтерии", 41, 42);
	ДобавитьВетвьМетаданных(Метаданные.Перечисления, "Перечисления", 9, 10);
	ДобавитьВетвьМетаданных(Метаданные.РегистрыРасчета, "Регистры расчета", 49, 50);
	ДобавитьВетвьМетаданных(Метаданные.БизнесПроцессы, "Бизнес-процессы", 43, 44);
	ДобавитьВетвьМетаданных(Метаданные.Задачи, "Задачи", 45, 46);
	ДобавитьВетвьМетаданных(Метаданные.ПланыОбмена, "Планы обмена", 51, 52);
	Если ирКэш.НомерВерсииПлатформыЛкс() >= 802014 Тогда
		Для Каждого МетаВнешнийИсточникДанных Из Метаданные.ВнешниеИсточникиДанных Цикл
			Если флИмяСиноним Тогда
				ПредставлениеИсточникаДанных = МетаВнешнийИсточникДанных.Имя;
			Иначе
				ПредставлениеИсточникаДанных = МетаВнешнийИсточникДанных.Представление();
			КонецЕсли; 
			//СуффикВидаТаблиц = ". Таблицы";
			СуффикВидаТаблиц = "";
			ИмяВетви = "ВнешнийИсточникДанных." + ПредставлениеИсточникаДанных + СуффикВидаТаблиц;
			ПредставлениеВетви = "Внешние. " + ПредставлениеИсточникаДанных + СуффикВидаТаблиц;
			ВеткиМетаданных.Добавить(ИмяВетви, ПредставлениеВетви);
			ДобавитьВетвьМетаданных(МетаВнешнийИсточникДанных.Таблицы, ИмяВетви, 64, 65, Истина);
		КонецЦикла;
	КонецЕсли; 
	ВыводСодержимогоКаталогов(дзВсеОбъекты);
	ВыводСохраненныхВнешнихОбработок(дзВсеОбъекты);
	ВыводСохраненныхНастроекОтчетов(дзВсеОбъекты);
	СортироватьВторойУровеньДерева(дзВсеОбъекты);

КонецПроцедуры

Процедура СортироватьВторойУровеньДерева(Дерево) Экспорт
	
	ИмяОсновногоПредставления = ПолучитьИмяОсновногоПредставления();
	Для каждого стрВетви из Дерево.Строки цикл
		стрВетви.Строки.Сортировать("Вид УБЫВ, " + ИмяОсновногоПредставления, Ложь);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоискПоМетаданным()
	Перем НайденныйОбъект;
	СтрокаНулей = "00000000000000";
	ОбъектыВыбранныхПодсистем = ирОбщий.ОбъектыПодсистемЛкс(ФильтрПодсистем);
	Для каждого стрКорень из дзВсеОбъекты.Строки цикл
	
		СтрокиКорня = Неопределено;
		Для каждого стрОбъект из стрКорень.Строки цикл
			Если НЕ ОбъектПроходитФильтры(стрОбъект,, ВеткиМетаданных.НайтиПоЗначению(стрКорень.Имя) <> Неопределено, ОбъектыВыбранныхПодсистем) тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокиКорня = Неопределено тогда
				стрКореньИнтерфейса = ДеревоИнтерфейса.Строки.Добавить();
				стрКореньИнтерфейса.Представление  = стрКорень.Представление;
				стрКореньИнтерфейса.Имя = стрКореньИнтерфейса.Представление;
				стрКореньИнтерфейса.ИндексКартинки = стрКорень.ИндексКартинки;
				
				СтрокиКорня = стрКореньИнтерфейса.Строки;
			КонецЕсли;
		
			стрОбъектИнтерфейса = СтрокиКорня.Добавить();
			стрОбъектИнтерфейса.Вид 		   = стрОбъект.Вид;
			стрОбъектИнтерфейса.Имя			   = стрОбъект.Имя;
			стрОбъектИнтерфейса.Представление  = стрОбъект.Представление;
			стрОбъектИнтерфейса.ИндексКартинки = стрОбъект.ИндексКартинки;
			
			Если флПробоватьУмныйПоиск = Истина Тогда
				Попытка
					ОбъектМД = Метаданные[стрОбъект.Вид][стрОбъект.Имя];
				Исключение
					// Метаданные кончились
				    Возврат
				КонецПопытки;

				Если Ложь 
					Или стрОбъект.Вид = "Справочники"
					ИЛИ стрОбъект.Вид = "ПланыВидовХарактеристик" 
					ИЛИ стрОбъект.Вид = "ПланыСчетов" 
					ИЛИ стрОбъект.Вид = "ПланыВидовРасчета"  
					ИЛИ стрОбъект.Вид = "Документы" 
					ИЛИ стрОбъект.Вид = "БизнесПроцессы" 
					ИЛИ стрОбъект.Вид = "Задачи" 
				Тогда
					Если Ложь
						Или стрОбъект.Вид = "Справочники" 
						ИЛИ стрОбъект.Вид = "ПланыВидовХарактеристик" 
						ИЛИ стрОбъект.Вид = "ПланыСчетов" 
						ИЛИ стрОбъект.Вид = "ПланыВидовРасчета" 
					Тогда
						ДлинаКода = ОбъектМД.ДлинаКода;
						Если  Истина
							И ДлинаКода > 0 
							И (Ложь// Есть где искать по коду
								Или стрОбъект.Вид = "ПланыВидовХарактеристик"   // Либо это план видов характеристик (только строковые коды)
								Или стрОбъект.Вид = "ПланыСчетов"  				// Либо это план счетов (только строковые коды)
								Или (ЧислоСуффиксаУмногоПоиска = 0 И Строка(ОбъектМД.ТипКода)="Строка") 	// Либо тип кода строковый
								Или (ЧислоСуффиксаУмногоПоиска>0 И Строка(ОбъектМД.ТипКода)="Число")		// Искомый суффикс похож на число
							) 
						Тогда
							Выполнить("НайденныйОбъект = " + стрОбъект.Вид + "." + стрОбъект.Имя + ".НайтиПоКоду(СтрокаСуффиксаУмногоПоиска)" );
							Если НЕ НайденныйОбъект.Пустая() Тогда
								СтрокаОбъекта = ДеревоИнтерфейса.Строки.Вставить(0);
								//СтрокаОбъекта.Имя = НайденныйОбъект.УникальныйИдентификатор();
								СтрокаОбъекта.Имя = НайденныйОбъект;
								СтрокаОбъекта.Вид = НайденныйОбъект.Метаданные().ПолноеИмя();
								СтрокаОбъекта.Представление	= НайденныйОбъект;
								СтрокаОбъекта.ИндексКартинки = 62;
								Продолжить
							КонецЕсли
						КонецЕсли;
						
						Если ОбъектМД.ДлинаНаименования > 0 Тогда
							Выполнить("НайденныйОбъект = " +  стрОбъект.Вид + "." + стрОбъект.Имя + ".НайтиПоНаименованию(СтрокаСуффиксаУмногоПоиска, Ложь" +  ?(стрОбъект.Вид="ПланыСчетов", ", " + стрОбъект.Вид + "." + стрОбъект.Имя + ".ПустаяСсылка())", ")") );
							Если НЕ НайденныйОбъект.Пустая() Тогда
								
								СтрокаОбъекта = ДеревоИнтерфейса.Строки.Вставить(0);
								//СтрокаОбъекта.Имя = НайденныйОбъект.УникальныйИдентификатор();
								СтрокаОбъекта.Имя = НайденныйОбъект;
								СтрокаОбъекта.Вид = НайденныйОбъект.Метаданные().ПолноеИмя();
								СтрокаОбъекта.Представление	= НайденныйОбъект;
								СтрокаОбъекта.ИндексКартинки = 62;
								Продолжить
								
							КонецЕсли;				
						КонецЕсли;	
						
					ИначеЕсли Ложь
						Или стрОбъект.Вид = "Документы" 
						ИЛИ стрОбъект.Вид = "БизнесПроцессы" 
						ИЛИ стрОбъект.Вид = "Задачи" 
					Тогда
						ДлинаНомера = ОбъектМД.ДлинаНомера ;
						Если ДлинаНомера > 0 И ((ЧислоСуффиксаУмногоПоиска>0 И Строка(ОбъектМД.ТипНомера) = "Число") ИЛИ  (ЧислоСуффиксаУмногоПоиска=0 И Строка(ОбъектМД.ТипНомера)="Строка")) Тогда	
							Выполнить("НайденныйОбъект = " +  стрОбъект.Вид + "." + стрОбъект.Имя + ".НайтиПоНомеру("+?(стрОбъект.Вид="Задачи", "СтрокаСуффиксаУмногоПоиска)", "СтрокаСуффиксаУмногоПоиска, РабочаяДата)" ));
							Если НЕ НайденныйОбъект.Пустая() Тогда
								СтрокаОбъекта = ДеревоИнтерфейса.Строки.Вставить(0);
								//СтрокаОбъекта.Имя = НайденныйОбъект.УникальныйИдентификатор();
								СтрокаОбъекта.Имя = НайденныйОбъект;
								СтрокаОбъекта.Вид = НайденныйОбъект.Метаданные().ПолноеИмя();
								СтрокаОбъекта.Представление	= НайденныйОбъект;
								СтрокаОбъекта.ИндексКартинки = 62;
								Продолжить
							КонецЕсли;				
						КонецЕсли;
					КонецЕсли;					
					
					// Если поиск по коду, наименованию, номеру не удался, попробуем поискать по индексируемым реквизитам
					Для каждого РеквизитОбъектаМД Из ОбъектМД.Реквизиты Цикл
						Если РеквизитОбъектаМД.Индексирование <> Метаданные.СвойстваОбъектов.Индексирование.НЕИндексировать Тогда
							Выполнить("НайденныйОбъект = " +  стрОбъект.Вид + "." + стрОбъект.Имя + ".НайтиПоРеквизиту(РеквизитОбъектаМД.Имя, СтрокаСуффиксаУмногоПоиска)");
							Если НЕ НайденныйОбъект.Пустая() Тогда
								
								СтрокаОбъекта = ДеревоИнтерфейса.Строки.Вставить(0);
								//СтрокаОбъекта.Имя = НайденныйОбъект.УникальныйИдентификатор();
								СтрокаОбъекта.Имя = НайденныйОбъект;
								СтрокаОбъекта.Вид = НайденныйОбъект.Метаданные().ПолноеИмя();
								СтрокаОбъекта.Представление	= НайденныйОбъект;
								СтрокаОбъекта.ИндексКартинки = 62;
								Продолжить
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	

КонецПроцедуры

Процедура ВыводСодержимогоКаталогов(ДеревоОбъектов = Неопределено, СтрокаПоиска="")

// Вывод содержимого каталогов
	Для каждого Каталог Из стНастройки.Каталоги Цикл
		СтрокиКорня = Неопределено;
		МассивНайденныхФайлов = НайтиФайлы(Каталог.Ключ, "*", флИскатьВПодкаталогах=Истина);
		Для каждого НайденныйФайл Из МассивНайденныхФайлов Цикл
			Расширение = ВРЕГ(НайденныйФайл.Расширение);
			Если Расширение = ".EPF" Тогда
				ВидФайла = "Внешние обработки";
				ИндексКартинки = 19; // 56;
			ИначеЕсли Расширение = ".ERF" Тогда
				ВидФайла = "Внешние отчеты";
				ИндексКартинки = 19; // 57;
			ИначеЕсли Расширение = ".TXT" Тогда
				ВидФайла = "Текстовые документы";
				ИндексКартинки = 58;
			ИначеЕсли Расширение = ".MXL" Тогда
				ВидФайла = "Табличные документы";
				ИндексКартинки = 59;
			ИначеЕсли Расширение = ".RCF" Тогда
				ВидФайла = "Настройки консоли отчетов";
				ИндексКартинки = 60;
			ИначеЕсли Расширение = ".SEL" Тогда
				ВидФайла = "Настройки консоли запросов";
				ИндексКартинки = 61;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если НЕ ОбъектПроходитФильтры(НайденныйФайл.ИмяБезРасширения, СтрокаПоиска) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокиКорня = Неопределено тогда
				стрКореньИнтерфейса = ?(ДеревоОбъектов = Неопределено, ДеревоИнтерфейса.Строки.Добавить(), ДеревоОбъектов.Строки.Добавить()) ;
				стрКореньИнтерфейса.Представление  = Каталог.Значение;
				стрКореньИнтерфейса.Имя = стрКореньИнтерфейса.Представление;
				стрКореньИнтерфейса.ИндексКартинки = 12;
				СтрокиКорня = стрКореньИнтерфейса.Строки;		
			КонецЕсли;
			стрОбъектИнтерфейса = СтрокиКорня.Добавить();
			стрОбъектИнтерфейса.Вид 		   = ВидФайла;
			стрОбъектИнтерфейса.Имя			   = НайденныйФайл.ПолноеИмя;
			стрОбъектИнтерфейса.Представление  = НайденныйФайл.ИмяБезРасширения;
			стрОбъектИнтерфейса.ИндексКартинки = ИндексКартинки;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура ВыводСохраненныхНастроекОтчетов(ДеревоОбъектов = Неопределено, СтрокаПоиска = "")

	// Вывод сохраненных настроек отчетов
	Если ЕстьУниверсальныйОтчет И Есть_РС_СохраненныеНастройки Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СохраненныеНастройки.ИмяОбъекта КАК Вид,
		|	СохраненныеНастройки.НаименованиеНастройки как Имя,
		|	СохраненныеНастройки.НаименованиеНастройки как Представление,
		|	24 как ИндексКартинки
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	Выразить(СохраненныеНастройки.ИмяОбъекта как Строка(12)) = ""ОтчетОбъект.""
		|   И СохраненныеНастройки.Пользователь = &ТекущийПользователь";
		
		Запрос.УстановитьПараметр("ТекущийПользователь", мТекущийПользователь);
		
		РезультатЗапросаПоНастройкам = Запрос.Выполнить();
		Если НЕ РезультатЗапросаПоНастройкам.Пустой() Тогда
		
			СтрокаКорняОтчетов = ?(ДеревоОбъектов = Неопределено, ДеревоИнтерфейса, ДеревоОбъектов).Строки.Найти("Отчеты");
			ВыборкаНастроек = РезультатЗапросаПоНастройкам.Выбрать();
			Пока ВыборкаНастроек.Следующий() Цикл
				Если НЕ ОбъектПроходитФильтры(ВыборкаНастроек.Представление, СтрокаПоиска) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаКорняОтчетов = Неопределено Тогда
					стрКореньИнтерфейса = ?(ДеревоОбъектов = Неопределено, ДеревоИнтерфейса, ДеревоОбъектов).Строки.Добавить();
					стрКореньИнтерфейса.Представление  = "Отчеты";
					стрКореньИнтерфейса.Имя = стрКореньИнтерфейса.Представление;
					стрКореньИнтерфейса.ИндексКартинки = 23;
					СтрокиКорня = стрКореньИнтерфейса.Строки;
				Иначе
					СтрокиКорня = СтрокаКорняОтчетов.Строки;
				КонецЕсли;

				ИмяОтчета = Сред(ВыборкаНастроек.Вид, Найти(ВыборкаНастроек.Вид, ".")+1);
				СтрокаОтчетаДляНастройки = СтрокиКорня.Найти(ИмяОтчета, "Имя", Истина);
				Если СтрокаОтчетаДляНастройки = Неопределено Тогда
					МДОтчет = Метаданные.Отчеты.Найти(ИмяОтчета);
					Если МДОтчет = Неопределено Тогда
						// Случай, когда в регистре сведний хранится название уже несуществующего отчета
						Продолжить;
					Иначе
						СтрокаОтчетаДляНастройки = СтрокиКорня.Добавить();
						СтрокаОтчетаДляНастройки.Вид = "Отчеты";
						СтрокаОтчетаДляНастройки.Имя = ИмяОтчета;
						СтрокаОтчетаДляНастройки.Представление = МДОтчет.Синоним;
						СтрокаОтчетаДляНастройки.ИндексКартинки = 23;
					КонецЕсли;
				КонецЕсли;
				стрОбъектИнтерфейса 				= СтрокаОтчетаДляНастройки.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стрОбъектИнтерфейса, ВыборкаНастроек);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВыводСохраненныхВнешнихОбработок(ДеревоОбъектов = Неопределено, СтрокаПоиска = "")

	// Вывод сохраненных внешних обработок
	Если ЕстьСправочникВнешнихОбработок Тогда
		Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ВнешниеОбработки) Тогда
			Возврат;
		КонецЕсли; 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Наименование как Представление, Код как Имя, ""СправочникВнешниеОбработки"" как Вид,
		|	19 как ИндексКартинки
		|ИЗ
		|	Справочник.ВнешниеОбработки";
		
		РезультатЗапросаПоСправочникуОбработок = Запрос.Выполнить();
		Если НЕ РезультатЗапросаПоСправочникуОбработок.Пустой() Тогда
		    ПредставлениеКорняВнешнихОбработок = "Справочник ""Внешние обработки""";
			СтрокаКорняВнешнихОбработок = ?(ДеревоОбъектов = Неопределено, ДеревоИнтерфейса, ДеревоОбъектов).Строки.Найти(ПредставлениеКорняВнешнихОбработок);
			Если СтрокаКорняВнешнихОбработок = Неопределено Тогда
				СтрокаКорняВнешнихОбработок = ?(ДеревоОбъектов = Неопределено, ДеревоИнтерфейса, ДеревоОбъектов).Строки.Добавить();
				СтрокаКорняВнешнихОбработок.Представление = ПредставлениеКорняВнешнихОбработок;
				СтрокаКорняВнешнихОбработок.Имя = СтрокаКорняВнешнихОбработок.Представление;
				СтрокаКорняВнешнихОбработок.ИндексКартинки = 18;
			КонецЕсли;
			СтрокиКорня = СтрокаКорняВнешнихОбработок.Строки;
			ВыборкаПоСправочникуВнешнихОбработок = РезультатЗапросаПоСправочникуОбработок.Выбрать();				
			Пока ВыборкаПоСправочникуВнешнихОбработок.Следующий() Цикл
				Если ОбъектПроходитФильтры(ВыборкаПоСправочникуВнешнихОбработок.Представление, СтрокаПоиска) Тогда
					стрОбъектИнтерфейса = СтрокаКорняВнешнихОбработок.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(стрОбъектИнтерфейса, ВыборкаПоСправочникуВнешнихОбработок);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// проверяет условия с помощью регулярных выражений, 
// если НЕ ТолькоПроверка - заменяет выражение с помощью шаблона ШаблонЗамены и возвращает в переменной ИтоговаяСтрока 
Функция ПроверитьУсловие(СтрокаПоиска, ШаблонПоиска, ТолькоПроверка = Истина, ШаблонЗамены = "", ИтоговаяСтрока = "") Экспорт 
	
	Попытка
		RegExp.Pattern = ШаблонПоиска;
		Найдено = RegExp.Test(СтрокаПоиска); 
	Исключение
		//ирОбщий.СообщитьЛкс(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
		
	Если Не Найдено Или ТолькоПроверка тогда 
		ИтоговаяСтрока = ""; 
		возврат Найдено ; 
	Иначе 
		ИтоговаяСтрока = RegExp.Replace(СтрокаПоиска, ШаблонЗамены); 
		возврат Найдено; 
	КонецЕсли; 
	
КонецФункции // ПроверитьУсловие()

Функция ПолучитьИмяОсновногоПредставления()
	
	Если флИмяСиноним Тогда
		ИмяКолонкиПредставления = "Имя";
	Иначе
		ИмяКолонкиПредставления = "Представление";
	КонецЕсли; 
	Возврат ИмяКолонкиПредставления;
	
КонецФункции

Функция ОбъектПроходитФильтры(стрОбъект, Знач СтрокаПоиска = "", ПроверятьПодсистему = Ложь, ОбъектыВыбранныхПодсистем = Неопределено) Экспорт 
	
	Если СтрокаПоиска = "" Тогда
		СтрокаПоиска = мВременныйФильтрИмен;
	КонецЕсли;
	
	// Поиск - по представлению
	Если ТипЗнч(СтрОбъект) = Тип("СтрокаДереваЗначений") Тогда
		ИмяКолонкиПредставления = ПолучитьИмяОсновногоПредставления();
		Представление = стрОбъект[ИмяКолонкиПредставления];
	Иначе
		// В случае передачи имени файла
		Представление = стрОбъект;
	КонецЕсли;

	МассивФрагментов = ирОбщий.СтрРазделитьЛкс(СтрокаПоиска, " ", Истина);
	Для Каждого СтрокаПоиска Из МассивФрагментов Цикл
		// Собственно, поиск по подстроке
		Если НЕ ПустаяСтрока(СокрЛП(СтрокаПоиска)) Тогда
			Если Ложь
				Или (Истина
					И стНастройки.ИспользоватьРегулярныеВыражения 
					И Не ПроверитьУсловие(Представление, СтрокаПоиска)) // Проверка регулярным выражением
				Или (Истина
					И Не стНастройки.ИспользоватьРегулярныеВыражения 
					И Найти(НРег(Представление), НРег(СтрокаПоиска)) = 0) // Проверка обычным поиском
			Тогда
				// Полная строка не нашлась, попробуем найти строку без уточняющего суффикса
				Если флПробоватьУмныйПоиск = Истина Тогда
					Если  Ложь
						Или (Истина
							И стНастройки.ИспользоватьРегулярныеВыражения 
							И Не ПроверитьУсловие(Представление, СтрокаУмногоПоискаБезСуффикса)) // Проверка регулярным выражением
						Или (Истина
							И Не стНастройки.ИспользоватьРегулярныеВыражения 
							И Найти(НРег(Представление), НРег(СтрокаУмногоПоискаБезСуффикса)) = 0) // Проверка обычным поиском
					Тогда
						Возврат Ложь;
					КонецЕсли
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	// Отбор по подсистемам - самый медленный, оставим его напоследок
	Если Истина
		И ПроверятьПодсистему 
		И ФильтрПодсистем.Количество() > 0
	Тогда
		// Убрать мусор, который не относится к подсистемам
		Если стрОбъект.Вид = "СправочникВнешниеОбработки" Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ирКэш.НомерИзданияПлатформыЛкс() >= "82" Тогда
			ОбъектМД = ОбъектМДВетви(стрОбъект);
			Если ОбъектыВыбранныхПодсистем[ОбъектМД] = Неопределено тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Не ирОбщий.ЛиСпискиПодсистемПересекаютсяЛкс(ФильтрПодсистем, стрОбъект.Подсистемы) тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

Процедура КоманднаяПанельДереваИнтерфейсаДобавитьПапку(Кнопка)
	
	ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если ВыборКаталога.Выбрать() Тогда
		ПредставлениеКаталога = ВыборКаталога.Каталог;
		ВвестиСтроку(ПредставлениеКаталога, "Представление каталога");
		стНастройки.Каталоги.Вставить(ВыборКаталога.Каталог, ПредставлениеКаталога);
		ЗаполнитьДеревоВсехОбъектов();
		ЗаполнитьДеревоИнтерфейса();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДереваИнтерфейсаОткрыть(Кнопка)
	
	ОткрытиеФормы();
	
КонецПроцедуры

// Выполняет все команды, сохраненные в ветке "Автозапуск"
// Вызывается при открытии данной формы
//
Процедура Автозапуск() Экспорт
	Для каждого СтрокаДерева Из ДеревоИнтерфейса.Строки Цикл
		СтруктураНастроекСтатическойВетки = СтатическиеВетки[СтрокаДерева];
		Если СтруктураНастроекСтатическойВетки = Неопределено ИЛИ НЕ СтруктураНастроекСтатическойВетки.Автозапуск Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			Для каждого СтрокаАвтозапуска Из СтрокаДерева.Строки Цикл
				ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока = СтрокаАвтозапуска;
				ОткрытиеФормы();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // Автозапуск()

Процедура кнНастройкаНажатие(Элемент)
	РезультатФормы = ПолучитьФорму("Настройка").ОткрытьМодально();
	Если РезультатФормы = Истина Тогда
		ЗаполнитьЗначенияСвойств(стНастройки, ЭтотОбъект);
		ЗаполнитьДеревоВсехОбъектов();
	КонецЕсли; 
КонецПроцедуры

Процедура кнПрятатьНажатие(Элемент)
	Если СостояниеОкна = ВариантСостоянияОкна.Прячущееся Тогда
		_СостояниеОкна = ВариантСостоянияОкна.Прикрепленное
	Иначе
		_СостояниеОкна = ВариантСостоянияОкна.Прячущееся 
	КонецЕсли;
	стНастройки.Вставить("СостояниеОкна", _СостояниеОкна);
	Переоткрыть();
КонецПроцедуры

// Переоткрывает форму. Бывает нужно при смене отображения окна и при запуске отладочной версии
//
Процедура Переоткрыть(ИскатьОтладочнуюВерсию=Неопределено)
	
	Если НЕ Метаданные.Обработки.Найти(ЭтотОбъект.Метаданные().Имя) = Неопределено Тогда 
		Если ИскатьОтладочнуюВерсию=Истина Тогда
			ФайлОбработки = Новый Файл(КаталогВременныхФайлов()+"\ip8.epf");
			Если ФайлОбработки.Существует() Тогда
				Попытка
					Обработка = ВнешниеОбработки.Создать(ФайлОбработки);
				Исключение
					ирОбщий.СообщитьЛкс(ОписаниеОшибки(), СтатусСообщения.Внимание);
					Возврат
				КонецПопытки;
			КонецЕсли;
			Если Обработка = Неопределено Тогда
				Возврат
			Иначе
				ЗаполнитьЗначенияСвойств(Обработка, ЭтотОбъект);
				Форма = Обработка.ПолучитьФорму();
				ЗаполнитьЗначенияСвойств(Форма, ЭтаФорма,,"СостояниеОкна");					
			КонецЕсли;
		Иначе	
			Форма = Обработки[Метаданные().Имя].Создать().ПолучитьФорму();
		КонецЕсли;
	Иначе
		_ИмяФайла_ = "";
		Выполнить("_ИмяФайла_ = ИспользуемоеИмяФайла");
		Если ЗначениеЗаполнено(_ИмяФайла_) Тогда
			ФайлОбработки = Новый Файл(_ИмяФайла_);
			Если ФайлОбработки.Существует() Тогда
				Форма = ВнешниеОбработки.ПолучитьФорму(_ИмяФайла_);
			Иначе 
				Возврат;
			КонецЕсли;
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	Если Не Форма = Неопределено Тогда
		Закрыть();
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры // Переоткрыть()

// Открывает универсальный отчет по данному регистру
//
// Параметры
//  ИмяРегистра - строковый идентификатор регистра
//
// Возвращаемое значение:
//   Форма универсального отчета, заполненная настройками и готовая к формированию
//
Функция УниверсальныйОтчетПоРегиструНакопления(ИмяРегистра)
	
	Если НЕ ЕстьУниверсальныйОтчет Тогда
		Возврат РегистрыНакопления[ИмяРегистра].ПолучитьФормуСписка();
	КонецЕсли;
	УниверсальныйОтчет = Отчеты.УниверсальныйОтчет.Создать();
	ФормаОтчета = УниверсальныйОтчет.ПолучитьФорму();
	УниверсальныйОтчет.ИмяРегистра = ИмяРегистра;
	УниверсальныйОтчет.ПереУстановитьНачальныеНастройки(УниверсальныйОтчет, УниверсальныйОтчет, ФормаОтчета);
	ДоступныеПоля = УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля;
	Для каждого Поле Из ДоступныеПоля Цикл
		Если Поле.Измерение Тогда
			УниверсальныйОтчет.ДобавитьИзмерениеСтроки(Поле.ПутьКДанным);
		КонецЕсли;
		Если Поле.Отбор Тогда
			УниверсальныйОтчет.ДобавитьОтбор(Поле.ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	Возврат ФормаОтчета;
	
КонецФункции // УниверсальныйОтчетПоРегиструНакопления()

Функция ФункциональныеОпцииОбъекта(ПолноеИмяМД)
	
	ОбъектМД = ирКэш.ОбъектМДПоПолномуИмениЛкс(ПолноеИмяМД);
	Если ОбъектМД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ЗначенияФункОпций = Неопределено;
	ирОбщий.ФункциональныеОпцииОбъектаМДЛкс(ОбъектМД, ЗначенияФункОпций);
	ФормаПросмотра = мПлатформа.ПолучитьФорму("ЗначенияФункциональныхОпций", , ПолноеИмяМД);
	ФормаПросмотра.НачальноеЗначениеВыбора = ЗначенияФункОпций;
	ФормаПросмотра.Открыть();
	Возврат ФормаПросмотра;
	
КонецФункции

Функция ОткрытьРедакторКонстант()
	
	ИмяКонстанты = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока.Имя;
	Форма = ирОбщий.ПолучитьФормуЛкс("Обработка.ирРедакторКонстант.Форма",,, ИмяКонстанты);
	Форма.НачальноеЗначениеВыбора = ИмяКонстанты;
	Возврат Форма;
	
КонецФункции // ирРедакторКонстант()

Функция ирИсследоватьОбъект(Ссылка)
	
	Обработка = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирИсследовательОбъектов");
	Форма = Обработка.ПолучитьФорму();
	Форма.УстановитьИсследуемоеЗначение(Ссылка);
	Возврат Форма;
	
КонецФункции

Функция ирРедакторОбъектаБД(Ссылка)
	
	Форма = ирОбщий.ОткрытьСсылкуВРедактореОбъектаБДЛкс(Ссылка);
	Возврат Форма;
	
КонецФункции

Функция ирПолучитьКартинкуЕслиЕсть(ИмяКартинки)
	
	Результат = Новый Картинка;
	Если Лев(ИмяКартинки, 2) = "ир" Тогда
		Результат = ирКэш.КартинкаПоИмениЛкс(ИмяКартинки);
	Иначе
		// Для типовых поиск по метаданным недоступен
		Попытка
			Результат = БиблиотекаКартинок[ИмяКартинки];
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ФильтрПодсистемНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, ЭтаФорма);

КонецПроцедуры

Процедура КомандыПанелиИмяСиноним(Кнопка)
	
	мВременныйФильтрИмен = "";
	ЭтотОбъект.флИмяСиноним = Не Кнопка.Пометка;
	Кнопка.Пометка = ЭтотОбъект.флИмяСиноним;
	ирОбщий.ТабличноеПолеОбновитьКолонкиИмяСинонимЛкс(ЭлементыФормы.ДеревоИнтерфейса, ЭтотОбъект.флИмяСиноним);
	ПриИзмененииФильтраИмен();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник) Экспорт
	
	ирОбщий.ФормаОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура КомандыПанелиОбновитьКоличествоСтрок(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.ДеревоИнтерфейса.Колонки.КоличествоСтрок.Видимость = Кнопка.Пометка;
	ЭлементыФормы.ДеревоИнтерфейса.ИзменятьПорядокСтрок = Кнопка.Пометка;
	ЭлементыФормы.ДеревоИнтерфейса.Шапка = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		Если ирКэш.ТаблицаВсехТаблицБДЛкс()[0].КоличествоСтрок = Неопределено Тогда
			Ответ = КодВозвратаДиалога.Да;
		Иначе
			Ответ = Вопрос("Хотите обновить статистику по отображаемым объектам?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли; 
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ирОбщий.ВычислитьКоличествоСтрокТаблицВДеревеМетаданныхЛкс(ДеревоИнтерфейса);
		КонецЕсли;
		ирОбщий.ЗаполнитьКоличествоСтрокТаблицВДеревеМетаданныхЛкс(ДеревоИнтерфейса);
	Иначе
		ДеревоИнтерфейса.Строки.Сортировать("Порядок", Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КлсКомандаНажатие(Кнопка) Экспорт 
	
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработчикОжиданияСПараметрамиЛкс() Экспорт 
	
	ирОбщий.ОбработчикОжиданияСПараметрамиЛкс();

КонецПроцедуры

Процедура ВставитьИзБуфера(Кнопка)
	
	РодительскаяСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	Если РодительскаяСтрока.Родитель <> Неопределено Тогда
		РодительскаяСтрока = РодительскаяСтрока.Родитель;
	КонецЕсли; 
	Если Ложь
		Или РодительскаяСтрока.Имя = "Избранное"
		Или РодительскаяСтрока.Имя = "Автозапуск"
	Тогда
		ЗначениеИзБуфера = ирОбщий.СсылкаИзБуфераОбменаЛкс();
		Если ирОбщий.ЛиСсылкаНаОбъектБДЛкс(ЗначениеИзБуфера, Ложь) Тогда
			СтруктураЭлемента = Новый Структура();
			СтруктураЭлемента.Вставить("Вид", ЗначениеИзБуфера.Метаданные().ПолноеИмя());
			СтруктураЭлемента.Вставить("Представление", ЗначениеИзБуфера);
			СтруктураЭлемента.Вставить("Имя", ЗначениеИзБуфера);
			ДобавитьСтрокуВСтатическуюВетку(СтруктураЭлемента, РодительскаяСтрока.Имя, Истина);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ФильтрПодсистемОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.Значение = ВыбранноеЗначение; // Без этого выбор из списка последних использованных не устанавливал значение
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные) Экспорт
	
	ирОбщий.Форма_ВнешнееСобытиеЛкс(ЭтаФорма, Источник, Событие, Данные);

КонецПроцедуры

Процедура ТабличноеПолеПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт 
	
	ирОбщий.ТабличноеПолеПриПолученииДанныхЛкс(ЭтаФорма, Элемент, ОформленияСтрок);

КонецПроцедуры

Процедура КомандыПанелиИсследовательОбъектов(Кнопка)
	
	Форма = ирОбщий.ПолучитьФормуЛкс("Обработка.ирИсследовательОбъектов.Форма",, ЭтаФорма, "Связанный");
	Форма.Открыть();
	ДеревоИнтерфейсаПриАктивизацииСтроки(ЭлементыФормы.ДеревоИнтерфейса);
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирИнтерфейснаяПанель.Форма.Форма");

ИсторияКоманд = 50;
ИспользоватьРегулярныеВыражения = Истина;
ПолнотекстовыйПоискПорогНечеткости = 0;
ПолнотекстовыйПоискРазмерПорции = 0; // Если 0 - то полнотекстовый поиск отключен

	//////////////////////////////////////////////////////////////////////////////////////////////	
	// Соответствие статических веток (История использования и Избранное) и настроек для них
	//Представление, - отображение в интерфейсе
	//СтрокаСортировки, - строка сортировки в таблице статистики
	//КоличествоОтображаемыхЭлементов, - сколько элементов выводить
	//Фильтровать - фильтровать ли данную ветку вместе с деревом
	МассивСтатическихВеток = Новый Массив;
	
	//// Быстрый поиск
	//МассивСтатическихВеток.Добавить(Новый Структура(
	//																					"Имя,Использовать,Представление,СтрокаСортировки,КоличествоОтображаемыхЭлементов,Фильтровать,СортировкаПриОтображении,РазрешитьПеретаскивание,Автозапуск,Развернуть", 
	//																					"БыстрыйПоиск",
	//																					Истина, 				// Использовать ли данную ветку
	//																					"Быстрый поиск", 			// Представление ветки в дереве
	//																					"БыстрыйПоиск УБЫВ",  	// Строка сортировки статистической таблицы. Определяет, какие элементы выводятся
	//																					5,                     // Количество элементов, отображаемых в данной ветке
	//																					Истина,                   // Фильтровать ли ветку при непустой строке фильтра
	//																					"",                     // не сортировать
	//																					Ложь, 				// Разрешить перетаскивание
	//																					Ложь					// Автозапуск команд в данной ветке при открытии обработки
	//																					,Истина			// Ветка развернута
	//																				)
	//									);

	// Недавние
	МассивСтатическихВеток.Добавить(Новый Структура(
			"Имя,Использовать,Представление,СтрокаСортировки,КоличествоОтображаемыхЭлементов,Фильтровать,СортировкаПриОтображении,РазрешитьПеретаскивание,Автозапуск,Развернуть", 
			"НедавноИспользованные",
			Истина, // Использовать ли данную ветку
			"Недавно использованные", // Представление ветки в дереве
			"ПоследнееИспользование УБЫВ", // Строка сортировки статистической таблицы. Сортировка определяет, какие элементы выводятся
			10, // Количество элементов, отбражаемых в данной ветке
			Ложь, // Фильтровать ли ветку при непустой строке фильтра
			// Сортировка отображаемых элементов
			// "Вид,Имя" - обычная сортировка
			"", // сортировка по дате использования
			Ложь, // Перетаскивание
			Ложь			// Автозапуск
			,Ложь			// Ветка свернута
		)
	);
	// Часто используемые
	МассивСтатическихВеток.Добавить(Новый Структура(
			"Имя,Использовать,Представление,СтрокаСортировки,КоличествоОтображаемыхЭлементов,Фильтровать,СортировкаПриОтображении,РазрешитьПеретаскивание,Автозапуск,Развернуть", 
			"ЧастоИспользуемые",
			Истина,
			"Часто используемые", 
			"КоличествоИспользований УБЫВ,ПоследнееИспользование",
			10,
			Ложь,
			// Сортировка отображаемых элементов
			"Вид,Имя",
			Ложь, 			// Перетаскивание
			Ложь			// Автозапуск
			,Ложь			// Ветка свернута
		)
	);
	// Избранное									
	МассивСтатическихВеток.Добавить(Новый Структура(
			"Имя,Использовать,Представление,СтрокаСортировки,КоличествоОтображаемыхЭлементов,Фильтровать,СортировкаПриОтображении,РазрешитьПеретаскивание,Автозапуск,Развернуть, ИндексКартинки", 
			"Избранное",
			Истина, // Использовать ли данную ветку
			"Избранное", // Представление ветки в дереве 
			"Избранное УБЫВ",
			10,
			Ложь,
			// Сортировка отображаемых элементов
			"Вид,Имя",
			Истина, 			// Перетаскивание
			Ложь			// Автозапуск
			,Ложь			// Ветка свернута
			, 63
		)
	);
	// Автозапуск									
	МассивСтатическихВеток.Добавить(Новый Структура(
			"Имя,Использовать,Представление,СтрокаСортировки,КоличествоОтображаемыхЭлементов,Фильтровать,СортировкаПриОтображении,РазрешитьПеретаскивание,Автозапуск,Развернуть", 
			"Автозапуск",
			Истина, 				// Использовать ли данную ветку
			"Автозапуск", 			// Представление ветки в дереве
			"Автозапуск УБЫВ",  	// Строка сортировки статистической таблицы. Определяет, какие элементы выводятся
			10,                     // Количество элементов, отображаемых в данной ветке
			Ложь,                   // Фильтровать ли ветку при непустой строке фильтра
			"",                     // не сортировать
			Истина, 				// Разрешить перетаскивание
			Истина					// Автозапуск команд в данной ветке при открытии обработки
			,Ложь			// Ветка свернута
		)
	);
// Пример пользовательской статической ветки (раскомментируйте и добавьте необходимое количество экземпляров)									
	//СтатическиеВетки.Вставить(ДеревоИнтерфейса.Строки.Добавить(), 		Новый Структура(
	//																					"Имя,Использовать,Представление,СтрокаСортировки,КоличествоОтображаемыхЭлементов,Фильтровать,СортировкаПриОтображении,РазрешитьПеретаскивание,Автозапуск", 
	//																					"МойСборникКоманд", 			// Представление ветки в дереве
	//																					Истина, 				// Использовать ли данную ветку
	//																					"Мой сборник команд", 			// Представление ветки в дереве
	//																					"МойСборникКоманд УБЫВ",  	// Строка сортировки статистической таблицы. Определяет, какие элементы выводятся
	//																					10,                     // Количество элементов, отображаемых в данной ветке
	//																					Ложь,                   // Фильтровать ли ветку при непустой строке фильтра
	//																					"",                     // не сортировать
	//																					Истина, 				// Разрешить перетаскивание
	//																					Ложь					// Автозапуск команд в данной ветке при открытии обработки
	//																				)
	//									);
	//										

КолонкиДерева = ДеревоИнтерфейса.Колонки;
Если КолонкиДерева.Найти("Представление") = Неопределено Тогда
	КолонкиДерева.Добавить("Представление");
	КолонкиДерева.Добавить("Имя");
	КолонкиДерева.Добавить("Вид");
	КолонкиДерева.Добавить("ИндексКартинки");
	КолонкиДерева.Добавить("ПолноеИмяОбъекта");
	КолонкиДерева.Добавить("КоличествоСтрок");
	КолонкиДерева.Добавить("Порядок");
КонецЕсли;
мПлатформа = ирКэш.Получить();
КомандыПоиска = Новый Массив();
ВеткиМетаданных = Новый СписокЗначений;
ВеткиМетаданных.Добавить("Общие формы", "ОбщиеФормы");
ВеткиМетаданных.Добавить("Интерфейсы", "Интерфейсы");
ВеткиМетаданных.Добавить("Константы", "Константы");
ВеткиМетаданных.Добавить("Справочники", "Справочники");
ВеткиМетаданных.Добавить("Перечисления", "Перечисления");
ВеткиМетаданных.Добавить("Документы", "Документы");
ВеткиМетаданных.Добавить("Журналы документов", "ЖурналыДокументов");
ВеткиМетаданных.Добавить("Отчеты", "Отчеты");
ВеткиМетаданных.Добавить("Обработки", "Обработки");
ВеткиМетаданных.Добавить("Планы видов характеристик", "ПланыВидовХарактеристик");
ВеткиМетаданных.Добавить("Регистры сведений", "РегистрыСведений");
ВеткиМетаданных.Добавить("Регистры накопления", "РегистрыНакопления");
ВеткиМетаданных.Добавить("Планы счетов", "ПланыСчетов");
ВеткиМетаданных.Добавить("Планы видов расчета", "ПланыВидовРасчета");
ВеткиМетаданных.Добавить("Регистры бухгалтерии", "РегистрыБухгалтерии");
ВеткиМетаданных.Добавить("Регистры расчета", "РегистрыРасчета");
ВеткиМетаданных.Добавить("Бизнес-процессы", "БизнесПроцессы");
ВеткиМетаданных.Добавить("Задачи","Задачи");
ВеткиМетаданных.Добавить("Планы обмена", "ПланыОбмена");
ЕстьУниверсальныйОтчет = (Метаданные.Отчеты.Найти("УниверсальныйОтчет") <> Неопределено);
Есть_РС_СохраненныеНастройки = (Метаданные.РегистрыСведений.Найти("СохраненныеНастройки") <> Неопределено);
ЕстьСправочникВнешнихОбработок = (Метаданные.Справочники.Найти("ВнешниеОбработки") <> Неопределено);
ИмяКорневойПодсистемы = "Конфигурация." + Метаданные.Имя;
Если Метаданные.ПараметрыСеанса.Найти("ТекущийПользователь") = Неопределено Тогда
	мТекущийПользователь = Неопределено;
Иначе
	Попытка
		мТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	Исключение
	КонецПопытки; 
КонецЕсли;
мКоличествоСтатическихКнопокКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки.Количество();
ПрочитатьНастройки();
Если стНастройки.Свойство("СостояниеОкна") Тогда
	Если стНастройки.СостояниеОкна = ВариантСостоянияОкна.Обычное Или стНастройки.СостояниеОкна = ВариантСостоянияОкна.Свободное Тогда
		СостояниеОкна = стНастройки.СостояниеОкна;
	ИначеЕсли стНастройки.СостояниеОкна = ВариантСостоянияОкна.Прикрепленное ИЛИ стНастройки.СостояниеОкна = ВариантСостоянияОкна.Прячущееся Тогда
		СоединяемоеОкно = Истина;
		СостояниеОкна = стНастройки.СостояниеОкна;
	Иначе
		//СостояниеОкна = стНастройки.СостояниеОкна;
	КонецЕсли;
Иначе
	стНастройки.Вставить("СостояниеОкна", СостояниеОкна);
КонецЕсли;
