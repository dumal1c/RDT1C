//ирПортативный Перем ирПортативный Экспорт;
//ирПортативный Перем ирОбщий Экспорт;
//ирПортативный Перем ирСервер Экспорт;
//ирПортативный Перем ирКэш Экспорт;
//ирПортативный Перем ирПривилегированный Экспорт;

Перем мСтруктураПоискаВДереве;
Перем мТекущийИндексНайденнойСтроки;

Процедура ПриОткрытии()
	
	ЭтаФорма.РежимПодсистемы = КлючУникальности = "ВсеИнструменты";
	Если РежимПодсистемы Тогда
		ЭтаФорма.Заголовок = "Структура всех инструментов (ИР)";
	КонецЕсли; 
	ОбновитьДерево();
	Если ПараметрЭлементФормы = Неопределено Тогда
		Если Форма <> Неопределено Тогда
			ПараметрЭлементФормы = Форма.ТекущийЭлемент;
			Если ТипЗнч(ПараметрЭлементФормы) = Тип("ТабличноеПоле") Тогда
				Если ПараметрЭлементФормы.ТекущаяКолонка <> Неопределено Тогда
					ПараметрЭлементФормы = ПараметрЭлементФормы.ТекущаяКолонка;
				КонецЕсли; 
			ИначеЕсли ТипЗнч(ПараметрЭлементФормы) = Тип("Панель") Тогда
				Если ПараметрЭлементФормы.ТекущаяСтраница <> Неопределено Тогда
					ПараметрЭлементФормы = ПараметрЭлементФормы.ТекущаяСтраница;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	Если ПараметрЭлементФормы <> Неопределено Тогда
		СтрокаЭлементаФормы = Дерево.Строки.Найти(ПараметрЭлементФормы, "ЭлементФормы", Истина);
		Если СтрокаЭлементаФормы <> Неопределено Тогда
			ЭлементыФормы.Дерево.ТекущаяСтрока = СтрокаЭлементаФормы;
			ЭлементыФормы.Дерево.Развернуть(СтрокаЭлементаФормы);
		КонецЕсли; 
	КонецЕсли; 
	ПодключитьОбработчикОжидания("ИндикацияТекущегоЭлемента", 0.2, Истина);
	
КонецПроцедуры

Функция ПолучитьПервогоРодителяПоТипу(Знач СтрокаДерева, Тип)
	
	Пока СтрокаДерева.Родитель <> Неопределено Цикл 
		СтрокаДерева = СтрокаДерева.Родитель;
		Если СтрокаДерева.Тип = Тип Тогда 
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	Возврат СтрокаДерева;
	
КонецФункции

Функция ПолучитьПоследнегоРодителяПоТипу(Знач СтрокаДерева, Тип)
	
	Пока Истина
		И СтрокаДерева.Родитель <> Неопределено 
		И СтрокаДерева.Родитель.Тип = Тип
	Цикл
		СтрокаДерева = СтрокаДерева.Родитель;
	КонецЦикла; 
	Возврат СтрокаДерева;
	
КонецФункции

Процедура ИндикацияТекущегоЭлемента()
	
	ТекущаяСтрока = ЭлементыФормы.Дерево.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Перейти ~Конец;
	КонецЕсли; 
	Если РежимПодсистемы Тогда
		Форма = Неопределено;
		СтрокаФормы = ТекущаяСтрока;
		ОсновнойЛ = Ложь;
		Пока СтрокаФормы.Родитель <> Неопределено Цикл
			Если СтрокаФормы.Основной Тогда 
				Если СтрокаФормы.ЭлементФормы.Открыта() Тогда
					Форма = СтрокаФормы.ЭлементФормы;
				КонецЕсли; 
				Если ТекущаяСтрока = СтрокаФормы Тогда
					Перейти ~Конец;
				КонецЕсли; 
				Прервать;
			КонецЕсли; 
			СтрокаФормы = СтрокаФормы.Родитель;
		КонецЦикла;
	КонецЕсли; 
	Если Форма = Неопределено Тогда
		Перейти ~Конец;
	КонецЕсли; 
	Попытка
		ТекущаяСтрока.Видимость = ЭлементФормыСтрокиДерева(ТекущаяСтрока).Видимость;
	Исключение
	КонецПопытки; 
	Попытка
		ТекущаяСтрока.Доступность = ЭлементФормыСтрокиДерева(ТекущаяСтрока).Доступность;
	Исключение
	КонецПопытки; 
	Если ТекущаяСтрока.Тип = Тип("КнопкаКоманднойПанели") Тогда
		СтрокаДереваКоманднойПанели = ПолучитьПервогоРодителяПоТипу(ТекущаяСтрока, Тип("КоманднаяПанель"));
		ПоказатьВложенныйЭлементФормы(СтрокаДереваКоманднойПанели);
		СтрокаВерхнегоПодменю = ПолучитьПоследнегоРодителяПоТипу(ТекущаяСтрока, Тип("КнопкаКоманднойПанели"));
		ЭлементФормы = ЭлементФормыСтрокиДерева(СтрокаВерхнегоПодменю);
		Маркер = "<<<<!>>>>";
		Если Найти(ЭлементФормы.Текст, Маркер) = 1 Тогда
			ВосстановитьСтарыеСвойстваЭлементаФормы(СтрокаВерхнегоПодменю); 
		Иначе
			СохранитьСтарыеСвойстваЭлементаФормы(СтрокаВерхнегоПодменю, "Текст, Пометка, Отображение");
			ЭлементФормы.Текст = Маркер;
			ЭлементФормы.Пометка = Не ЭлементФормы.Пометка;
			ЭлементФормы.Отображение = ОтображениеКнопкиКоманднойПанели.Надпись;
		КонецЕсли; 
	ИначеЕсли ТекущаяСтрока.Тип = Тип("КолонкаТабличногоПоля") Тогда
		СтрокаДереваТабличногоПоля = ПолучитьПервогоРодителяПоТипу(ТекущаяСтрока, Тип("ТабличноеПоле"));
		Форма.ТекущийЭлемент = ЭлементФормыСтрокиДерева(СтрокаДереваТабличногоПоля);
		Если ТекущаяСтрока.Видимость Тогда
			ЭлементФормыСтрокиДерева(СтрокаДереваТабличногоПоля).ТекущаяКолонка = ЭлементФормыСтрокиДерева(ТекущаяСтрока);
			Колонка = ЭлементФормыСтрокиДерева(ТекущаяСтрока);
			Маркер = ПолучитьЦветИндикации();
			Если Колонка.ЦветФонаПоля = Маркер Тогда
				ВосстановитьСтарыеСвойстваЭлементаФормы(ТекущаяСтрока); 
			Иначе
				СохранитьСтарыеСвойстваЭлементаФормы(ТекущаяСтрока, "ЦветФонаПоля, ЦветФонаШапки");
				Колонка.ЦветФонаПоля = Маркер;
				Колонка.ЦветФонаШапки = Маркер;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ТекущаяСтрока.Тип = Тип("СтраницаПанели") Тогда
		СтрокаДереваПанели = ПолучитьПервогоРодителяПоТипу(ТекущаяСтрока, Тип("Панель"));
		Форма.ТекущийЭлемент = ЭлементФормыСтрокиДерева(СтрокаДереваПанели);
		Если ТекущаяСтрока.Видимость Тогда
			ЭлементФормыСтрокиДерева(СтрокаДереваПанели).ТекущаяСтраница = ЭлементФормыСтрокиДерева(ТекущаяСтрока);
			ЭлементФормы = ЭлементФормыСтрокиДерева(ТекущаяСтрока);
			Маркер = "<<<<!>>>>";
			Если Найти(ЭлементФормы.Заголовок, Маркер) = 1 Тогда
				ВосстановитьСтарыеСвойстваЭлементаФормы(ТекущаяСтрока); 
			Иначе
				СохранитьСтарыеСвойстваЭлементаФормы(ТекущаяСтрока, "Заголовок");
				ЭлементФормы.Заголовок = Маркер;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ТекущаяСтрока.Видимость Тогда
		Если Истина
			И ТекущаяСтрока.Тип <> Тип("Форма") 
			И ТекущаяСтрока.Тип <> Тип("УправляемаяФорма")
			И ТекущаяСтрока.Тип <> Тип("Структура")
		Тогда
			НовыйТекущийЭлемент = ЭлементФормыСтрокиДерева(ТекущаяСтрока);
			Форма.ТекущийЭлемент = НовыйТекущийЭлемент;
			Если Форма.ТекущийЭлемент <> ЭлементФормыСтрокиДерева(ТекущаяСтрока) Тогда
				ПоказатьВложенныйЭлементФормы(ТекущаяСтрока);
			КонецЕсли; 
			ЭлементФормы = ЭлементФормыСтрокиДерева(ТекущаяСтрока);
			Если ТипЗнч(Форма) = Тип("Форма") Тогда 
				ИмяСвойства = "ЦветРамки";
				Если Ложь
					Или ТекущаяСтрока.Тип = Тип("Надпись")
					Или ТекущаяСтрока.Тип = Тип("Флажок")
					Или ТекущаяСтрока.Тип = Тип("КоманднаяПанель")
					Или ТекущаяСтрока.Тип = Тип("ПолеВвода")
					Или ТекущаяСтрока.Тип = Тип("ПолеВыбора")
				Тогда
					Если Истина
						И (Ложь
							Или ТекущаяСтрока.Тип = Тип("ПолеВвода") 
							Или ТекущаяСтрока.Тип = Тип("ПолеВыбора"))
						И Не ЭлементФормы.ТолькоПросмотр
						И ЭлементФормы.Доступность
					Тогда 
						ИмяСвойства = "ЦветФонаПоля";
					Иначе
						ИмяСвойства = "ЦветФона";
					КонецЕсли; 
				КонецЕсли; 
			Иначе
				ИмяСвойства = "";
				// Только для колонок
				Если Истина
					И ИмяСвойства = "" 
					И ТипЗнч(ЭлементФормы) <> Тип("ТаблицаФормы") // Антибаг платформы 8.3.17 Аварийно завершается на некоторых формах (список Алгоритмы). Видимо из-за свойства ЦветТекстаЗаголовка https://partners.v8.1c.ru/forum/t/1911713/m/1911713 , http://www.hostedredmine.com/issues/872715
					И (Ложь
						Или ирОбщий.РодительЭлементаУправляемойФормыЛкс(ЭлементФормы, Тип("ТаблицаФормы")) <> Неопределено 
						Или (Истина
							И ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") 
							И ЭлементФормы.Вид = ВидГруппыФормы.КоманднаяПанель))
				Тогда
					ИмяСвойства = "ЦветТекстаЗаголовка";
					Попытка
						ТекущийЦвет = ЭлементФормы[ИмяСвойства];
					Исключение
						ИмяСвойства = "";
					КонецПопытки; 
				КонецЕсли; 
				Если ИмяСвойства = "" И ТекущаяСтрока.Тип <> Тип("ПолеФормы") Тогда
					ИмяСвойства = "ЦветРамки";
					Попытка
						ТекущийЦвет = ЭлементФормы[ИмяСвойства];
					Исключение
						ИмяСвойства = "";
					КонецПопытки; 
				КонецЕсли; 
				Если ИмяСвойства = "" Тогда
					ИмяСвойства = "ЦветФона";
					Попытка
						ТекущийЦвет = ЭлементФормы[ИмяСвойства];
					Исключение
						ИмяСвойства = "";
					КонецПопытки;
				КонецЕсли; 
			КонецЕсли; 
			Если ЗначениеЗаполнено(ИмяСвойства) Тогда
				Если Истина
					И ТекущаяСтрока.СтарыеСвойства <> Неопределено
					И ТекущаяСтрока.СтарыеСвойства[ИмяСвойства] <> ТекущийЦвет 
				Тогда
					ВосстановитьСтарыеСвойстваЭлементаФормы(ТекущаяСтрока); 
				Иначе
					СохранитьСтарыеСвойстваЭлементаФормы(ТекущаяСтрока, ИмяСвойства);
					ТекущийЦвет = ЭлементФормы[ИмяСвойства];
					ЦветПодсветки = ПолучитьЦветИндикации(ИмяСвойства, ТекущийЦвет);
					ЭлементФормы[ИмяСвойства] = ЦветПодсветки;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
~Конец: 
	ПодключитьОбработчикОжидания("ИндикацияТекущегоЭлемента", 0.5, Истина);
	
КонецПроцедуры

Процедура ПоказатьВложенныйЭлементФормы(Знач ТекущаяСтрока)
	
	Если Истина
		И ТекущаяСтрока.Родитель <> Неопределено 
		И ТекущаяСтрока.Родитель.Родитель <> Неопределено 
		И ТекущаяСтрока.Родитель.Родитель.Тип = Тип("Панель")
	Тогда
		Форма.ТекущийЭлемент = ЭлементФормыСтрокиДерева(ТекущаяСтрока.Родитель.Родитель);
		ЭлементФормыСтрокиДерева(ТекущаяСтрока.Родитель.Родитель).ТекущаяСтраница = ЭлементФормыСтрокиДерева(ТекущаяСтрока.Родитель);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьЦветИндикации(ИмяСвойства = "", ТекущийЦвет = Неопределено)
	
	Если Найти(ИмяСвойства, "Фон") > 0 И ТекущийЦвет <> Неопределено Тогда
		Результат = ирОбщий.СмещенныйЦветЛкс(ТекущийЦвет, -50, -50);
	Иначе
		Результат = Новый Цвет(255, 1, 1);
	КонецЕсли; 
	Возврат Результат;

КонецФункции

Процедура СохранитьСтарыеСвойстваЭлементаФормы(Знач ТекущаяСтрока, СтрокаСвойств)
	
	СтарыеСвойства = Новый Структура(СтрокаСвойств);
	ЗаполнитьЗначенияСвойств(СтарыеСвойства, ЭлементФормыСтрокиДерева(ТекущаяСтрока));
	ТекущаяСтрока.СтарыеСвойства = СтарыеСвойства;

КонецПроцедуры

Процедура ВосстановитьСтарыеСвойстваЭлементаФормы(Знач ТекущаяСтрока)
	
	Если ТекущаяСтрока.СтарыеСвойства <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭлементФормыСтрокиДерева(ТекущаяСтрока), ТекущаяСтрока.СтарыеСвойства);
		ТекущаяСтрока.СтарыеСвойства = Неопределено;
	КонецЕсли; 

КонецПроцедуры

Функция ЭлементФормыСтрокиДерева(Знач ТекущаяСтрока, РазрешитьФорму = Ложь)
	
	ЭлементФормы = ТекущаяСтрока.ЭлементФормы;
	Если ЭлементФормы = Неопределено Тогда
		ЭлементФормы = Форма.Элементы[ТекущаяСтрока.Имя];
	КонецЕсли;
	Если Истина
		И Не РазрешитьФорму
		И (Ложь
			Или ТипЗнч(ЭлементФормы) = Тип("Форма") 
			Или ТипЗнч(ЭлементФормы) = Тип("УправляемаяФорма"))
	Тогда
		ЭлементФормы = Неопределено;
	КонецЕсли; 
	Возврат ЭлементФормы;

КонецФункции

Процедура ОбновитьДерево()
	
	//СтарыеКоординаты = ПолучитьКоординаты();
	Если Не РежимПодсистемы Тогда
		Дерево.Строки.Очистить();
		Если Форма <> Неопределено Тогда
			ДобавитьФорму(Форма);
		КонецЕсли; 
		СортироватьСтроки(Дерево);
	Иначе
		ирПлатформа = ирКэш.Получить();
		#Если Сервер И Не Сервер Тогда
			ирПлатформа = Обработки.ирПлатформа.Создать();
		#КонецЕсли
		СписокИнструментов = ирПлатформа.ПолучитьМакет("СписокИнструментов");
		СписокИнструментов = ирОбщий.ПолучитьТаблицуИзТабличногоДокументаЛкс(СписокИнструментов,,,, Истина);
		Индикатор2 = ирОбщий.ПолучитьИндикаторПроцессаЛкс(СписокИнструментов.Количество());
		Для Каждого СтрокаИнструмента Из СписокИнструментов Цикл
			ирОбщий.ОбработатьИндикаторЛкс(Индикатор2);
			КорневойТип = ирОбщий.ПолучитьПервыйФрагментЛкс(СтрокаИнструмента.ПолноеИмя);
			Если Истина
				И КорневойТип <> "Обработка"
				И КорневойТип <> "Отчет"
			Тогда
				Продолжить;
			КонецЕсли; 
			Объект = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс(СтрокаИнструмента.ПолноеИмя);
			МетаОбъект = Объект.Метаданные();
			Если Дерево.Строки.Найти(МетаОбъект.ПолноеИмя(), "Имя") <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Попытка
				МетаФормы = МетаОбъект.Формы;
			Исключение
				Продолжить;
			КонецПопытки;
			СтрокаДереваОбъекта = Неопределено;
			//МенеджерОбъектаМетаданных = ирОбщий.ПолучитьМенеджерЛкс(МетаОбъект);
			МенеджерОбъектаМетаданных = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс(МетаОбъект.ПолноеИмя());
			Индикатор3 = ирОбщий.ПолучитьИндикаторПроцессаЛкс(МетаФормы.Количество(), "Формы");
			Для Каждого МетаФорма Из МетаФормы Цикл
				ирОбщий.ОбработатьИндикаторЛкс(Индикатор3);
				ПолноеИмяФормы = МетаФорма.ПолноеИмя();
				Попытка
					ФормаЛ = МенеджерОбъектаМетаданных.ПолучитьФорму(МетаФорма.Имя,,Новый УникальныйИдентификатор());
				Исключение
					Сообщить("Ошибка при получении формы " + ПолноеИмяФормы + ": " + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
					Продолжить;
				КонецПопытки;
				Если ТипЗнч(ФормаЛ) = Тип("Форма") Тогда
					Если СтрокаДереваОбъекта = Неопределено Тогда
						СтрокаДереваОбъекта = Дерево.Строки.Добавить();
						СтрокаДереваОбъекта.Текст = МетаОбъект.Представление();
						СтрокаДереваОбъекта.Имя = МетаОбъект.ПолноеИмя();
						СтрокаДереваОбъекта.Видимость = Истина;
						СтрокаДереваОбъекта.Доступность = Истина;
						СтрокаДереваОбъекта.ПредставлениеТипа = "Объект";
						Если ЗначениеЗаполнено(СтрокаИнструмента.ИмяКартинки) Тогда
							СтрокаДереваОбъекта.Картинка = ирКэш.КартинкаПоИмениЛкс(СтрокаИнструмента.ИмяКартинки);
						КонецЕсли; 
					КонецЕсли; 
					СтрокаДереваФормы = СтрокаДереваОбъекта.Строки.Добавить();
					СтрокаДереваФормы.Текст = МетаФорма.Представление();
					СтрокаДереваФормы.Имя = МетаФорма.ПолноеИмя();
					СтрокаДереваФормы.Видимость = Истина;
					СтрокаДереваФормы.Доступность = Истина;
					СтрокаДереваФормы.ПредставлениеТипа = "Форма";
					СтрокаДереваФормы.Картинка = ФормаЛ.КартинкаЗаголовка;
					СтрокаДереваФормы.ЭлементФормы = ФормаЛ;
					ДобавитьФорму(ФормаЛ, СтрокаДереваФормы);
					Если МетаОбъект.ОсновнаяФорма = МетаФорма Тогда 
						СтрокаДереваФормы.Основной = Истина;
						СтрокаДереваФормы.Текст = СтрокаДереваФормы.Текст + " (Основная)";
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
		КонецЦикла;
		ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьФорму(Форма, КорневаяСтрокаФормы = Неопределено)
	
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаФормы = ЗначениеВСтрокуВнутр(Форма);
	XMLСтрокаФормы = ирОбщий.СтрокаВнутрВХМЛТелоЛкс(СтрокаФормы);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLСтрокаФормы);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	Если ТипЗнч(Форма) = Тип("Форма") Тогда
		Если КорневаяСтрокаФормы = Неопределено Тогда
			КорневаяСтрокаФормы = Дерево.Строки.Добавить();
			КорневаяСтрокаФормы.Видимость = Истина;
			КорневаяСтрокаФормы.Доступность = Истина;
			КорневаяСтрокаФормы.Текст = "Обычная форма";
			КорневаяСтрокаФормы.ЭлементФормы = Форма;
		КонецЕсли; 
		КорневаяСтрокаФормы.Тип = ТипЗнч(Форма);
		СлужебныеДанныеФормы = ирОбщий.СлужебныеДанныеФормыЛкс(Форма);
		Если СлужебныеДанныеФормы.Свойство("ИмяФормы") Тогда
			КорневаяСтрокаФормы.Имя = СлужебныеДанныеФормы.ИмяФормы;
		КонецЕсли; 
		СтрокаXPath = "/elem/elem/elem[1]/elem[2]/elem[2]";
		РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
		Узел = РезультатXPath.ПолучитьСледующий();
		КорневойЭлемент = Форма.Панель;
		Если КорневойЭлемент.Страницы.Количество() = 1 Тогда
			СтрокаДЗ = КорневаяСтрокаФормы;
			КорневойЭлемент = КорневойЭлемент.Страницы[0];
		Иначе
			СтрокаДЗ = КорневаяСтрокаФормы.Строки.Добавить();
			СтрокаДЗ.ЭлементФормы = Форма.Панель;
			ЗаполнитьСтрокуЭлементаОбычнойФормы(КорневаяСтрокаФормы);
		КонецЕсли; 
		Если Узел <> Неопределено Тогда
			ОбойтиУзелДереваЭлементовОбычнойФормы(КорневаяСтрокаФормы, Форма, Узел, СтрокаДЗ, КорневойЭлемент);
			//Если КорневойЭлемент <> Неопределено Тогда
			//	КорневаяСтрокаФормы.Строки.Удалить(КорневаяСтрокаФормы.Строки.Найти(Форма.Панель, "ЭлементФормы"));
			//КонецЕсли; 
		КонецЕсли;
	Иначе
		Если КорневаяСтрокаФормы = Неопределено Тогда
			КорневаяСтрокаФормы = Дерево.Строки.Добавить();
			КорневаяСтрокаФормы.Видимость = Истина;
			КорневаяСтрокаФормы.Доступность = Истина;
			КорневаяСтрокаФормы.Текст = "Управляемая форма";
			КорневаяСтрокаФормы.ЭлементФормы = Форма;
		КонецЕсли; 
		КорневаяСтрокаФормы.Имя = Форма.ИмяФормы;
		КорневаяСтрокаФормы.Тип = ТипЗнч(Форма);
		СтруктураЗаголовков = Новый Структура;
		НаборыКолонок = Новый Структура;
		НаборыКнопок = Новый Структура;
		// XPATH
		// http://internetka.in.ua/xpath-start-part2/ - Оси
		// http://internetka.in.ua/xpath-start-part3/ - функции
		Для Каждого ЭлементФормы Из Форма.Элементы Цикл
			ИмяЭлемента = ЭлементФормы.Имя;
			Если ТипЗнч(ЭлементФормы) = Тип("ТаблицаФормы") Тогда
				Колонки = Новый Структура;
				СтрокаXPath = "//*[contains(text(),'""" + ИмяЭлемента + """')]";
				РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
				УзелПоля = РезультатXPath.ПолучитьСледующий();
				Если УзелПоля <> Неопределено Тогда
					ИндексПоля = УзелПоля.ПредыдущийСоседний.ТекстовоеСодержимое;
					СтрокаXPath = "//*[text()=" + ИндексПоля + "]/..//data[contains(text(),'""Колонка')]";
					ИтераторКолонок = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
					Пока Истина Цикл
						УзелКолонки = ИтераторКолонок.ПолучитьСледующий();
						Если УзелКолонки = Неопределено Тогда
							Прервать;
						КонецЕсли;
						ВнутреннееИмяКолонки = Вычислить(УзелКолонки.ТекстовоеСодержимое);
						ЭффективныеСвойстваКолонки = Новый Структура;
						СтрокаXPath = "../elem[1]/elem[1]/data[2]";
						ИтераторЗаголовка = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, УзелКолонки, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
						УзелЗаголовка = ИтераторЗаголовка.ПолучитьСледующий();
						Если УзелЗаголовка <> Неопределено Тогда
							ЗаголовокКолонки = Вычислить(УзелЗаголовка.ТекстовоеСодержимое);
						Иначе
							ЗаголовокКолонки = "";
						КонецЕсли; 
						ЭффективныеСвойстваКолонки.Вставить("Заголовок", ЗаголовокКолонки);
						СтрокаXPath = "../elem[3]/elem[1]/data[2]";
						ИтераторЗаголовка = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, УзелКолонки, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
						УзелПодсказки = ИтераторЗаголовка.ПолучитьСледующий();
						Если УзелПодсказки <> Неопределено Тогда
							ПодсказкаКолонки = Вычислить(УзелПодсказки.ТекстовоеСодержимое);
						Иначе
							ПодсказкаКолонки = "";
						КонецЕсли; 
						ЭффективныеСвойстваКолонки.Вставить("Подсказка", ПодсказкаКолонки);
						Колонки.Вставить(ВнутреннееИмяКолонки, ЭффективныеСвойстваКолонки);
					КонецЦикла;
				КонецЕсли; 
				НаборыКолонок.Вставить(ИмяЭлемента, Колонки);
			ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") И ЭлементФормы.Вид = ВидГруппыФормы.КоманднаяПанель Тогда
				ПолныеКнопки = Новый Массив;
				СтрокаXPath = "//*[contains(text(),'""" + ИмяЭлемента + """')]";
				РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
				УзелПоля = РезультатXPath.ПолучитьСледующий();
				Если УзелПоля <> Неопределено Тогда
					ГруппыКнопок = Новый ТаблицаЗначений;
					ГруппыКнопок.Колонки.Добавить("Индекс");
					ГруппыКнопок.Колонки.Добавить("Кнопки");
					ИндексПоля = УзелПоля.ПредыдущийСоседний.ТекстовоеСодержимое;
					ИндексКорневогоПодменю = 0;
					СтрокаXPath = "//data[text()='18a60f47-8dfd-4f2e-a693-026b98f58b2e']/following-sibling::data[text()=" + ИндексПоля + "]/following-sibling::elem[2]/elem[1]/elem";
					ИтераторНабора = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
					Пока Истина Цикл
						УзелНабора = ИтераторНабора.ПолучитьСледующий();
						Если УзелНабора = Неопределено Тогда
							Прервать;
						КонецЕсли;
						Кнопки = Новый Массив;
						СтрокаXPath = "elem[*]";
						ИтераторКнопок = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, УзелНабора, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
						Пока Истина Цикл
							УзелКнопки = ИтераторКнопок.ПолучитьСледующий();
							Если УзелКнопки = Неопределено Тогда
								Прервать;
							КонецЕсли;
							ЗаголовокКнопки = Вычислить(УзелКнопки.ДочерниеУзлы[7].ТекстовоеСодержимое);
							ПодсказкиКнопки = СобратьМногострочнуюСтроку(УзелКнопки, 8);
							ИндексПодменю = ДокументDOM.ВычислитьВыражениеXPath("elem[7]/elem[1]/data[3]/text()", УзелКнопки, РазыменовательПИ, ТипРезультатаDOMXPath.Строка).СтроковоеЗначение;
							Кнопки.Добавить(Новый Структура("Заголовок, Подсказка, ИндексПодменю, КоличествоПодчиненных, Видимость", ЗаголовокКнопки, ПодсказкиКнопки, ИндексПодменю, 0, Истина));
							Если ЗначениеЗаполнено(ИндексПодменю) И ЗаголовокКнопки = "Еще" Тогда
								ИндексКорневогоПодменю = Число(ИндексПодменю);
							КонецЕсли; 
						КонецЦикла;
						СтрокаНабора = ГруппыКнопок.Добавить();
						СтрокаНабора.Кнопки = Кнопки;
						СтрокаНабора.Индекс = Число(ДокументDOM.ВычислитьВыражениеXPath("preceding-sibling::data[1]/text()", УзелНабора, РазыменовательПИ, ТипРезультатаDOMXPath.Строка).СтроковоеЗначение);
					КонецЦикла;
					// Индекс - 4 - отображаемый набор кнопок командной панели
					Для Каждого ОписаниеКнопки Из ГруппыКнопок.Найти(ИндексКорневогоПодменю, "Индекс").Кнопки Цикл
						Если ЗначениеЗаполнено(ОписаниеКнопки.ИндексПодменю) Тогда
							Если ОписаниеКнопки.Заголовок = "Управление поиском" Тогда
								ВиртуальнаяГруппа = Новый Структура;
								ВиртуальнаяГруппа.Вставить("Имя", "");
								ВиртуальнаяГруппа.Вставить("Видимость", Истина);
								ВиртуальнаяГруппа.Вставить("Вид", ВидГруппыФормы.Подменю);
								ВиртуальнаяГруппа.Вставить("ПодчиненныеЭлементы", Новый Массив);
								ДочерниеКнопки = ГруппыКнопок.Найти(Число(ОписаниеКнопки.ИндексПодменю), "Индекс").Кнопки;
								ДобавитьОписаниеКнопкиВПолныйСписокКнопок(ОписаниеКнопки, ПолныеКнопки, ВиртуальнаяГруппа);
								Для Каждого ДочерняяКнопка Из ДочерниеКнопки Цикл
									ДочерняяКнопка.Вставить("Имя", "");
									ДочерняяКнопка.Вставить("ПодчиненныеЭлементы", Новый Массив);
									ВиртуальнаяГруппа.ПодчиненныеЭлементы.Добавить(ДочерняяКнопка);
									ДобавитьОписаниеКнопкиВПолныйСписокКнопок(ДочерняяКнопка, ПолныеКнопки);
								КонецЦикла; 
							Иначе
								ДобавитьОписаниеКнопкиВПолныйСписокКнопок(ОписаниеКнопки, ПолныеКнопки);
								ДочерниеКнопки = ГруппыКнопок.Найти(Число(ОписаниеКнопки.ИндексПодменю), "Индекс").Кнопки;
								ОписаниеКнопки.КоличествоПодчиненных = ДочерниеКнопки.Количество();
								Для Каждого ДочерняяКнопка Из ДочерниеКнопки Цикл
									ДобавитьОписаниеКнопкиВПолныйСписокКнопок(ДочерняяКнопка, ПолныеКнопки);
								КонецЦикла; 
							КонецЕсли; 
						Иначе
							ДобавитьОписаниеКнопкиВПолныйСписокКнопок(ОписаниеКнопки, ПолныеКнопки);
						КонецЕсли; 
					КонецЦикла; 
				КонецЕсли;
				НаборыКнопок.Вставить(ИмяЭлемента, ПолныеКнопки);
			КонецЕсли;
		КонецЦикла;
		ДобавитьЗависимуюКоманднуюПанель(КорневаяСтрокаФормы, Форма, НаборыКнопок);
		ДобавитьГруппуФормы(КорневаяСтрокаФормы, ДокументDOM, НаборыКолонок, НаборыКнопок, РазыменовательПИ);
		ЗаполнитьСтрокуЭлементаУправляемойФормы(КорневаяСтрокаФормы);
	КонецЕсли;

КонецПроцедуры

Функция СобратьМногострочнуюСтроку(Знач УзелКнопки, ИндексУзла)
	
	ПодсказкиКнопки = "";
	Пока Истина Цикл
		ПодсказкиКнопки = ПодсказкиКнопки + УзелКнопки.ДочерниеУзлы[ИндексУзла].ТекстовоеСодержимое;
		Если Прав(ПодсказкиКнопки, 1) = """" Тогда
			Прервать;
		КонецЕсли; 
		ИндексУзла = ИндексУзла + 1;
	КонецЦикла; 
	ПодсказкиКнопки = Вычислить(ПодсказкиКнопки);
	Возврат ПодсказкиКнопки;

КонецФункции

Процедура ДобавитьОписаниеКнопкиВПолныйСписокКнопок(Знач ОписаниеКнопки, Знач ПолныеКнопки, ВиртуальнаяГруппа = Неопределено)
	
	#Если Сервер И Не Сервер Тогда
		ОписаниеКнопки = Новый Структура;
	#КонецЕсли
	Если Ложь
		Или ЗначениеЗаполнено(ОписаниеКнопки.Заголовок)
		Или ЗначениеЗаполнено(ОписаниеКнопки.Подсказка)
	Тогда
		ОписаниеКнопки.Вставить("ВиртуальнаяГруппа", ВиртуальнаяГруппа);
		ПолныеКнопки.Добавить(ОписаниеКнопки);
	КонецЕсли;

КонецПроцедуры

Функция ВычислитьЗаголовокНезависимогоЭлементаУправляемойФормы(Знач ДокументDOM, Знач ИмяЭлемента, Знач РазыменовательПИ)
	
	#Если Сервер И Не Сервер Тогда
	    ДокументDOM = Новый ДокументDOM;
	#КонецЕсли
	Попытка
		СтрокаXPath = "//*[contains(text(),'""" + ИмяЭлемента + "#title""')]";
		РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
		УзелПоля = РезультатXPath.ПолучитьСледующий();
		ИндексЗаголовокаПоля = УзелПоля.ПредыдущийСоседний.ТекстовоеСодержимое;
	Исключение
		ИндексЗаголовокаПоля = Неопределено;
	КонецПопытки;
	ЗаголовокЭлемента = "";
	Если ИндексЗаголовокаПоля <> Неопределено Тогда
		СтрокаXPath = "//*[text()=" + ИндексЗаголовокаПоля + "]/following-sibling::elem[1]/elem[2]/elem[1]/data[2][contains(text(),'""')]/..";
		РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(СтрокаXPath, ДокументDOM, РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
		БазовыйУзел = РезультатXPath.ПолучитьСледующий();
		Если БазовыйУзел <> Неопределено Тогда
			ЗаголовокЭлемента = СобратьМногострочнуюСтроку(БазовыйУзел, 1);
		Иначе
			// Не нашли заголовок видимого поля. Вероятно отображение заголовка у поля выключено
			ПУстышка = 0;
		КонецЕсли; 
	КонецЕсли;
	Возврат ЗаголовокЭлемента;

КонецФункции

Процедура ДобавитьЗависимуюКоманднуюПанель(Знач СтрокаДЗ, Знач ЭлементФормы, Знач НаборыКнопок)
	
	ПодчиненныйЭлемент = ЭлементФормы.КоманднаяПанель;
	СтрокаДочерняяСтрока = СтрокаДЗ.Строки.Добавить();
	СтрокаДочерняяСтрока.ЭлементФормы = ПодчиненныйЭлемент;
	СтрокаДочерняяСтрока.Текст = "Командная панель";
	ДобавитьГруппуКнопокФормы(СтрокаДочерняяСтрока, ПодчиненныйЭлемент, НаборыКнопок[ПодчиненныйЭлемент.Имя]);
	СтрокаДочерняяСтрока.Имя = "КоманднаяПанель";
	ЗаполнитьСтрокуЭлементаУправляемойФормы(СтрокаДочерняяСтрока);

КонецПроцедуры

Процедура ДобавитьГруппуФормы(Знач СтрокаДЗ, Знач ДокументDOM, Знач НаборыКолонок, Знач НаборыКнопок, Знач РазыменовательПИ)
	
	Для Каждого ПодчиненныйЭлемент Из СтрокаДЗ.ЭлементФормы.ПодчиненныеЭлементы Цикл
		Если Ложь
			Или ТипЗнч(ПодчиненныйЭлемент) = Тип("ДекорацияФормы")
		Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаДочерняяСтрока = СтрокаДЗ.Строки.Добавить();
		СтрокаДочерняяСтрока.ЭлементФормы = ПодчиненныйЭлемент;
		СтрокаДочерняяСтрока.Текст = ВычислитьЗаголовокНезависимогоЭлементаУправляемойФормы(ДокументDOM, ПодчиненныйЭлемент.Имя, РазыменовательПИ);
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы") Тогда
			СтрокаДочерняяСтрока.Имя = ПодчиненныйЭлемент.Имя;
			Если ПодчиненныйЭлемент.ПоложениеКоманднойПанели <> ПоложениеКоманднойПанелиЭлементаФормы.Нет Тогда 
				ДобавитьЗависимуюКоманднуюПанель(СтрокаДочерняяСтрока, ПодчиненныйЭлемент, НаборыКнопок);
			КонецЕсли; 
			ДобавитьГруппуКолонокФормы(СтрокаДочерняяСтрока, ПодчиненныйЭлемент, НаборыКолонок[ПодчиненныйЭлемент.Имя]);
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.Вид = ВидГруппыФормы.КоманднаяПанель Тогда
				ДобавитьГруппуКнопокФормы(СтрокаДочерняяСтрока, ПодчиненныйЭлемент, НаборыКнопок[ПодчиненныйЭлемент.Имя]);
			Иначе
				ДобавитьГруппуФормы(СтрокаДочерняяСтрока, ДокументDOM, НаборыКолонок, НаборыКнопок, РазыменовательПИ);
			КонецЕсли; 
		КонецЕсли; 
		ЗаполнитьСтрокуЭлементаУправляемойФормы(СтрокаДочерняяСтрока);
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьГруппуКолонокФормы(СтрокаДЗ, ГруппаТаблицыФормы, СвойстваКолонок, КоличествоВидимыхДобавлено = 0)
	
	#Если Сервер И Не Сервер Тогда
		СвойстваКолонок = Новый Структура;
	#КонецЕсли
	Для Каждого ПодчиненныйЭлемент Из ГруппаТаблицыФормы.ПодчиненныеЭлементы Цикл
		Если ПодчиненныйЭлемент.Видимость Тогда
			КоличествоВидимыхДобавлено = КоличествоВидимыхДобавлено + 1;
		КонецЕсли; 
		СтрокаДочерняяСтрока = СтрокаДЗ.Строки.Добавить();
		СтрокаДочерняяСтрока.ЭлементФормы = ПодчиненныйЭлемент;
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			ДобавитьГруппуКолонокФормы(СтрокаДочерняяСтрока, ПодчиненныйЭлемент, СвойстваКолонок, КоличествоВидимыхДобавлено);
		Иначе
			Если ПодчиненныйЭлемент.Видимость Тогда
				ВнутреннееИмяКолонки = "Колонка" + XMLСтрока(КоличествоВидимыхДобавлено);
				Если СвойстваКолонок.Свойство(ВнутреннееИмяКолонки) Тогда
					ЭффективныеСвойстваКолонки = СвойстваКолонок[ВнутреннееИмяКолонки];
					СтрокаДочерняяСтрока.Текст = ЭффективныеСвойстваКолонки.Заголовок;
					СтрокаДочерняяСтрока.Подсказка = ЭффективныеСвойстваКолонки.Подсказка;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		ЗаполнитьСтрокуЭлементаУправляемойФормы(СтрокаДочерняяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьГруппуКнопокФормы(СтрокаДЗ, ГруппаТаблицыФормы, СвойстваКнопок, НомерКнопки = 0, КоличествоВидимыхВсего = 0, КоличествоВидимыхДобавлено = 0)
	
	#Если Сервер И Не Сервер Тогда
		СвойстваКнопок = Новый Массив;
	#КонецЕсли
	ПеренестиКнопкиВКонец = Новый Соответствие;
	Для Каждого ПодчиненныйЭлемент Из ГруппаТаблицыФормы.ПодчиненныеЭлементы Цикл
		Если Не ПодчиненныйЭлемент.Видимость Тогда
			Продолжить;
		КонецЕсли; 
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			Если ПодчиненныйЭлемент.ПодчиненныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			КоличествоВидимыхПодчиненных = 0;
			Если ПодчиненныйЭлемент.Вид = ВидГруппыФормы.Подменю Тогда
				НомерКнопки = НомерКнопки + 1;
				ЭффективныеСвойстваКнопки = СвойстваКнопок[НомерКнопки - 1];
				Если Ложь
					Или Не ЗначениеЗаполнено(ЭффективныеСвойстваКнопки.ИндексПодменю) 
					Или Найти(Нрег(ПодчиненныйЭлемент.Имя), НРег(ирОбщий.ПолучитьПервыйФрагментЛкс(ЭффективныеСвойстваКнопки.Заголовок, " "))) = 0
				Тогда
					НомерКнопки = НомерКнопки - 1;
					Продолжить;
				КонецЕсли;
				КоличествоВидимыхПодчиненных = ЭффективныеСвойстваКнопки.КоличествоПодчиненных;
			КонецЕсли; 
			СтрокаДочерняяСтрока = СтрокаДЗ.Строки.Добавить();
			СтрокаДочерняяСтрока.ЭлементФормы = ПодчиненныйЭлемент;
			Если ПодчиненныйЭлемент.Вид = ВидГруппыФормы.Подменю Тогда
				ДобавитьГруппуКнопокФормы(СтрокаДочерняяСтрока, ПодчиненныйЭлемент, СвойстваКнопок, НомерКнопки, КоличествоВидимыхПодчиненных);
			Иначе
				ДобавитьГруппуКнопокФормы(СтрокаДочерняяСтрока, ПодчиненныйЭлемент, СвойстваКнопок, НомерКнопки, КоличествоВидимыхВсего, КоличествоВидимыхДобавлено);
			КонецЕсли; 
			ЗаполнитьСтрокуЭлементаУправляемойФормы(СтрокаДочерняяСтрока);
		Иначе
			Если ирОбщий.СтрКончаетсяНаЛкс(ПодчиненныйЭлемент.Имя, "ИзменитьФорму", Истина) > 0 Тогда
				ПеренестиКнопкиВКонец.Вставить("Изменить форму...", ПодчиненныйЭлемент);
			ИначеЕсли ирОбщий.СтрКончаетсяНаЛкс(ПодчиненныйЭлемент.Имя, "Справка", Истина) > 0 Тогда
				ПеренестиКнопкиВКонец.Вставить("Справка", ПодчиненныйЭлемент);
			Иначе
				ДобавитьКнопкуВДерево(СтрокаДЗ, ПодчиненныйЭлемент, СвойстваКнопок, НомерКнопки);
			КонецЕсли; 
			КоличествоВидимыхДобавлено = КоличествоВидимыхДобавлено + 1;
		КонецЕсли; 
		Если КоличествоВидимыхВсего > 0 И КоличествоВидимыхВсего = КоличествоВидимыхДобавлено Тогда
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Для Каждого КлючИЗначение Из ПеренестиКнопкиВКонец Цикл
		ДобавитьКнопкуВДерево(СтрокаДЗ, КлючИЗначение.Значение, СвойстваКнопок, НомерКнопки, КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКнопкуВДерево(СтрокаДЗ, ПодчиненныйЭлемент, СвойстваКнопок, НомерКнопки, Заголовок = "", Подсказка = "")
	
	НомерКнопки = НомерКнопки + 1;
	Пока СвойстваКнопок.Количество() >= НомерКнопки Цикл 
		ЭффективныеСвойстваКнопки = СвойстваКнопок[НомерКнопки - 1];
		Если ЭффективныеСвойстваКнопки.ВиртуальнаяГруппа = Неопределено Тогда
			Прервать;
		КонецЕсли;
		СтрокаДочерняяСтрока = СтрокаДЗ.Строки.Добавить();
		СтрокаДочерняяСтрока.ЭлементФормы = ЭффективныеСвойстваКнопки;
		ДобавитьГруппуКнопокФормы(СтрокаДочерняяСтрока, ЭффективныеСвойстваКнопки.ВиртуальнаяГруппа, СвойстваКнопок, НомерКнопки);
		ЗаполнитьСтрокуЭлементаУправляемойФормы(СтрокаДочерняяСтрока);
		НомерКнопки = НомерКнопки + 1;
	КонецЦикла; 
	Если СвойстваКнопок.Количество() >= НомерКнопки Тогда
		СтрокаДочерняяСтрока = СтрокаДЗ.Строки.Добавить();
		СтрокаДочерняяСтрока.ЭлементФормы = ПодчиненныйЭлемент;
		СтрокаДочерняяСтрока.Текст = ЭффективныеСвойстваКнопки.Заголовок;
		СтрокаДочерняяСтрока.Подсказка = ЭффективныеСвойстваКнопки.Подсказка;
	Иначе
		СтрокаДочерняяСтрока = СтрокаДЗ.Строки.Добавить();
		СтрокаДочерняяСтрока.ЭлементФормы = ПодчиненныйЭлемент;
		СтрокаДочерняяСтрока.Текст = Заголовок;
		СтрокаДочерняяСтрока.Подсказка = Подсказка;
	КонецЕсли;
	ЗаполнитьСтрокуЭлементаУправляемойФормы(СтрокаДочерняяСтрока);

КонецПроцедуры

Процедура ЗаполнитьСтрокуЭлементаУправляемойФормы(СтрокаДерева, Роль = "")
	
	ЭлементФормы = СтрокаДерева.ЭлементФормы;
	Если ЗначениеЗаполнено(СтрокаДерева.Текст) Тогда
		ЗаголовокЭлемента = СтрокаДерева.Текст;
	КонецЕсли; 
	СтрокаДерева.Тип = ТипЗнч(ЭлементФормы);
	СтрокаДерева.ПредставлениеТипа = "" + СтрокаДерева.Тип;
	ИсключаемыеСвойства = Новый Массив;
	Если ЗначениеЗаполнено(СтрокаДерева.Подсказка) И ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Тогда
		ИсключаемыеСвойства.Добавить("Подсказка");
	КонецЕсли; 
	ЗаполнитьЗначенияСвойств(СтрокаДерева, ЭлементФормы,, ирОбщий.ПолучитьСтрокуСРазделителемИзМассиваЛкс(ИсключаемыеСвойства));
	//Свертка = ирОбщий.БезопасноПолучитьЗначениеСвойстваЛкс(ЭлементФормы, "Свернута");
	//Если СтрокаДерева.Видимость И Свертка <> Неопределено И Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
	//	СтрокаДерева.Видимость = Ложь;
	//КонецЕсли; 
	Если Не ЗначениеЗаполнено(СтрокаДерева.Имя) Тогда
		СтрокаДерева.Имя = "" + ТипЗнч(ЭлементФормы);
	КонецЕсли; 
	ИмяКоллекции = "";
	//Если ТипЗнч(ЭлементФормы) = Тип("ГруппаКолонокФормы") Тогда
	//ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
	//	Если ЭлементФормы.ВидГруппы = ВидГруппыФормы.Страницы Тогда
	//		
	//	КонецЕсли; 
	//ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда
	//	ИмяКоллекции = "Кнопки";
	//	ИмяСвойстваЗаголовка = "Текст";
	//ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КолонкаТабличногоПоля") Тогда
	//	ИмяСвойстваЗаголовка = "ТекстШапки";
	//	СтрокаДерева.Подсказка = ЭлементФормы.ПодсказкаВШапке;
	//ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели") Тогда
	//	ИмяСвойстваЗаголовка = "Текст";
	//	СтрокаДерева.Видимость = Истина;
	//Иначе
		ИмяСвойстваЗаголовка = "Заголовок";
	//КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
		Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
			ЗаголовокЭлемента = "";
			СчетчикНепустых = 0;
			Индекс = 0;
			Пока Индекс < ЭлементФормы[ИмяКоллекции].Количество() Цикл
				ЭлементКоллекции = ЭлементФормы[ИмяКоллекции][Индекс];
				ЗаголовокВложенного = ЭлементКоллекции[ИмяСвойстваЗаголовка];
				Индекс = Индекс + 1;
				Если Ложь
					Или Не ЗначениеЗаполнено(ЗаголовокВложенного) 
					Или (Истина
						И ИмяКоллекции = "Кнопки"
						И ЭлементКоллекции.Имя = "СтруктураКоманднойПанели")
				Тогда
					Продолжить;
				КонецЕсли; 
				Если ЗаголовокЭлемента <> "" Тогда
					ЗаголовокЭлемента = ЗаголовокЭлемента + ", ";
				КонецЕсли; 
				ЗаголовокЭлемента = ЗаголовокЭлемента + ЗаголовокВложенного;
				СчетчикНепустых = СчетчикНепустых + 1;
				Если СчетчикНепустых = 5 Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			ЗаголовокЭлемента = ирОбщий.БезопасноПолучитьЗначениеСвойстваЛкс(ЭлементФормы, ИмяСвойстваЗаголовка);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
			ЗаголовокЭлемента = СтрокаДерева.Имя;
			РодительСИменем = СтрокаДерева.Родитель;
			Пока Истина
				И РодительСИменем <> Неопределено
				И Не ЗначениеЗаполнено(РодительСИменем.Имя) 
			Цикл
				РодительСИменем = РодительСИменем.Родитель;
			КонецЦикла; 
			Если Истина
				И РодительСИменем <> Неопределено 
				И Найти(ЗаголовокЭлемента, РодительСИменем.Имя) = 1 
			Тогда
				ЗаголовокЭлемента = Сред(ЗаголовокЭлемента, СтрДлина(РодительСИменем.Имя) + 1);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.ПредставлениеСочетаниеКлавиш) Тогда
		ЗаголовокЭлемента = ЗаголовокЭлемента + " (" + СтрокаДерева.ПредставлениеСочетаниеКлавиш + ")";
	КонецЕсли; 
	СтрокаДерева.Текст = ЗаголовокЭлемента;
	Если ЗначениеЗаполнено(Роль) Тогда
		СтрокаДерева.Текст = "[" + Роль + "] " + СтрокаДерева.Текст;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(СтрокаДерева.Текст) Тогда
		СтрокаДерева.Текст = "<" + СтрокаДерева.Имя + ">";
	КонецЕсли; 
	Если СтрокаДерева.Подсказка = СтрокаДерева.Текст Тогда
		СтрокаДерева.Подсказка = "";
	КонецЕсли; 
	Если СтрокаДерева.СочетаниеКлавиш <> Неопределено Тогда
		ПредставлениеСочетаниеКлавиш = ирОбщий.ПреставлениеСочетанияКлавишЛкс(СтрокаДерева.СочетаниеКлавиш);
		Если Не ирОбщий.СтрокиРавныЛкс(ПредставлениеСочетаниеКлавиш, "Нет") Тогда
			СтрокаДерева.ПредставлениеСочетаниеКлавиш = ПредставлениеСочетаниеКлавиш;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура СортироватьСтроки(СтрокаДерева)
	Если Ложь
		Или СтрокаДерева = Дерево
		Или СтрокаДерева.Тип = Тип("СтраницаПанели")
	Тогда
		СтрокаДерева.Строки.Сортировать("Тип,Текст");
	КонецЕсли; 
	Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
		СортироватьСтроки(ДочерняяСтрока);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСтрокуЭлементаОбычнойФормы(СтрокаДерева, Роль = "")
	
	ЭлементФормы = СтрокаДерева.ЭлементФормы;
	СтрокаДерева.Тип = ТипЗнч(ЭлементФормы);
	СтрокаДерева.ПредставлениеТипа = "" + СтрокаДерева.Тип;
	ЗаполнитьЗначенияСвойств(СтрокаДерева, ЭлементФормы);
	Свертка = ирОбщий.БезопасноПолучитьЗначениеСвойстваЛкс(ЭлементФормы, "Свертка");
	Если СтрокаДерева.Видимость И Свертка <> Неопределено И Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		СтрокаДерева.Видимость = Ложь;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(СтрокаДерева.Имя) Тогда
		СтрокаДерева.Имя = "" + ТипЗнч(ЭлементФормы);
	КонецЕсли; 
	Если ТипЗнч(ЭлементФормы) = Тип("Панель") Тогда
		ИмяКоллекции = "Страницы";
		ИмяСвойстваЗаголовка = "Заголовок";
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
		ИмяКоллекции = "Колонки";
		ИмяСвойстваЗаголовка = "ТекстШапки";
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда
		ИмяКоллекции = "Кнопки";
		ИмяСвойстваЗаголовка = "Текст";
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КолонкаТабличногоПоля") Тогда
		ИмяСвойстваЗаголовка = "ТекстШапки";
		СтрокаДерева.Подсказка = ЭлементФормы.ПодсказкаВШапке;
	ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("КнопкаКоманднойПанели") Тогда
		ИмяСвойстваЗаголовка = "Текст";
		СтрокаДерева.Видимость = Истина;
	Иначе
		ИмяСвойстваЗаголовка = "Заголовок";
	КонецЕсли; 
	Если ЗначениеЗаполнено(ИмяКоллекции) Тогда
		ЗаголовокЭлемента = "";
		СчетчикНепустых = 0;
		Индекс = 0;
		Пока Индекс < ЭлементФормы[ИмяКоллекции].Количество() Цикл
			ЭлементКоллекции = ЭлементФормы[ИмяКоллекции][Индекс];
			ЗаголовокВложенного = ЭлементКоллекции[ИмяСвойстваЗаголовка];
			Индекс = Индекс + 1;
			Если Ложь
				Или Не ЗначениеЗаполнено(ЗаголовокВложенного) 
				Или (Истина
					И ИмяКоллекции = "Кнопки"
					И ЭлементКоллекции.Имя = "СтруктураКоманднойПанели")
			Тогда
				Продолжить;
			КонецЕсли; 
			Если ЗаголовокЭлемента <> "" Тогда
				ЗаголовокЭлемента = ЗаголовокЭлемента + ", ";
			КонецЕсли; 
			ЗаголовокЭлемента = ЗаголовокЭлемента + ЗаголовокВложенного;
			СчетчикНепустых = СчетчикНепустых + 1;
			Если СчетчикНепустых = 5 Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
	Иначе
		ЗаголовокЭлемента = ирОбщий.БезопасноПолучитьЗначениеСвойстваЛкс(ЭлементФормы, ИмяСвойстваЗаголовка);
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаДерева.ПредставлениеСочетаниеКлавиш) Тогда
		ЗаголовокЭлемента = ЗаголовокЭлемента + " (" + СтрокаДерева.ПредставлениеСочетаниеКлавиш + ")";
	КонецЕсли; 
	СтрокаДерева.Текст = ЗаголовокЭлемента;
	Если ЗначениеЗаполнено(Роль) Тогда
		СтрокаДерева.Текст = "[" + Роль + "] " + СтрокаДерева.Текст;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(СтрокаДерева.Текст) Тогда
		СтрокаДерева.Текст = "<" + СтрокаДерева.Имя + ">";
	КонецЕсли; 
	Если СтрокаДерева.Подсказка = СтрокаДерева.Текст Тогда
		СтрокаДерева.Подсказка = "";
	КонецЕсли; 
	Если СтрокаДерева.СочетаниеКлавиш <> Неопределено Тогда
		ПредставлениеСочетаниеКлавиш = ирОбщий.ПреставлениеСочетанияКлавишЛкс(СтрокаДерева.СочетаниеКлавиш);
		Если Не ирОбщий.СтрокиРавныЛкс(ПредставлениеСочетаниеКлавиш, "Нет") Тогда
			СтрокаДерева.ПредставлениеСочетаниеКлавиш = ПредставлениеСочетаниеКлавиш;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ОбойтиУзелДереваЭлементовОбычнойФормы(КорневаяСтрокаФормы, Форма, Узел, СтрокаДЗ, КорневойЭлемент = Неопределено)
	
	Для каждого УзелЭлементаФормы Из Узел.ДочерниеУзлы Цикл
		Если УзелЭлементаФормы.ИмяУзла = "data" Тогда 
			Если ТипЗнч(СтрокаДЗ.ЭлементФормы) = Тип("Панель") Тогда
				Для каждого Страница Из СтрокаДЗ.ЭлементФормы.Страницы Цикл
					Если КорневойЭлемент = Неопределено Тогда
						//Если Не ПоказыватьНевидимые И Не Страница.Видимость Тогда
						//	Продолжить;
						//КонецЕсли; 
						СтрокаСтраница = СтрокаДЗ.Строки.Добавить();
						СтрокаСтраница.ЭлементФормы = Страница;
						ЗаполнитьСтрокуЭлементаОбычнойФормы(СтрокаСтраница);
					КонецЕсли; 
					Если Страница = КорневойЭлемент Тогда
						Прервать;
					КонецЕсли; 
				КонецЦикла;
			Иначе
				// У формы обработки ирЗагрузкаТабличныхДанных сюда попало поле табличного документа ТабличныйДокумент
			КонецЕсли; 
		Иначе
			СвойстваЭлФормы = УзелЭлементаФормы.ДочерниеУзлы;
			Если ТипЗнч(УзелЭлементаФормы.ПоследнийДочерний) = Тип("ТекстDOM") Тогда
				УзелЭлементаФормы.УдалитьДочерний(УзелЭлементаФормы.ПоследнийДочерний);
			КонецЕсли; 
			ЭтоПанель = СвойстваЭлФормы[СвойстваЭлФормы.Количество() - 1].ТекстовоеСодержимое <> "0";
			СвойстваЭлФормыСИменем = СвойстваЭлФормы[СвойстваЭлФормы.Количество() - 2].ДочерниеУзлы;
			СвойстваЭлФормыСИндексом = СвойстваЭлФормы[СвойстваЭлФормы.Количество() - 3].ДочерниеУзлы;
			ИндексСтраницы = Число(СвойстваЭлФормыСИндексом[СвойстваЭлФормыСИндексом.Количество() - 5].ТекстовоеСодержимое);
			ЭлементФормы = Форма.ЭлементыФормы[СтрЗаменить(СвойстваЭлФормыСИменем[1].ТекстовоеСодержимое, """", "")];
			Если Ложь
				Или ТипЗнч(ЭлементФормы) = Тип("Разделитель")
				Или ТипЗнч(ЭлементФормы) = Тип("РамкаГруппы")
				Или ирОбщий.БезопасноПолучитьЗначениеСвойстваЛкс(ЭлементФормы, "Видимость") = Ложь 
			Тогда
				Продолжить;
			КонецЕсли; 
			Если КорневойЭлемент = Неопределено Тогда
				СтрокаРодителя = СтрокаДЗ.Строки[ИндексСтраницы];
			Иначе
				СтрокаРодителя = КорневаяСтрокаФормы;
			КонецЕсли; 
			НовСтрокаДЗ = СтрокаРодителя.Строки.Добавить();
			НовСтрокаДЗ.ЭлементФормы = ЭлементФормы;
			ЗаполнитьСтрокуЭлементаОбычнойФормы(НовСтрокаДЗ);
			Если ЭтоПанель Тогда
				ОбойтиУзелДереваЭлементовОбычнойФормы(КорневаяСтрокаФормы, Форма, СвойстваЭлФормы[СвойстваЭлФормы.Количество() - 1], НовСтрокаДЗ);
			КонецЕсли;
			Если НовСтрокаДЗ <> СтрокаДЗ Тогда
				Если ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда
					ЗаполнитьСтрокиИзКнопок(ЭлементФормы.Кнопки, НовСтрокаДЗ.Строки);
				ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
					Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ОтборКомпоновкиДанных") Тогда
						Для Каждого КолонкаТабличногоПоля Из ЭлементФормы.Колонки Цикл
							//Если Не ПоказыватьНевидимые И Не КолонкаТабличногоПоля.Видимость Тогда
							//	Продолжить;
							//КонецЕсли; 
							СтрокаКолонки = НовСтрокаДЗ.Строки.Добавить();
							СтрокаКолонки.ЭлементФормы = КолонкаТабличногоПоля;
							ЗаполнитьСтрокуЭлементаОбычнойФормы(СтрокаКолонки);
						КонецЦикла;
					КонецЕсли; 
				КонецЕсли; 
				КонтекстноеМеню = ирОбщий.БезопасноПолучитьЗначениеСвойстваЛкс(ЭлементФормы, "КонтекстноеМеню");
				Если КонтекстноеМеню <> Неопределено И КонтекстноеМеню.Кнопки.Количество() > 0 Тогда
					СтрокаКонтекстногоМеню = НовСтрокаДЗ.Строки.Добавить();
					СтрокаКонтекстногоМеню.ЭлементФормы = КонтекстноеМеню;
					ЗаполнитьСтрокуЭлементаОбычнойФормы(СтрокаКонтекстногоМеню);
					СтрокаКонтекстногоМеню.Текст = "[Контекстное меню] " + СтрокаКонтекстногоМеню.Текст;
					ЗаполнитьСтрокиИзКнопок(КонтекстноеМеню.Кнопки, СтрокаКонтекстногоМеню.Строки);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиИзКнопок(Кнопки, СтрокиДерева)
	
	Для Каждого Кнопка Из Кнопки Цикл
		Если Ложь
			Или Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель 
			//Или Кнопка.Имя = "СтруктураКоманднойПанели"
		Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаДерева = СтрокиДерева.Добавить();
		СтрокаДерева.ЭлементФормы = Кнопка;
		ЗаполнитьЗначенияСвойств(СтрокаДерева, Кнопка); 
		Если СтрокаДерева.Подсказка = СтрокаДерева.Текст Тогда
			СтрокаДерева.Подсказка = "";
		КонецЕсли; 
		ПредставлениеСочетаниеКлавиш = ирОбщий.ПреставлениеСочетанияКлавишЛкс(СтрокаДерева.СочетаниеКлавиш);
		Если Не ирОбщий.СтрокиРавныЛкс(ПредставлениеСочетаниеКлавиш, "Нет") Тогда
			СтрокаДерева.ПредставлениеСочетаниеКлавиш = ПредставлениеСочетаниеКлавиш;
		КонецЕсли; 
		ЗаполнитьСтрокуЭлементаОбычнойФормы(СтрокаДерева);
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
			ЗаполнитьСтрокиИзКнопок(Кнопка.Кнопки, СтрокаДерева.Строки);
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(ЭтаФорма, Элемент, ОформлениеСтроки, ДанныеСтроки);
	Если ДанныеСтроки.Картинка <> Неопределено Тогда
		Картинка = ДанныеСтроки.Картинка;
	КонецЕсли; 
	Если Ложь
		Или Картинка = Неопределено
		Или Картинка.Вид = ВидКартинки.Пустая
	Тогда 
		СтруктураТипа = ирКэш.Получить().ПолучитьСтруктуруТипаИзКонкретногоТипа(ДанныеСтроки.Тип);
		ИмяОбщегоТипа = СтруктураТипа.ИмяОбщегоТипа;
		Если ИмяОбщегоТипа = "ТаблицаФормы" Тогда
			ИмяОбщегоТипа = "ТабличноеПоле";
		ИначеЕсли ИмяОбщегоТипа = "КнопкаФормы" Тогда
			ИмяОбщегоТипа = "Кнопка";
		ИначеЕсли Ложь
			Или ИмяОбщегоТипа = "УправляемаяФорма" 
			Или ИмяОбщегоТипа = "ФормаКлиентскогоПриложения" 
		Тогда
			ИмяОбщегоТипа = "Форма";
		ИначеЕсли ИмяОбщегоТипа = "ГруппаФормы" Тогда 
			Если ДанныеСтроки.ЭлементФормы.Вид = ВидГруппыФормы.КоманднаяПанель Тогда
				ИмяОбщегоТипа = "КоманднаяПанель";
			ИначеЕсли ДанныеСтроки.ЭлементФормы.Вид = ВидГруппыФормы.Страницы Тогда
				ИмяОбщегоТипа = "Панель";
			ИначеЕсли ДанныеСтроки.ЭлементФормы.Вид = ВидГруппыФормы.Страница Тогда
				ИмяОбщегоТипа = "СтраницаПанели";
			ИначеЕсли ДанныеСтроки.ЭлементФормы.Вид = ВидГруппыФормы.КонтекстноеМеню Тогда
				ИмяОбщегоТипа = "КоманднаяПанель";
			КонецЕсли; 
		КонецЕсли; 
		Картинка = ирОбщий.ПолучитьКартинкуКорневогоТипаЛкс(ИмяОбщегоТипа);
	КонецЕсли; 
	ОформлениеСтроки.Ячейки.Текст.УстановитьКартинку(Картинка);
	РезультирующиеПризнаки = РезультирующийПризнакСтрокиДерева(ДанныеСтроки);
	Если Не РезультирующиеПризнаки.Видимость Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет(100, 100, 100);
	ИначеЕсли Не РезультирующиеПризнаки.Доступность Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет(50, 50, 50);
	КонецЕсли; 
	ирОбщий.ОформитьСтрокуВТабличномПолеДереваСПоискомЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки, мСтруктураПоискаВДереве);
	
КонецПроцедуры

Функция РезультирующийПризнакСтрокиДерева(Знач СтрокаДерева)

	Результат = Новый Структура("Видимость, Доступность");
	ЗаполнитьЗначенияСвойств(Результат, СтрокаДерева); 
	Пока Истина
		И СтрокаДерева <> Неопределено 
		И (Ложь
			Или Результат.Видимость
			Или Результат.Доступность)
	Цикл
		Если Не СтрокаДерева.Видимость Тогда
			Результат.Видимость = Ложь;
		КонецЕсли; 
		Если Не СтрокаДерева.Доступность Тогда
			Результат.Доступность = Ложь;
		КонецЕсли; 
		СтрокаДерева = СтрокаДерева.Родитель;
	КонецЦикла; 
	Возврат Результат;

КонецФункции // РезультирующийПризнакСтрокиДерева()
 

Процедура ПриЗакрытии()
	
	ВосстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ирОбщий.ТабличноеПолеПриАктивизацииСтрокиЛкс(ЭтаФорма, Элемент);
	ВосстановитьСвойстваЭлементовФормы();
	ЭтаФорма.ПутьВДереве = ирОбщий.ПолучитьСтрокуПутиВДеревеЛкс(Элемент.ТекущаяСтрока, "Текст",, " \ ");
	
КонецПроцедуры

Процедура ВосстановитьСвойстваЭлементовФормы()
	
	ВсеСтрокиДерева = ирОбщий.ВсеСтрокиДереваЗначенийЛкс(Дерево);
	Для Каждого СтрокаДерева Из ВсеСтрокиДерева Цикл
		ВосстановитьСтарыеСвойстваЭлементаФормы(СтрокаДерева); 
	КонецЦикла;
	
КонецПроцедуры

Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, ЭтаФорма);
	ирОбщий.ПрименитьСтрокуПоискаКТабличномуПолюДереваЛкс(ЭлементыФормы.Дерево, СтрокаПоиска, "Текст, Подсказка", мСтруктураПоискаВДереве);
	
КонецПроцедуры

Процедура СтрокаПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ВпередНажатие(Элемент)
	
	ирОбщий.СледующееВхождениеСтрокиПоискаВТабличномПолеДереваЛкс(ЭлементыФормы.Дерево, мСтруктураПоискаВДереве);
	
КонецПроцедуры

Процедура НазадНажатие(Элемент)
	
	ирОбщий.ПредыдущееВхождениеСтрокиПоискаВТабличномПолеДереваЛкс(ЭлементыФормы.Дерево, мСтруктураПоискаВДереве);

КонецПроцедуры

Процедура КоманднаяПанельДереваСвернутьОстальные(Кнопка)
	
	ирОбщий.ТабличноеПолеДеревоЗначений_СвернутьВсеСтрокиЛкс(ЭлементыФормы.Дерево, Истина);
	
КонецПроцедуры

Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если РежимПодсистемы Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаОбъекта = ВыбраннаяСтрока;
		Пока СтрокаОбъекта.Родитель <> Неопределено Цикл
			СтрокаОбъекта = СтрокаОбъекта.Родитель;
		КонецЦикла;
		СтрокаОсновнойФормы = СтрокаОбъекта.Строки.Найти(Истина, "Основной");
		Если СтрокаОсновнойФормы <> Неопределено Тогда 
			Форма = СтрокаОсновнойФормы.ЭлементФормы;
			Если Не Форма.Открыта() Тогда
				Форма.Открыть();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	Если Форма <> Неопределено Тогда
		Форма.Активизировать(); // В управляемом приложении на 8.3.17 делает ничего
		Форма.Открыть();
	КонецЕсли; 
	Активизировать();
	
КонецПроцедуры

Процедура КоманднаяПанельДереваКонсольКода(Кнопка)
	
	Если ЭлементыФормы.Дерево.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирОбщий.ПредложитьЗакрытьМодальнуюФормуЛкс(ЭтаФорма);
	ТекущаяСтрока = ЭлементыФормы.Дерево.ТекущаяСтрока;
	ПрограммныйКод = "Форма.";
	Если ТипЗнч(Форма) = Тип("Форма") Тогда
		Если ТекущаяСтрока.Тип <> Тип("Форма") Тогда
			ПрограммныйКод = "Форма.ЭлементыФормы." + ТекущаяСтрока.Имя;
		КонецЕсли; 
	Иначе
		Если ТекущаяСтрока.Тип <> Тип("УправляемаяФорма") Тогда
			ПрограммныйКод = "Форма.Элементы." + ТекущаяСтрока.Имя;
		КонецЕсли; 
	КонецЕсли; 
	ирОбщий.ОперироватьСтруктуройЛкс(ПрограммныйКод, , Новый Структура("Форма", Форма));

КонецПроцедуры

Процедура КоманднаяПанельДереваИсследоватьЗначениеПараметра(Кнопка)
	
	Если ЭлементыФормы.Дерево.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ирОбщий.ПредложитьЗакрытьМодальнуюФормуЛкс(ЭтаФорма);
	ТекущаяСтрока = ЭлементыФормы.Дерево.ТекущаяСтрока;
	ирОбщий.ИсследоватьЛкс(ЭлементФормыСтрокиДерева(ТекущаяСтрока, Истина));
	
КонецПроцедуры

Процедура КоманднаяПанельДереваСсылкаНаМодуль(Кнопка)
	
	Ссылка = "{" + Дерево.Строки[0].Имя + ".Форма(1)}";
	ирОбщий.ПоместитьТекстВБуферОбменаОСЛкс(Ссылка);
	
КонецПроцедуры

Процедура КоманднаяПанельДереваСтруктураФормы(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруФормыЛкс(ЭтаФорма, 1);
	
КонецПроцедуры

//ирПортативный #Если Клиент Тогда
//ирПортативный Контейнер = Новый Структура();
//ирПортативный Оповестить("ирПолучитьБазовуюФорму", Контейнер);
//ирПортативный Если Не Контейнер.Свойство("ирПортативный", ирПортативный) Тогда
//ирПортативный 	ПолноеИмяФайлаБазовогоМодуля = ирОбщий.ВосстановитьЗначениеЛкс("ирПолноеИмяФайлаОсновногоМодуля");
//ирПортативный 	ирПортативный = ВнешниеОбработки.ПолучитьФорму(ПолноеИмяФайлаБазовогоМодуля);
//ирПортативный КонецЕсли; 
//ирПортативный ирОбщий = ирПортативный.ПолучитьОбщийМодульЛкс("ирОбщий");
//ирПортативный ирКэш = ирПортативный.ПолучитьОбщийМодульЛкс("ирКэш");
//ирПортативный ирСервер = ирПортативный.ПолучитьОбщийМодульЛкс("ирСервер");
//ирПортативный ирПривилегированный = ирПортативный.ПолучитьОбщийМодульЛкс("ирПривилегированный");
//ирПортативный #КонецЕсли

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирПлатформа.Форма.СтруктураФормы");
Дерево.Колонки.Добавить("Картинка");
Дерево.Колонки.Добавить("СтарыеСвойства");
Дерево.Колонки.Добавить("Тип");
Дерево.Колонки.Добавить("Основной", Новый ОписаниеТипов("Булево"));
Дерево.Колонки.Добавить("СочетаниеКлавиш");
Дерево.Колонки.Добавить("ЭлементФормы");
Если КлючУникальности = "ВсеИнструменты" Тогда
	ЭтаФорма.КлючСохраненияПоложенияОкна = КлючУникальности;
	ЭтаФорма.СоединяемоеОкно = Истина;
	ЭтаФорма.СостояниеОкна = ВариантСостоянияОкна.Прикрепленное;
	ЭтаФорма.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Лево;
Иначе
	ЭтаФорма.КлючСохраненияПоложенияОкна = "";
	ЭтаФорма.СостояниеОкна = ВариантСостоянияОкна.Обычное;
	ЭтаФорма.СоединяемоеОкно = Ложь;
КонецЕсли;
